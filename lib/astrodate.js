/**
 * @file {@link https://github.com/Xotic750/astrodate AstroDate}. A more accurate date object that can be used as an alternative to Date.
 * @version 0.5.2
 * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
 * @copyright Graham Fairweather 2013
 * @license {@link <http://www.gnu.org/licenses/> GPL3}
 * @requires module:bignumber.js
 * @module astrodate
 */

/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

(function (globalThis, privateUndefined) {
    'use strict';

    var UWORD32 = Math.pow(2, 32),
        MAX_UINT32 = UWORD32 - 1,
        baseObject = {},
        /**
         * For hasOwnProperty bug.
         * @private
         * @readonly
         * @type {array.<string>}
         */
        defaultProperties = [
            'toString',
            'toLocaleString',
            'valueOf',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'constructor'
        ],
        baseArray = [],
        baseString = '',
        toObjectString,
        baseNumber = 0,
        baseBoolean = true,
        protoName = '__proto__',
        toObject,
        extend,
        arrayIndexOf,
        objectDefineProperty,
        objectDefineProperties,
        objectFreeze,
        objectIsFrozen,
        hasProperty,
        objectHasOwnProperty,
        objectGetOwnPropertyDescriptor,
        arrayIsArray,
        objectInstanceOf,
        objectGetPrototypeOf,
        isPlainObject,
        objectKeys,
        stringTrim,
        stringRepeat,
        stringSplit,
        //stringStartsWith,
        //stringEndsWith,
        stringContains,
        toObjectFixIndexedAccess,
        //arrayUnshift,
        arrayForEach,
        arraySome,
        arrayMap,
        //arrayFilter,
        arrayReduce,
        objectIs,
        numberToInteger,
        numberIsNaN,
        numberIsFinite,
        mathSign,
        projectPaths,
        // Safari 2.x NFE bug fix
        // http://kangax.github.io/nfe/
        tempSafariNFE;

    /**
     * Returns the primitive value undefined.
     * @ignore
     * @private
     * @function
     * @return {undefined}
     */
    /*
function noop() {
    return;
}
*/

    /**
     * Coerces an input to a number.
     * @private
     * @function
     * @param {*} inputArg
     * @return {number}
     */
    function toNumber(inputArg) {
        return +inputArg;
    }

    /**
     * Returns true if the operands are strictly equal with no type conversion.
     * @private
     * @function
     * @param {*} a
     * @param {*} b
     * @return {boolean}
     */
    function strictEqual(a, b) {
        return a === b;
    }

    /**
     * Returns true if the operand number is less than limit.
     * @private
     * @param {number} number
     * @param {number} limit
     * @return {boolean}
     */
    function lt(number, limit) {
        return number < limit;
    }

    /**
     * Returns true if the operand number is less than or equal to limit.
     * @private
     * @function
     * @param {number} number
     * @param {number} limit
     * @return {boolean}
     */
    function lte(number, limit) {
        return number <= limit;
    }

    /**
     * Returns true if the operand number is greater than limit.
     * @private
     * @function
     * @param {number} number
     * @param {number} limit
     * @return {boolean}
     */
    function gt(number, limit) {
        return number > limit;
    }

    /**
     * Returns true if the operand number is greater than or equal to limit.
     * @private
     * @function
     * @param {number} number
     * @param {number} limit
     * @return {boolean}
     */
    function gte(number, limit) {
        return number >= limit;
    }

    /**
     * The mod/remainder operator returns the first operand modulo of the second operand, that is, number1 modulo number2, in the preceding statement,
     * where number1 and number2 are numbers. The modulo function is the integer remainder of dividing number1 by number2.
     * For example, 12 % 5 returns 2. The result will have the same sign as number1; that is, -1 % 2 returns -1.
     * @private
     * @function
     * @param {number} number1
     * @param {number} number2
     * @return {number}
     */
    function mod(number1, number2) {
        return number1 % number2;
    }

    /**
     * Returns a number clamped to the range set by min and max.
     * @private
     * @function
     * @param {number} number
     * @param {number} min
     * @param {number} max
     * @return {number}
     */
    function clamp(number, min, max) {
        return Math.min(Math.max(number, min), max);
    }

    /**
     * Returns true if the operand number is greater than or equal to min or if number is less than or equal to max.
     * @private
     * @function
     * @param {number} number
     * @param {number} min
     * @param {number} max
     * @return {boolean}
     */
    function inRange(number, min, max) {
        return gte(number, min) && lte(number, max);
    }

    /**
     * Returns true if the operand inputArg is undefined.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isUndefined(inputArg) {
        return strictEqual(typeof inputArg, 'undefined');
    }

    /**
     * Returns true if the operand inputArg is null.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isNull(inputArg) {
        return strictEqual(inputArg, null);
    }

    /**
     * Returns true if the operand inputArg is a boolean.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isBoolean(inputArg) {
        return strictEqual(inputArg, true) || strictEqual(inputArg, false);
    }

    /**
     * Returns true if the operand inputArg is a number.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isNumber(inputArg) {
        return strictEqual(typeof inputArg, 'number');
    }

    /**
     * Returns true if the operand inputArg is the number 0.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isZero(inputArg) {
        return strictEqual(inputArg, 0);
    }

    /**
     * Returns true if the operand inputArg is a string.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isString(inputArg) {
        return strictEqual(typeof inputArg, 'string');
    }

    /**
     * Returns true if the operand inputArg is an empty string.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isEmptyString(inputArg) {
        return strictEqual(inputArg, '');
    }

    /**
     * Returns true if the operand inputArg is deemed numeric.
     * @ignore
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    /*
function isNumeric(inputArg) {
    var val = false,
        string;

    if (isNumber(inputArg) || isString(inputArg)) {
        string = inputArg.toString().replace(/^[+\-]?/, "");
        if (!isNaN(parseFloat(string)) && isFinite(string)) {
            val = true;
        }
    }

    return val;
}
*/

    /**
     * The abstract operation throws an error if its argument is a value that cannot be
     * converted to an Object using toObject, otherwise returns the argument.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function checkObjectCoercible(inputArg) {
        if (isUndefined(inputArg) || isNull(inputArg)) {
            throw new TypeError('Cannot convert "' + inputArg + '" to object');
        }

        return inputArg;
    }

    /**
     * The abstract operation converts its argument to a value of type Object
     * @private
     * @function
     * @param {*} inputArg
     * @return {object}
     */
    toObject = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var CtrBoolean = baseBoolean.constructor,
            CtrNumber = baseNumber.constructor,
            CtrString = baseString.constructor,
            nfeToObject;

        tempSafariNFE = function nfeToObject(inputArg) {
            var object = checkObjectCoercible(inputArg);

            if (isBoolean(object)) {
                object = new CtrBoolean(object);
            } else if (isNumber(object)) {
                object = new CtrNumber(object);
            } else if (isString(object)) {
                object = new CtrString(object);
            }

            return object;
        };

        nfeToObject = null;

        return tempSafariNFE;
    }());

    /**
     * The abstract operation converts its argument to a value of type String
     * @private
     * @function
     * @param {*} inputArg
     * @return {string}
     */
    // named anyToString instead of toString because of SpiderMonkey and Blackberry bug
    function anyToString(inputArg) {
        var val;

        if (isString(inputArg)) {
            val = inputArg;
        } else if (isUndefined(inputArg)) {
            val = 'undefined';
        } else {
            val = String(inputArg);
        }

        return val;
    }

    /**
     * Return the String value that is the result of concatenating the three Strings "[object ", class, and "]".
     * @private
     * @function
     * @param {*} object
     * @return {string}
     */
    toObjectString = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var toStringFN = baseObject.toString,
            nfeToObjectString;

        try {
            if (strictEqual(toStringFN.call(), '[object Undefined]') && strictEqual(toStringFN.call(null), '[object Null]')) {
                tempSafariNFE = function nfeToObjectString(object) {
                    return toStringFN.call(object);
                };
            }
        } catch (exception) {
            tempSafariNFE = null;
        }

        if (isNull(tempSafariNFE)) {
            tempSafariNFE = function nfeToObjectString(object) {
                var val;

                if (isUndefined(object)) {
                    val = '[object Undefined]';
                } else if (isNull(object)) {
                    val = '[object Null]';
                } else {
                    val = toStringFN.call(object);
                }

                return val;
            };
        }

        nfeToObjectString = null;

        return tempSafariNFE;
    }());

    /**
     * Returns true if the operand inputArg is a RegExp.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isRegExp(inputArg) {
        return strictEqual(toObjectString(inputArg), '[object RegExp]');
    }

    /**
     * Returns true if the operand inputArg is an Object.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isObject(inputArg) {
        return strictEqual(toObjectString(inputArg), '[object Object]');
    }

    /**
     * Returns true if the operand inputArg is a Function.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isFunction(inputArg) {
        return strictEqual(toObjectString(inputArg), '[object Function]');
    }

    /**
     * Returns true if the operand inputArg is an argumenta object.
     * @ignore
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    /*
function isArguments(inputArg) {
    return strictEqual(toObjectString(inputArg), '[object Arguments]');
}
*/

    /**
     * Returns true if the operand inputArg is of type Object.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isTypeOfObject(inputArg) {
        return strictEqual(typeof inputArg, 'object') || isRegExp(inputArg);
    }

    /**
     * Returns true if the operand inputArg is of type Object but not if null.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isTypeObject(inputArg) {
        return !isNull(inputArg) && isTypeOfObject(inputArg);
    }

    /**
     * The function takes one argument inputArg, and returns the Boolean value true if the argument is an object
     * whose class internal property is "Array"; otherwise it returns false.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    // named arrayIsArray instead of isArray because of SpiderMonkey and Blackberry bug
    arrayIsArray = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var isArrayFN = baseArray.isArray,
            nfeIsArray;

        if (isFunction(isArrayFN)) {
            tempSafariNFE = isArrayFN;
        } else {
            tempSafariNFE = function nfeIsArray(inputArg) {
                return strictEqual(toObjectString(inputArg), '[object Array]');
            };
        }

        nfeIsArray = null;

        return tempSafariNFE;
    }());

    /**
     * The function takes one argument inputArg, if the argument is an object whose class internal property is "Array"
     * or is an Object but not a Function and has a length property; returns true if length is zero otherwise it returns false.
     * Otherwise returns null if the argument does not match the rquirements.
     * @private
     * @function
     * @param {array} inputArg
     * @return {(boolean|null)}
     */
    function isEmptyArray(inputArg) {
        var val;

        if (arrayIsArray(inputArg) || (isTypeObject(inputArg) && !isFunction(inputArg) && hasProperty(inputArg, 'length'))) {
            val = isZero(inputArg.length);
        } else {
            val = null;
        }

        return val;
    }

    /**
     * Returns the first element of an array; otherwise returns undefined.
     * @private
     * @function
     * @param {array} inputArg
     * @return {(*|undefined)}
     */
    function arrayFirst(inputArg) {
        var val;

        if (!isEmptyArray(inputArg)) {
            val = inputArg[0];
        }

        return val;
    }

    /**
     * Returns the last element of an array; otherwise returns undefined.
     * @private
     * @function
     * @param {array} inputArg
     * @return {(*|undefined)}
     */
    function arrayLast(inputArg) {
        var val;

        if (!isEmptyArray(inputArg)) {
            val = inputArg[inputArg.length - 1];
        }

        return val;
    }

    /**
     * Returns true if the operand inputArg is a Date object.
     * @private
     * @function
     * @param {*} inputArg
     * @return {boolean}
     */
    function isDate(inputArg) {
        return strictEqual(toObjectString(inputArg), '[object Date]');
    }

    /**
     * Determines whether two values are the same value.
     * @private
     * @function
     * @param {*} x
     * @param {*} y
     * @return {boolean}
     */
    // named objectIs instead of objectIs because of SpiderMonkey and Blackberry bug
    objectIs = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var isIsFn = baseObject.constructor.is,
            nfeIs;

        if (isFunction(isIsFn)) {
            tempSafariNFE = isIsFn;
        } else {
            tempSafariNFE = function nfeIs(x, y) {
                var val;

                if (strictEqual(x, y)) {
                    if (isZero(x)) {
                        val = strictEqual(1 / x, 1 / y);
                    } else {
                        val = true;
                    }
                } else {
                    val = !strictEqual(x, x) && !strictEqual(y, y);
                }

                return val;
            };
        }

        nfeIs = null;

        return tempSafariNFE;
    }());

    /**
     * The function determines whether the passed value is NaN. More robust version of the original global isNaN.
     * @private
     * @function
     * @param {*} number
     * @return {boolean}
     */
    // named numberIsNaN instead of isNaN because of SpiderMonkey and Blackberry bug
    numberIsNaN = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var isNaNFN = baseNumber.constructor.isNaN,
            nfeIsNaN;

        if (isFunction(isNaNFN)) {
            tempSafariNFE = isNaNFN;
        } else {
            tempSafariNFE = function nfeIsNaN(number) {
                return objectIs(number, NaN);
            };
        }

        nfeIsNaN = null;

        return tempSafariNFE;
    }());

    /**
     * The function determines whether the passed value is finite. More robust version of the original global isFinite.
     * @private
     * @function
     * @param {*} number
     * @return {boolean}
     */
    // named numberIsFinite instead of isFinite because of SpiderMonkey and Blackberry bug
    numberIsFinite = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var isFiniteFN = baseNumber.constructor.isFinite,
            nfeIsFinite;

        if (isFunction(isFiniteFN)) {
            tempSafariNFE = isFiniteFN;
        } else {
            tempSafariNFE = function nfeIsFinite(number) {
                return isNumber(number) && isFinite(number);
            };
        }

        nfeIsFinite = null;

        return tempSafariNFE;
    }());

    /**
     * The function returns the sign of a number, indicating whether the number is positive, negative or zero.
     * This function has 5 kinds of return values, 1, -1, 0, -0, NaN, which represent "positive number",
     * "negative number", "positive zero",  "negative zero" and NaN respectively
     * @private
     * @function
     * @param {*} value
     * @return {number}
     */
    // named mathSign instead of sign because of SpiderMonkey and Blackberry bug
    mathSign = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var signFN = Math.sign,
            nfeSign;

        if (isFunction(signFN)) {
            tempSafariNFE = signFN;
        } else {
            tempSafariNFE = function nfeSign(value) {
                var number = toNumber(value),
                    val;

                if (isZero(number) || numberIsNaN(number)) {
                    val = number;
                } else if (lt(number, 0)) {
                    val = -1;
                } else {
                    val = 1;
                }

                return val;
            };
        }

        nfeSign = null;

        return tempSafariNFE;
    }());

    /**
     * The function evaluates the passed value and converts it to an integer.
     * @private
     * @function
     * @param {*} inputArg
     * @return {number}
     */
    // named numberToInteger instead of toInteger because of SpiderMonkey and Blackberry bug
    numberToInteger = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var toIntegerFN = Number.toInteger,
            nfeToInteger;

        if (isFunction(toIntegerFN)) {
            tempSafariNFE = toIntegerFN;
        } else {
            tempSafariNFE = function nfeToInteger(inputArg) {
                var number = toNumber(inputArg),
                    val;

                if (numberIsNaN(number)) {
                    val = +0;
                } else if (isZero(number) || !numberIsFinite(number)) {
                    val = number;
                } else {
                    val = mathSign(number) * Math.floor(Math.abs(number));
                }

                return val;
            };
        }

        nfeToInteger = null;

        return tempSafariNFE;
    }());

    /**
     * The abstract operation converts its argument to one of 2^32 integer values in the range -2^31 through 2^31-1, inclusive.
     * @ignore
     * @private
     * @function
     * @param {*} inputArg
     * @return {number}
     */
    /*
function toInt32(inputArg) {
    var number = toNumber(inputArg),
        int32bit,
        val;

    if (isZero(number) || !numberIsFinite(number)) {
        val = +0;
    } else {
        int32bit = mod(mathSign(number) * Math.floor(Math.abs(number)), UWORD32);
        if (gt(int32bit, UWORD32)) {
            val = int32bit - UWORD32;
        } else {
            val = int32bit;
        }
    }

    return val;
}
*/

    /**
     * The abstract operation converts its argument to one of 2^32 integer values in the range 0 through 2^32-1,inclusive.
     * @private
     * @function
     * @param {*} inputArg
     * @return {number}
     */
    function toUint32(inputArg) {
        var number = toNumber(inputArg),
            val;

        if (isZero(number) || !numberIsFinite(number)) {
            val = +0;
        } else {
            val = mod(mathSign(number) * Math.floor(Math.abs(number)), UWORD32);
        }

        return val;
    }

    /**
     * Splits a String object into an array of strings by separating the string into substrings.
     * @private
     * @function
     * @param {string} str
     * @param {string} [separator]
     * @param {number} [limit]
     * @return {array.<string>}
     */
    // named stringSplit instead of split because of SpiderMonkey and Blackberry bug
    stringSplit = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var splitFN = baseString.split,
            compliantExecNpcg = isUndefined(/()??/.exec('')[1]),
            nfeSplit;

        function replacer(separator, match, args) {
            var length = args.length - 2,
                index;

            arrayFirst(match).replace(separator, function () {
                for (index = 1; lt(index, length); index += 1) {
                    if (isUndefined(arguments[index])) {
                        match[index] = privateUndefined;
                    }
                }
            });
        }

        tempSafariNFE = function nfeSplit(str, separator, limit) {
            var string = anyToString(checkObjectCoercible(str)),
                output,
                flags,
                lastLastIndex,
                separator2,
                match,
                lastIndex,
                lastLength,
                val;

            if (isRegExp(separator)) {
                flags = 'g';
                if (separator.ignoreCase) {
                    flags += 'i';
                }

                if (separator.multiline) {
                    flags += 'm';
                }

                if (separator.extended) {
                    flags += 'x';
                }

                if (separator.sticky) {
                    flags += 'y';
                }

                separator = new RegExp(separator.source, flags);
                if (!compliantExecNpcg) {
                    separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
                }

                if (isUndefined(limit)) {
                    limit = MAX_UINT32;
                } else {
                    limit = toUint32(limit);
                }

                output = [];
                flags = 'g';
                lastLastIndex = 0;
                match = separator.exec(string);
                while (match) {
                    lastIndex = match.index + arrayFirst(match).length;
                    if (lastIndex > lastLastIndex) {
                        output.push(string.slice(lastLastIndex, match.index));
                        if (!compliantExecNpcg && gt(match.length, 1)) {
                            replacer(separator2, match, arguments);
                        }

                        if (gt(match.length, 1) && lt(match.index, string.length)) {
                            output = output.concat(match.slice(1));
                        }

                        lastLength = arrayFirst(match).length;
                        lastLastIndex = lastIndex;
                        if (gte(output.length, limit)) {
                            break;
                        }
                    }

                    if (strictEqual(separator.lastIndex, match.index)) {
                        separator.lastIndex += 1;
                    }

                    match = separator.exec(string);
                }

                if (strictEqual(lastLastIndex, string.length)) {
                    if (lastLength || !separator.test('')) {
                        output.push('');
                    }
                } else {
                    output.push(string.slice(lastLastIndex));
                }

                if (gt(output.length, limit)) {
                    return output.slice(0, limit);
                }

                val = output;
            } else {
                val = splitFN.call(str, separator, limit);
            }

            return val;
        };

        nfeSplit = null;

        return tempSafariNFE;
    }());

    /**
     * Coerces its argument to a string and returns the first character of that string.
     * If the argument is an empty string, returns an empty string.
     * Throws an error if the argument can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @return {string}
     */
    function firstChar(inputArg) {
        return anyToString(checkObjectCoercible(inputArg)).charAt(0);
    }

    /**
     * Coerces inputArg to a string and compares the first character to the argument character.
     * Throws an error if the arguments can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @param {string} character
     * @return {boolean}
     */
    function firstCharIs(inputArg, character) {
        return strictEqual(firstChar(inputArg), firstChar(character));
    }

    /**
     * Coerces its argument to a string and returns the last character of that string.
     * If the argument is an empty string, returns an empty string.
     * Throws an error if the argument can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @return {string}
     */
    function lastChar(inputArg) {
        var thisStr = anyToString(checkObjectCoercible(inputArg));

        return thisStr.charAt(thisStr.length - 1);
    }

    /**
     * Coerces inputArg to a string and compares the last character to the argument character.
     * Throws an error if the arguments can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @param {string} character
     * @return {boolean}
     */
    function lastCharIs(inputArg, character) {
        return strictEqual(lastChar(inputArg), firstChar(character));
    }

    /**
     * Coerces inputArg to a string and counts the occurences of the argument character.
     * Throws an error if the arguments can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @param {string} character
     * @return {number}
     */
    function countCharacter(inputArg, character) {
        return clamp(stringSplit(anyToString(checkObjectCoercible(inputArg)), firstChar(character)).length - 1, 0, Number.POSITIVE_INFINITY);
    }

    /**
     * Coerces inputArg to a string and repeatedly adds the argument character to the beginning until
     * the string is greater than or equal to the specified length.
     * Throws an error if the arguments can not be coerced, i.e. null or undefined.
     * @private
     * @function
     * @param {string} inputArg
     * @param {string} character
     * @param {number} size
     * @return {string}
     */
    function padLeadingChar(inputArg, character, size) {
        var string = anyToString(checkObjectCoercible(inputArg)),
            singleChar = firstChar(character),
            count = numberToInteger(size) - string.length;

        if (lt(count, 0) || strictEqual(count, Infinity)) {
            count = 0;
        }

        return stringRepeat(singleChar, count) + string;
    }

    /**
     * Repeat the current string several times, return the new string.
     * @private
     * @function
     * @param {string} string
     * @param {number} times
     * @return {string}
     */
    // named stringRepeat instead of repeat because of SpiderMonkey and Blackberry bug
    stringRepeat = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var repeatFN = baseString.constructor.repeat,
            nfeRepeat;

        function rep(s, times) {
            var half,
                val;

            if (lt(times, 1)) {
                val = '';
            } else if (mod(times, 2)) {
                val = rep(s, times - 1) + s;
            } else {
                half = rep(s, times / 2);
                val = half + half;
            }

            return val;
        }

        if (isFunction(repeatFN)) {
            tempSafariNFE = function nfeRepeat(string, times) {
                return repeatFN.call(string, times);
            };
        } else {
            tempSafariNFE = function nfeRepeat(string, count) {
                var thisString = anyToString(checkObjectCoercible(string)),
                    times = numberToInteger(count);

                if (lt(times, 0) || strictEqual(times, Infinity)) {
                    throw new RangeError();
                }

                return rep(thisString, times);
            };
        }

        nfeRepeat = null;

        return tempSafariNFE;
    }());

    /**
     * Determines whether a string begins with the characters of another string, returning true or false as appropriate.
     * @ignore
     * @private
     * @function
     * @param {string} string
     * @param {string} searchString
     * @param {number} [position]
     * @return {boolean}
     */
    /*
// named stringStartsWith instead of startsWith because of SpiderMonkey and Blackberry bug
stringStartsWith = (function () {
    // Unused variable for JScript NFE bug
    // http://kangax.github.io/nfe
    var startsWithFN = baseString.constructor.startsWith,
        nfeStartsWith;

    if (isFunction(startsWithFN)) {
        tempSafariNFE = function nfeStartsWith(string, searchString, position) {
            return startsWithFN.call(string, searchString, position);
        };
    } else {
        tempSafariNFE = function nfeStartsWith(string, searchString, position) {
            var thisStr = anyToString(checkObjectCoercible(string)),
                searchStr = anyToString(searchString),
                thisLen = thisStr.length,
                start = clamp(toInteger(position), 0, thisLen);

            return strictEqual(thisStr.slice(start, start + thisLen), searchStr);
        };
    }

    nfeStartsWith = null;

    return tempSafariNFE;
}());
*/

    /**
     * Determines whether a string ends with the characters of another string, returning true or false as appropriate.
     * @ignore
     * @private
     * @function
     * @param {string} string
     * @param {string} searchString
     * @param {number} [position]
     * @return {boolean}
     */
    /*
// named stringEndsWith instead of endsWith because of SpiderMonkey and Blackberry bug
stringEndsWith = (function () {
    // Unused variable for JScript NFE bug
    // http://kangax.github.io/nfe
    var endsWithFN = baseString.constructor.endsWith,
        nfeEndsWith;

    if (isFunction(endsWithFN)) {
        tempSafariNFE = function nfeEndsWith(string, searchString, position) {
            return endsWithFN.call(string, searchString, position);
        };
    } else {
        tempSafariNFE = function nfeEndsWith(string, searchString, position) {
            var thisStr = anyToString(checkObjectCoercible(string)),
                searchStr = anyToString(searchString),
                thisLen = thisStr.length,
                end,
                start;

            if (isUndefined(position)) {
                position = thisLen;
            } else {
                position = toInteger(position);
            }

            end = clamp(position, 0, thisLen);
            start = end - searchStr.length;

            return gte(start, 0) && strictEqual(thisStr.slice(start, end), searchStr);
        };
    }

    nfeEndsWith = null;

    return tempSafariNFE;
}());
*/

    /**
     * Determines whether a string contains the characters of another string, returning true or false as appropriate.
     * @private
     * @function
     * @param {string} string
     * @param {string} searchString
     * @param {number} [position]
     * @return {boolean}
     */
    // named stringContains instead of contains because of SpiderMonkey and Blackberry bug
    stringContains = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var containsFN = baseString.constructor.contains,
            nfeContains;

        if (isFunction(containsFN)) {
            tempSafariNFE = function nfeContains(string, searchString, position) {
                return containsFN.call(string, searchString, position);
            };
        } else {
            tempSafariNFE = function nfeContains(string, searchString, position) {
                var thisStr = anyToString(checkObjectCoercible(string)),
                    searchStr = anyToString(searchString),
                    thisLen = thisStr.length;

                if (isUndefined(position)) {
                    position = 0;
                } else {
                    position = numberToInteger(position);
                }

                return !strictEqual(baseString.indexOf.call(thisStr, searchStr, clamp(position, 0, thisLen)), -1);
            };
        }

        nfeContains = null;

        return tempSafariNFE;
    }());

    /**
     * Return the value of the [[Prototype]] internal property of object.
     * @private
     * @function
     * @param {object} object
     * @return {Prototype}
     */
    // named objectGetPrototypeOf instead of getPrototypeOf because of SpiderMonkey and Blackberry bug
    objectGetPrototypeOf = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var getPrototypeOfFN = baseObject.constructor.getPrototypeOf,
            nfeGetPrototypeOf,
            bocProto;

        if (isFunction(getPrototypeOfFN)) {
            tempSafariNFE = getPrototypeOfFN;
        } else if (isNull(baseObject.constructor.prototype[protoName])) {
            tempSafariNFE = function nfeGetPrototypeOf(object) {
                return object[protoName];
            };
        } else {
            bocProto = baseObject.constructor.prototype;
            tempSafariNFE = function nfeGetPrototypeOf(object) {
                if (strictEqual(object, bocProto)) {
                    return null;
                }

                var ctrProto = object.constructor.prototype;

                if (strictEqual(object, ctrProto)) {
                    return bocProto;
                }

                return ctrProto;
            };
        }

        nfeGetPrototypeOf = null;

        return tempSafariNFE;
    }());

    /**
     * Returns true if the specified property is in the specified object.
     * @private
     * @function
     * @param {object} object
     * @param {string} property
     * @return {boolean}
     */
    hasProperty = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var nfeHasProperty;

        tempSafariNFE = function nfehasProperty(object, property) {
            return property in object;
        };

        nfeHasProperty = null;

        return tempSafariNFE;
    }());

    /**
     * Returns true if the specified searchElement is in the specified array.
     * Using strict equality (the same method used by the === comparison operator).
     * @private
     * @function
     * @param {array} array
     * @param {*} searchElement
     * @return {boolean}
     */
    function arrayContains(array, searchElement) {
        return !strictEqual(arrayIndexOf(array, searchElement), -1);
    }

    /**
     * Returns a boolean indicating whether the object has the specified property.
     * This function can be used to determine whether an object has the specified property as a direct property of that object;
     * unlike the hasProperty function, this method does not check down the object's prototype chain.
     * @private
     * @function
     * @param {object} object
     * @param {string} property
     * @return {boolean}
     */
    // http://ecma-international.org/ecma-262/5.1/#sec-15.2.4.5
    // Create our own local "hasOwnProperty" function: native -> shim -> sham
    // named objectHasOwnProperty instead of hasOwnProperty because of SpiderMonkey and Blackberry bug
    objectHasOwnProperty = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var hasOwnPropertyFN = baseObject.hasOwnProperty, // to combat old IE8- issues, min support IE6
            propertyIsEnumerableFN = baseObject.propertyIsEnumerable,
            hasDontEnumBug = true,
            testObject = {
                toString: null
            },
            nfeHasOwnProperty;

        // use nfeHasOwnProperty to save a var
        for (nfeHasOwnProperty in testObject) {
            if (strictEqual(nfeHasOwnProperty, 'toString') && isNull(testObject[nfeHasOwnProperty])) {
                hasDontEnumBug = false;
            }
        }

        function checkDontEnums(object, property) {
            return hasDontEnumBug && arrayContains(defaultProperties, property) && hasProperty(object, property) && !strictEqual(object[property], objectGetPrototypeOf(object)[property]);
        }

        if (isFunction(hasOwnPropertyFN)) {
            tempSafariNFE = function nfeHasOwnProperty(object, property) {
                return hasOwnPropertyFN.call(object, property) || checkDontEnums(object, property);
            };
        } else if (isFunction(propertyIsEnumerableFN)) {
            tempSafariNFE = function nfeHasOwnProperty(object, property) {
                return propertyIsEnumerableFN.call(object, property) || checkDontEnums(object, property);
            };
        } else {
            tempSafariNFE = function nfeHasOwnProperty(object, property) {
                return hasProperty(object, property) && isUndefined(objectGetPrototypeOf(object)[property]);
            };
        }

        nfeHasOwnProperty = null;

        return tempSafariNFE;
    }());

    /**
     * The abstract operation converts its argument to a value of type Object but fixes some environment bugs.
     * @private
     * @function
     * @param {*} inputArg
     * @return {object}
     */
    toObjectFixIndexedAccess = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var boxedString = baseObject.constructor('a'),
            splitString = !strictEqual(boxedString[0], 'a') || !hasProperty(boxedString, 0),
            nfeToObjectFixIndexedAccess;

        if (splitString) {
            tempSafariNFE = function nfeToObjectFixIndexedAccess(inputArg) {
                var object;

                if (isString(inputArg)) {
                    object = stringSplit(inputArg, '');
                } else {
                    object = toObject(inputArg);
                }

                return object;
            };
        } else {
            tempSafariNFE = toObject;
        }

        nfeToObjectFixIndexedAccess = null;

        return tempSafariNFE;
    }());

    /**
     * Executes a provided function once per array element.
     * @private
     * @function
     * @param {array} array
     * @param {function} fn
     * @param {object} [thisArg]
     */
    // named arrayForEach instead of forEach because of SpiderMonkey and Blackberry bug
    arrayForEach = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var forEachFN = baseArray.forEach,
            nfeForEach;

        if (isFunction(forEachFN)) {
            tempSafariNFE = function nfeForEach(array, fn, thisArg) {
                return forEachFN.call(array, fn, thisArg);
            };
        } else {
            tempSafariNFE = function nfeForEach(array, fn, thisArg) {
                var object = toObjectFixIndexedAccess(array),
                    length,
                    index;

                if (!isFunction(fn)) {
                    throw new TypeError(fn + ' is not a function');
                }

                for (index = 0, length = toUint32(object.length); lt(index, length); index += 1) {
                    if (hasProperty(object, index)) {
                        fn.call(thisArg, object[index], index, object);
                    }
                }
            };
        }

        nfeForEach = null;

        return tempSafariNFE;
    }());

    /**
     * Tests whether some element in the array passes the test implemented by the provided function.
     * @private
     * @function
     * @param {array} array
     * @param {function} fn
     * @param {object} [thisArg]
     * @return {boolean}
     */
    // named arraySome instead of some because of SpiderMonkey and Blackberry bug
    arraySome = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var someFN = baseArray.some,
            nfeSome;

        if (isFunction(someFN)) {
            tempSafariNFE = function nfeSome(array, fn, thisArg) {
                return someFN.call(array, fn, thisArg);
            };
        } else {
            tempSafariNFE = function nfeSome(array, fn, thisArg) {
                var object = toObjectFixIndexedAccess(array),
                    length,
                    index,
                    val;

                if (!isFunction(fn)) {
                    throw new TypeError(fn + ' is not a function');
                }

                for (index = 0, length = toUint32(object.length), val = false; lt(index, length); index += 1) {
                    if (hasProperty(object, index) && fn.call(thisArg, object[index], index, object)) {
                        val = true;
                        break;
                    }
                }

                return val;
            };
        }

        nfeSome = null;

        return tempSafariNFE;
    }());

    /**
     * Creates a new array with the results of calling a provided function on every element in this array.
     * @private
     * @function
     * @param {array} array
     * @param {function} fn
     * @param {object} [thisArg]
     * @return {array}
     */
    // named arrayMap instead of map because of SpiderMonkey and Blackberry bug
    arrayMap = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var mapFN = baseArray.map,
            nfeMap;

        if (isFunction(mapFN)) {
            tempSafariNFE = function nfeMap(array, fn, thisArg) {
                return mapFN.call(array, fn, thisArg);
            };
        } else {
            tempSafariNFE = function nfeMap(array, fn, thisArg) {
                var object = toObjectFixIndexedAccess(array),
                    length,
                    index,
                    arr;

                if (!isFunction(fn)) {
                    throw new TypeError(fn + ' is not a function');
                }

                for (index = 0, length = toUint32(object.length), arr = []; lt(index, length); index += 1) {
                    arr[index] = fn.call(thisArg, object[index], index, object);
                }

                return arr;
            };
        }

        nfeMap = null;

        return tempSafariNFE;
    }());

    /*
function argumentsSlice(args, start, end) {
    var val;

    if (isArguments(args)) {
        val = baseArray.slice.call(args, start, end);
    }

    return val;
}
*/

    // named arrayUnshift instead of unshift because of SpiderMonkey and Blackberry bug
    /*
arrayUnshift = (function () {
    // Unused variable for JScript NFE bug
    // http://kangax.github.io/nfe
    var unshiftFN = baseArray.unshift,
        nfeUnshift;

    if (strictEqual(unshiftFN.call([], 0), 1)) {
        tempSafariNFE = function nfeUnshift(array) {
            return unshiftFN.apply(array, argumentsSlice(arguments, 1));
        };
    } else {
        tempSafariNFE = function nfeUnshift(array) {
            unshiftFN.apply(array, argumentsSlice(arguments, 1));

            return array.length;
        };
    }

    nfeUnshift = null;

    return tempSafariNFE;
}());
*/

    /**
     * Creates a new array with all elements that pass the test implemented by the provided function.
     * @ignore
     * @private
     * @function
     * @param {array} array
     * @param {function} fn
     * @param {object} [thisArg]
     * @return {array}
     */
    // named arrayFilter instead of filter because of SpiderMonkey and Blackberry bug
    /*
arrayFilter = (function () {
    // Unused variable for JScript NFE bug
    // http://kangax.github.io/nfe
    var filterFN = baseArray.filter,
        nfeFilter;

    if (isFunction(filterFN)) {
        tempSafariNFE = function nfeFilter(array, fn, thisArg) {
            return filterFN.call(array, fn, thisArg);
        };
    } else {
        tempSafariNFE = function nfeFilter(array, fn, thisArg) {
            var object = toObjectFixIndexedAccess(array),
                length,
                arr,
                index,
                element;

            if (!isFunction(fn)) {
                throw new TypeError(fn + ' is not a function');
            }

            for (index = 0, length = toUint32(object.length), arr = []; lt(index, length); index += 1) {
                element = object[index];
                if (fn.call(thisArg, element, index, object)) {
                    arr[index] = element;
                }
            }

            return arr;
        };
    }

    nfeFilter = null;

    return tempSafariNFE;
}());
*/

    /**
     * Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
     * @private
     * @function
     * @param {array} array
     * @param {function} fn
     * @param {*} [initialValue]
     * @return {*}
     */
    // named arrayReduce instead of reduce because of SpiderMonkey and Blackberry bug
    arrayReduce = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var reduceFN = baseArray.reduce,
            errString = 'Reduce of empty array with no initial value',
            nfeReduce;

        if (isFunction(reduceFN)) {
            tempSafariNFE = function nfeReduce(array, fn, initialValue) {
                return reduceFN.call(array, fn, initialValue);
            };
        } else {
            tempSafariNFE = function nfeReduce(array, fn, initialValue) {
                var object = toObjectFixIndexedAccess(array),
                    length,
                    k,
                    index,
                    accumulator,
                    kPresent;

                if (!isFunction(fn)) {
                    throw new TypeError(fn + ' is not a function');
                }

                if (isZero(length) && lt(arguments.length, 3)) {
                    throw new TypeError(errString);
                }

                k = 0;
                if (gt(arguments.length, 2)) {
                    accumulator = initialValue;
                } else {
                    for (k = 0, length = toUint32(object.length), kPresent = false; !kPresent && lt(k, length); k += 1) {
                        kPresent = hasProperty(object, k);
                        if (kPresent) {
                            accumulator = object[k];
                        }
                    }

                    if (!kPresent) {
                        throw new TypeError(errString);
                    }
                }

                for (index = k; lt(index, length); index += 1) {
                    if (hasProperty(object, index)) {
                        accumulator = fn.call(privateUndefined, accumulator, object[index], index, object);
                    }
                }

                return accumulator;
            };
        }

        nfeReduce = null;

        return tempSafariNFE;
    }());

    /**
     * Removes whitespace from both ends of the string.
     * @private
     * @function
     * @param {string} inputArg
     * @return {string}
     */
    // named stringTrim instead of trim because of SpiderMonkey and Blackberry bug
    stringTrim = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe/
        var trimFN = baseString.trim,
            whiteSpacesList = [
                0x0009, // Tab
                0x000a, // Line Feed
                0x000b, // Vertical Tab
                0x000c, // Form Feed
                0x000d, // Carriage Return
                0x0020, // Space
                0x0085, // Next line
                0x00a0, // No-break space
                0x1680, // Ogham space mark
                0x180e, // Mongolian vowel separator
                0x2000, // En quad
                0x2001, // Em quad
                0x2002, // En space
                0x2003, // Em space
                0x2004, // Three-per-em space
                0x2005, // Four-per-em space
                0x2006, // Six-per-em space
                0x2007, // Figure space
                0x2008, // Punctuation space
                0x2009, // Thin space
                0x200a, // Hair space
                0x200b, // Zero width space
                0x2028, // Line separator
                0x2029, // Paragraph separator
                0x202f, // Narrow no-break space
                0x205f, // Medium mathematical space
                0x3000, // Ideographic space
                0xfeff // Byte Order Mark
            ],
            testString,
            whiteSpacesString,
            wsTrimRX,
            nfeTrim,
            nfeBuildTestString,
            nfeBuildWhiteSpaceString;

        tempSafariNFE = function nfeBuildTestString(previous, element) {
            return previous + String.fromCharCode(element);
        };

        testString = arrayReduce(whiteSpacesList, tempSafariNFE, '');
        if (isFunction(trimFN) && isZero(trimFN.call(testString).length)) {
            tempSafariNFE = function nfeTrim(inputArg) {
                return trimFN.call(inputArg);
            };
        } else {
            tempSafariNFE = function nfeBuildWhiteSpaceString(previous, element) {
                return previous + '\\u' + padLeadingChar(element.toString(16), '0', 4);
            };

            whiteSpacesString = arrayReduce(whiteSpacesList, tempSafariNFE, '');
            wsTrimRX = new RegExp('^[' + whiteSpacesString + ']+|[' + whiteSpacesString + ']+$', 'g');
            tempSafariNFE = function nfeTrim(inputArg) {
                return anyToString(checkObjectCoercible(inputArg)).replace(wsTrimRX, '');
            };
        }

        nfeTrim = null;
        nfeBuildTestString = null;
        nfeBuildWhiteSpaceString = null;

        return tempSafariNFE;
    }());

    /**
     * Returns the first index at which a given element can be found in the array, or -1 if it is not present.
     * @private
     * @function
     * @param {array} array
     * @param {object} searchElement
     * @param {number} [fromIndex]
     * @return {number}
     */
    // http://ecma-international.org/ecma-262/5.1/#sec-15.4.4.14
    // Create our own local "indexOf" function: native -> polyfill
    // named arrayIndexOf instead of indexOf because of SpiderMonkey and Blackberry bug
    arrayIndexOf = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var indexOfFN = baseArray.indexOf,
            nfeIndexOf;

        if (isFunction(indexOfFN) && strictEqual(indexOfFN.call([0, 1], 1, 2), 1)) {
            tempSafariNFE = function nfeIndexOf(array, searchElement, fromIndex) {
                return indexOfFN.call(array, searchElement, fromIndex);
            };
        } else {
            tempSafariNFE = function nfeIndexOf(array, searchElement, fromIndex) {
                var object = toObjectFixIndexedAccess(array),
                    length = toUint32(object.length),
                    index,
                    start,
                    val;

                if (isZero(length)) {
                    val = -1;
                } else {
                    if (gt(arguments.length, 2)) {
                        fromIndex = numberToInteger(fromIndex);
                    } else {
                        fromIndex = 0;
                    }

                    if (gte(fromIndex, length)) {
                        val = -1;
                    } else {
                        if (gte(fromIndex, 0)) {
                            start = fromIndex;
                        } else {
                            start = length - Math.abs(fromIndex);
                        }

                        if (lt(start, 0)) {
                            start = 0;
                        }

                        for (index = start, val = -1; lt(index, length); index += 1) {
                            if (hasProperty(object, index) && strictEqual(searchElement, object[index])) {
                                val = index;
                                break;
                            }
                        }
                    }
                }

                return val;
            };
        }

        nfeIndexOf = null;

        return tempSafariNFE;
    }());

    /**
     * Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop
     * (the difference being that a for-in loop enumerates properties in the prototype chain as well).
     * @private
     * @function
     * @param {object} object
     * @return {array}
     */
    // named objectKeys instead of keys because of SpiderMonkey and Blackberry bug
    objectKeys = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var keysFN = baseObject.keys,
            nfeKeys;

        if (isFunction(keysFN)) {
            tempSafariNFE = keysFN;
        } else {
            tempSafariNFE = function nfeKeys(object) {
                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.keys called on a non-object');
                }

                var props = [],
                    prop;

                for (prop in object) {
                    if (objectHasOwnProperty(object, prop)) {
                        props.push(prop);
                    }
                }

                return props;
            };
        }

        nfeKeys = null;

        return tempSafariNFE;
    }());

    /**
     * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.
     * @private
     * @function
     * @param {object} object
     * @param {string} property
     * @param {object} descriptor
     * @return {object}
     */
    // http://ecma-international.org/ecma-262/5.1/#sec-15.4.4.14
    // Create our own local "defineProperty" function: native -> sham
    // named objectDefineProperty instead of defineProperty because of SpiderMonkey and Blackberry bug
    objectDefineProperty = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var definePropertyFN = baseObject.constructor.defineProperty,
            defineGetter = '__defineGetter__',
            defineSetter = '__defineSetter__',
            defineGetterFN,
            defineSetterFN,
            testObject,
            nfeDefineProperty;

        if (isFunction(definePropertyFN)) {
            try {
                testObject = definePropertyFN({}, 'sentinel', {
                    value: null
                });

                if (!isNull(testObject.sentinel)) {
                    definePropertyFN = null;
                }
            } catch (exception) {
                definePropertyFN = null;
            }
        }

        if (isFunction(definePropertyFN)) {
            tempSafariNFE = definePropertyFN;
        } else {
            defineGetterFN = baseObject[defineGetter];
            defineSetterFN = baseObject[defineSetter];
            tempSafariNFE = function nfeDefineProperty(object, property, descriptor) {
                var prototype;

                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.defineProperty called on non-object');
                }

                if (!isTypeObject(descriptor) && !isFunction(descriptor)) {
                    throw new TypeError('Property description must be an object');
                }

                if (objectHasOwnProperty(descriptor, 'value')) {
                    if (isNull(objectGetPrototypeOf(baseObject)[protoName])) {
                        prototype = object[protoName];
                        object[protoName] = objectGetPrototypeOf(baseObject);
                        delete object[property];
                        object[property] = descriptor.value;
                        object[protoName] = prototype;
                    } else {
                        object[property] = descriptor.value;
                    }
                } else {
                    if (!isFunction(defineGetterFN) || !isFunction(defineSetterFN)) {
                        throw new TypeError('getters & setters can not be defined on this javascript engine');
                    }

                    if (isFunction(descriptor.get)) {
                        defineGetterFN.call(object, property, descriptor.get);
                    }

                    if (isFunction(descriptor.set)) {
                        defineSetterFN.call(object, property, descriptor.set);
                    }
                }

                return object;
            };
        }

        nfeDefineProperty = null;

        return tempSafariNFE;
    }());

    /**
     * Defines new or modifies existing properties directly on an object, returning the object.
     * @private
     * @function
     * @param {object} object
     * @param {string} props
     * @return {object}
     */
    // Create our own local "defineProperties" function: native -> sham
    // named objectDefineProperties instead of defineProperties because of SpiderMonkey and Blackberry bug
    objectDefineProperties = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var definePropertiesFN = baseObject.constructor.defineProperties,
            nfeDefineProperties;

        if (isFunction(definePropertiesFN)) {
            tempSafariNFE = definePropertiesFN;
        } else {
            tempSafariNFE = function nfeDefineProperties(object, props) {
                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.defineProperties called on non-object');
                }

                if (!isTypeObject(props) && !isFunction(props)) {
                    throw new TypeError('Property description must be an object');
                }

                arrayForEach(objectKeys(props), function (key) {
                    objectDefineProperty(object, key, props[key]);
                });

                return object;
            };
        }

        nfeDefineProperties = null;

        return tempSafariNFE;
    }());

    /**
     * Returns a property descriptor for an own property (that is, one directly present on an object,
     * not present by dint of being along an object's prototype chain) of a given object.
     * @private
     * @function
     * @param {object} object
     * @param {string} property
     * @return {object}
     */
    // Create our own local "getOwnPropertyDescriptor" function: native -> sham
    // named objectGetOwnPropertyDescriptor instead of getOwnPropertyDescriptor because of SpiderMonkey and Blackberry bug
    objectGetOwnPropertyDescriptor = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var getOwnPropertyDescriptorFN = baseObject.constructor.getOwnPropertyDescriptor,
            lookupGetter = '__lookupGetter__',
            lookupSetter = '__lookupSetter__',
            lookupGetterFN,
            lookupSetterFN,
            testObject,
            nfeGetOwnPropertyDescriptor;

        if (isFunction(getOwnPropertyDescriptorFN)) {
            try {
                testObject = {
                    sentinel: null
                };

                if (!isNull(getOwnPropertyDescriptorFN(testObject, 'sentinel').value)) {
                    getOwnPropertyDescriptorFN = null;
                }
            } catch (exception) {
                getOwnPropertyDescriptorFN = null;
            }
        }

        if (isFunction(getOwnPropertyDescriptorFN)) {
            tempSafariNFE = getOwnPropertyDescriptorFN;
        } else {
            lookupGetterFN = baseObject[lookupGetter];
            lookupSetterFN = baseObject[lookupSetter];
            tempSafariNFE = function nfeGetOwnPropertyDescriptor(object, property) {
                var descriptor,
                    prototype,
                    getter,
                    setter;

                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.getOwnPropertyDescriptor called on a non-object');
                }

                if (objectHasOwnProperty(object, property)) {
                    descriptor = {
                        enumerable: true,
                        configurable: true
                    };

                    if (isFunction(lookupGetterFN) && isFunction(lookupSetterFN)) {
                        prototype = object[protoName];
                        object[protoName] = objectGetPrototypeOf(baseObject);
                        getter = lookupGetterFN.call(object, property);
                        setter = lookupSetterFN.call(object, property);
                        object[protoName] = prototype;
                        if (isFunction(getter) || isFunction(setter)) {
                            if (isFunction(getter)) {
                                descriptor.get = getter;
                            }

                            if (isFunction(setter)) {
                                descriptor.set = setter;
                            }
                        }
                    } else {
                        descriptor.value = object[property];
                        descriptor.writable = true;
                    }
                }

                return descriptor;
            };
        }

        nfeGetOwnPropertyDescriptor = null;

        return getOwnPropertyDescriptorFN;
    }());

    /**
     * Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed;
     * and prevents existing properties, or their enumerability, configurability, or writability, from being changed.
     * In essence the object is made effectively immutable. Returns the object being frozen.
     * @private
     * @function
     * @param {object} object
     * @return {object}
     */
    // Create our own local "freeze" function: native -> sham
    // named objectFreeze instead of freeze because of SpiderMonkey and Blackberry bug
    objectFreeze = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var freezeFN = baseObject.constructor.freeze,
            nfeFreeze;

        if (isFunction(freezeFN)) {
            tempSafariNFE = freezeFN;
        } else {
            tempSafariNFE = function nfeFreeze(object) {
                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.freeze called on non-object');
                }

                return object;
            };
        }

        nfeFreeze = null;

        return tempSafariNFE;
    }());

    // detect a Rhino bug and patch it
    try {
        objectFreeze(function () {
            return;
        });
    } catch (exception) {
        objectFreeze = (function (freezeObject) {
            var nfeFreeze;

            tempSafariNFE = function nfeFreeze(object) {
                var val;

                if (isFunction(object)) {
                    val = object;
                } else {
                    val = freezeObject(object);
                }

                return val;
            };

            nfeFreeze = null;

            return tempSafariNFE;
        }(objectFreeze));
    }

    /**
     * Determine if an object is frozen.
     * @private
     * @function
     * @param {object} object
     * @return {boolean}
     */
    // Create our own local "isFrozen" function: native -> sham
    // named objectIsFrozen instead of isFrozen because of SpiderMonkey and Blackberry bug
    objectIsFrozen = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var isFrozenFN = baseObject.constructor.isFrozen,
            nfeIsFrozen;

        if (isFunction(isFrozenFN)) {
            tempSafariNFE = isFrozenFN;
        } else {
            tempSafariNFE = function nfeIsFrozen(object) {
                if (!isTypeObject(object) && !isFunction(object)) {
                    throw new TypeError('Object.isFrozen called on non-object');
                }

                return false;
            };
        }

        nfeIsFrozen = null;

        return tempSafariNFE;
    }());

    /**
     * To make object fully immutable, freeze each object in object.
     * @private
     * @function
     * @param {object} object
     */
    function deepFreeze(object) {
        objectFreeze(object);
        arrayForEach(objectKeys(object), function (propKey) {
            var prop = object[propKey];

            if ((isTypeObject(prop) || isFunction(prop)) && !objectIsFrozen(prop)) {
                deepFreeze(prop);
            }
        });
    }

    /**
     * The function tests whether an object has in its prototype chain the prototype property of a constructor.
     * @private
     * @function
     * @param {object} object
     * @param {function} ctr
     * @return {boolean}
     */
    // named objectInstanceOf instead of instanceOf because of SpiderMonkey and Blackberry bug
    objectInstanceOf = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var isPrototypeOfFN = baseObject.constructor.prototype.isPrototypeOf,
            nfeInstanceOf;

        if (isFunction(isPrototypeOfFN)) {
            tempSafariNFE = function nfeInstanceOf(object, ctr) {
                if (!isFunction(ctr)) {
                    throw new TypeError('Expecting a function in instanceOf check');
                }

                return isPrototypeOfFN.call(ctr.prototype, object);
            };
        } else if (isFunction(objectGetPrototypeOf)) {
            tempSafariNFE = function nfeInstanceOf(object, ctr) {
                if (!isFunction(ctr)) {
                    throw new TypeError('Expecting a function in instanceOf check');
                }

                var val = false;

                while (object) {
                    if (strictEqual(object, ctr.prototype)) {
                        val = true;
                        break;
                    }

                    object = objectGetPrototypeOf(object);
                }

                return val;
            };
        }

        nfeInstanceOf = null;

        return tempSafariNFE;
    }());

    /**
     * Check to see if an object is a plain object (created using "{}" or "new Object").
     * @private
     * @function
     * @param {object} object
     * @return {boolean}
     */
    isPlainObject = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var baseObjectPrototype = objectGetPrototypeOf(baseObject),
            nfeIsPlainObject;

        tempSafariNFE = function nfeIsPlainObject(object) {
            return isObject(object) && strictEqual(objectGetPrototypeOf(object), baseObjectPrototype);
        };

        nfeIsPlainObject = null;

        return tempSafariNFE;
    }());

    /**
     * Merge the contents of source object together into the target object.
     * @private
     * @function
     * @param {object} target
     * @param {object} source
     * @return {object}
     */
    extend = (function () {
        // Unused variable for JScript NFE bug
        // http://kangax.github.io/nfe
        var nfeExtend;

        tempSafariNFE = function nfeExtend(target, source) {
            if (!isTypeObject(target) && !isFunction(target)) {
                throw new TypeError('extend called on a non-object');
            }

            arrayForEach(objectKeys(source), function (key) {
                objectDefineProperty(target, key, objectGetOwnPropertyDescriptor(source, key));
            });

            return target;
        };

        nfeExtend = null;

        return tempSafariNFE;
    }());

    /**
     * Returns true if the operand inputArg is a Date object and is valid.
     * @private
     * @function
     * @param {*} dateObject
     * @return {boolean}
     */
    function isDateValid(dateObject) {
        return isDate(dateObject) && !numberIsNaN(dateObject.getTime());
    }

    /**
     * Returns true if the operand inputArg is a String and only contains numerical digits.
     * @private
     * @function
     * @param {*} string
     * @return {boolean}
     */
    function isDigits(string) {
        return isString(string) && (/^\d+$/).test(string);
    }

    /**
     * Takes string and puts a backslash in front of every character that is part of the regular expression syntax.
     * This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.
     * @private
     * @function
     * @param {string} string
     * @return {string}
     */
    function escapeRegex(string) {
        return string.replace(/[\[\](){}?*+\^$\\.|]/g, '\\$&');
    }

    /**
     * Wraps a string within the string character.
     * @private
     * @function
     * @param {string} string
     * @param {string} character
     * @return {string}
     */
    function wrapInChar(string, character) {
        return character + string + character;
    }

    /**
     * Replace all occurences of a string pattern within a string with the string characters.
     * @private
     * @function
     * @param {string} string
     * @param {string} pattern
     * @param {string} characters
     * @return {string}
     */
    function replaceAll(string, pattern, characters) {
        return string.replace(new RegExp(escapeRegex(pattern), 'g'), characters);
    }

    deepFreeze(defaultProperties);

    /**
     * Variables and utility functions used by the AstroDate class and requiring the BigNumber library.
     * @private
     * @function
     * @param {class} BigNumber
     * @return {class} AsroDate
     */
    function defineAstroDate(BigNumber) {
        BigNumber.config({
            DECIMAL_PLACES: 9,
            ROUNDING_MODE: 0,
            EXPONENTIAL_AT: [-7, 20],
            RANGE: [-1000000000, 1000000000],
            ERRORS: true
        });

        /**
         * The BigNumber library namespace.
         * @ignore
         * @external BigNumber
         * @see {@link http://mikemcl.github.io/bignumber.js/}
         */
        objectDefineProperties(BigNumber.prototype, {
            /**
             * @memberOf external:BigNumber.prototype
             * @function
             * @this BigNumber
             * @return {BigNumber}
             */
            trunc: {
                value: function () {
                    return this.round(0, 1);
                }
            },

            /**
             * @memberOf external:BigNumber.prototype
             * @function
             * @this BigNumber
             * @return {boolean}
             */
            inRange: {
                value: function (min, max) {
                    return this.gte(min) && this.lte(max);
                }
            },

            /**
             * @memberOf external:BigNumber.prototype
             * @function
             * @this BigNumber
             * @return {BigNumber}
             */
            modf: {
                value: function () {
                    var bn = this;

                    if (bn.isFinite()) {
                        bn = bn.mod(bn.trunc());
                    } else {
                        bn = new BigNumber(NaN);
                    }

                    return bn;
                }
            },

            /**
             * @memberOf external:BigNumber.prototype
             * @function
             * @this BigNumber
             * @return {BigNumber}
             */
            difference: {
                value: function (value) {
                    var diff;

                    if (this.gt(value)) {
                        diff = this.minus(value);
                    } else {
                        diff = this.neg().plus(value);
                    }

                    return diff;
                }
            },

            /**
             * @memberOf external:BigNumber.prototype
             * @function
             * @this BigNumber
             * @return {string}
             */
            padLeadingZero: {
                value: function (size) {
                    return padLeadingChar(this.toString(), '0', size);
                }
            }
        });

        objectDefineProperties(BigNumber, {
            /**
             * @memberOf external:BigNumber
             * @function
             * @param {*} inputArg
             * @return {boolean}
             */
            isBigNumber: {
                value: function (inputArg) {
                    return isObject(inputArg) && objectInstanceOf(inputArg, BigNumber);
                }
            },

            /**
             * @memberOf external:BigNumber
             * @function
             * @param {(number|string)} inputArg
             * @return {BigNumber}
             */
            trunc: {
                value: function (number) {
                    return new BigNumber(number).trunc();
                }
            },

            /**
             * @memberOf external:BigNumber
             * @function
             * @param {(number|string)} inputArg
             * @return {BigNumber}
             */
            modf: {
                value: function (number) {
                    return new BigNumber(number).modf();
                }
            },

            /**
             * @memberOf external:BigNumber
             * @function
             * @param {(number|string)} number1
             * @param {(number|string)} number2
             * @return {BigNumber}
             *
             */
            difference: {
                value: function (number1, number2) {
                    return new BigNumber(number1).difference(number2);
                }
            },

            /**
             * @memberOf external:BigNumber
             * @function
             * @return {BigNumber}
             */
            zero: {
                value: function () {
                    return new BigNumber(0);
                }
            },

            /**
             * @memberOf external:BigNumber
             * @function
             * @return {BigNumber}
             */
            one: {
                value: function () {
                    return new BigNumber(1);
                }
            }
        });

        arrayForEach([BigNumber, BigNumber.prototype], function (element) {
            arrayForEach(objectKeys(element), function (key) {
                objectDefineProperty(element, key, {
                    enumerable: false,
                    configurable: false,
                    writeable: false
                });
            });
        });

        var VERSION = '0.5.2',
            /**
             * For normalising user input and looking up Date object methods.
             * @private
             * @readonly
             * @type {array.<object>}
             */
            fullKeys = [{
                full: 'year',
                alias: 'y',
                local: 'getFullYear'
            }, {
                full: 'month',
                alias: 'M',
                local: 'getMonth'
            }, {
                full: 'day',
                alias: 'd',
                local: 'getDate'
            }, {
                full: 'hour',
                alias: 'h',
                local: 'getHours'
            }, {
                full: 'minute',
                alias: 'm',
                local: 'getMinutes'
            }, {
                full: 'second',
                alias: 's',
                local: 'getSeconds'
            }, {
                full: 'millisecond',
                alias: 'ms',
                local: 'getMilliseconds'
            }, {
                full: 'offset',
                alias: 'z',
                local: 'getTimezoneOffset'
            }],
            /**
             * For looking up CLDR day translations.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            dayKeys = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'],
            /**
             * For looking up CLDR month translations.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            monthKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
            /**
             * For looking up CLDR format translations.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            nameTypes = ['format', 'stand-alone'],
            /**
             * For looking up CLDR width translations.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            widthTypes = ['wide', 'abbreviated', 'narrow'],
            /**
             * For looking up CLDR date and time patterns.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            formatTypes = ['full', 'long', 'medium', 'short'],
            invalidISOCharsRx = new RegExp('[^\\d\\-+WT Z:,\\.]'),
            replaceTokenRX = new RegExp('([^\\\']+)|(\\\'[^\\\']+\\\')', 'g'),
            unmatchedTokenRx = new RegExp('[^a-z]', 'gi'),
            //j2000 = [2000, 1, 1, 11, 58, 55, 816],
            /**
             * For holding CLDR language specific data.
             * @private
             * @type {object}
             */
            languages = {},
            /**
             * For parsing CLDR date patterns.
             * @private
             * @readonly
             * @type {array.<string>}
             */
            datePatterns,
            /**
             * For parsing CLDR time patterns
             * @private
             * @readonly
             * @type {array.<string>}
             */
            timePatterns,
            /**
             * The current default language of the AstroDate constructor.
             * @private
             * @type {string}
             */
            defaultLanguage,
            /**
             * The current default locale of the AstroDate constructor.
             * @private
             * @type {string}
             */
            defaultLocale,
            //calendarTypes,
            leapSeconds,
            /**
             * For holding CLDR supplemental data.
             * @private
             * @type {object}
             */
            supplemental;

        deepFreeze(fullKeys);
        deepFreeze(monthKeys);
        deepFreeze(dayKeys);
        deepFreeze(nameTypes);
        deepFreeze(widthTypes);
        deepFreeze(formatTypes);

        /*
        function InvalidError(message) {
            //this.name = "InvalidError";
            this.message = message || "";
        }

        InvalidError.prototype = new Error();

        function NotImplimentedError(message) {
            //this.name = "NotImplementedError";
            this.message = message || "";
        }

        NotImplimentedError.prototype = new Error();
        */

        function isGregorianLeapYear(struct) {
            return struct.year.mod(400).isZero() || (!struct.year.mod(100).isZero() && struct.year.mod(4).isZero());
        }

        function isJulianLeapYear(struct) {
            return struct.year.mod(4).equals(0);
        }

        function daysInGregorianMonth(struct) {
            var days;

            if (struct.month.eq(2)) {
                days = new BigNumber(28);
                if (isGregorianLeapYear(struct)) {
                    days = days.plus(1);
                }
            } else {
                days = struct.month.minus(1).mod(7).mod(2).neg().plus(31);
            }

            return days;
        }

        function daysInJulianMonth(struct) {
            var days = new BigNumber(28);

            if (struct.month.eq(2) && isJulianLeapYear(struct)) {
                days = days.plus(1);
            }

            return days;
        }

        function daysInGregorianYear(struct) {
            var days = new BigNumber(365);

            if (isGregorianLeapYear(struct)) {
                days = days.plus(1);
            }

            return days;
        }

        function daysInJulianYear(struct) {
            var days = new BigNumber(365);

            if (isJulianLeapYear(struct)) {
                days = days.plus(1);
            }

            return days;
        }

        function inYearRange(year) {
            return year.isFinite();
        }

        function inMonthRange(month) {
            return month.inRange(1, 12);
        }

        function inDayRange(day, dim) {
            return day.inRange(1, dim);
        }

        function inHourRange(hour) {
            return hour.inRange(0, 24);
        }

        function inMinuteRange(minute, hour) {
            return (hour.equals(24) && minute.isZero()) || (!hour.equals(24) && minute.gte(0) && minute.lt(60));
        }

        function inSecondRange(second, struct) {
            var maxSecond = 60,
                leapSecond;

            if (struct.year.gte(1961) && struct.hour.equals(23) && struct.minute.equals(59)) {
                if (!isPlainObject(leapSeconds)) {
                    throw new Error('No leap second table!');
                }

                leapSecond = leapSeconds[struct.year.toString()];
                if (isPlainObject(leapSecond)) {
                    leapSecond = leapSecond[struct.month.toString()];
                    if (isPlainObject(leapSecond)) {
                        leapSecond = toNumber(leapSecond[struct.day.toString()]);
                        if (numberIsFinite(leapSecond)) {
                            maxSecond += leapSecond;
                        }
                    }
                }
            }

            return (struct.hour.equals(24) && second.isZero()) || (!struct.hour.equals(24) && second.gte(0) && second.lt(maxSecond));
        }

        function inMillisecondRange(millisecond, hour) {
            return (hour.equals(24) && millisecond.isZero()) || (!hour.equals(24) && millisecond.gte(0) && millisecond.lt(1000));
        }

        function inOffsetRange(offset) {
            return offset.inRange(-1440, 1440);
        }

        /*
        function inWeekRange(week, year) {
            return offset.inRange(1, 53);
        }

        function inWeekDayRange(weekDay) {
            return weekDay.inRange(1, 7);
        }
        */

        function isValid(struct, julian) {
            var valid = false;

            if (isPlainObject(struct)) {
                valid = !arraySome(fullKeys, function (element) {
                    var bn = struct[element.full],
                        dim;

                    if (!BigNumber.isBigNumber(bn)) {
                        return true;
                    }

                    switch (element.full) {
                    case 'year':
                        if (!inYearRange(bn)) {
                            return true;
                        }

                        break;
                    case 'month':
                        if (!inMonthRange(bn)) {
                            return true;
                        }

                        break;
                    case 'day':
                        if (strictEqual(julian, true)) {
                            dim = daysInJulianMonth(struct);
                        } else {
                            dim = daysInGregorianMonth(struct);
                        }

                        if (!inDayRange(bn, dim)) {
                            return true;
                        }

                        break;
                    case 'hour':
                        if (!inHourRange(bn)) {
                            return true;
                        }

                        break;
                    case 'minute':
                        if (!inMinuteRange(bn, struct.hour)) {
                            return true;
                        }

                        break;
                    case 'second':
                        if (!inSecondRange(bn, struct)) {
                            return true;
                        }

                        break;
                    case 'millisecond':
                        if (!inMillisecondRange(bn, struct.hour)) {
                            return true;
                        }

                        break;
                    case 'offset':
                        if (!inOffsetRange(bn)) {
                            return true;
                        }

                        break;
                        /*
                    case 'week':
                        if (!inWeekRange(bn)) {
                            return true;
                        }

                        break;
                    case 'weekDay':
                        if (!inWeekDayRange(bn)) {
                            return true;
                        }

                        break;
                    */
                    default:
                        throw new Error(element.full);
                    }

                    return false;
                });
            }

            return valid;
        }

        function dayOfGregorianYear(struct) {
            var k;

            if (isGregorianLeapYear(struct)) {
                k = 1;
            } else {
                k = 2;
            }

            return struct.month.times(275).div(9).floor().minus(struct.month.plus(9).div(12).floor().times(k)).plus(struct.day).minus(30);
        }

        function dayOfJulianYear(struct) {
            var dayOfYear = struct.month.times(28).plus(struct.day);

            if (struct.month.gte(2) && isJulianLeapYear(struct)) {
                dayOfYear = dayOfYear.plus(1);
            }

            return dayOfYear;
        }

        function normaliseUnits(unitString) {
            var unit;

            if (isString(unitString)) {
                unitString = stringTrim(unitString).toLowerCase();
                if (gt(unitString.length, 2) && lastCharIs(unitString, 's')) {
                    unitString = unitString.slice(0, -1);
                }

                arraySome(fullKeys, function (element) {
                    var val;

                    if (strictEqual(unitString, element.alias) || strictEqual(unitString, element.full)) {
                        unit = element.full;
                        val = true;
                    } else {
                        val = false;
                    }

                    return val;
                });
            }

            return unit;
        }

        function timeTo(struct, unit) {
            var value;

            switch (normaliseUnits(unit)) {
            case 'day':
                value = struct.hour.div(24).plus(struct.minute.div(1440)).plus(struct.second.div(86400)).plus(struct.millisecond.div(86400000));
                break;
            case 'hour':
                value = struct.hour.plus(struct.minute.div(60)).plus(struct.second.div(3600)).plus(struct.millisecond.div(3600000));
                break;
            case 'minute':
                value = struct.hour.times(60).plus(struct.minute).plus(struct.second.div(60)).plus(struct.millisecond.div(60000));
                break;
            case 'second':
                value = struct.hour.times(3600).plus(struct.minute.times(60)).plus(struct.second).plus(struct.millisecond.div(1000));
                break;
            case 'millisecond':
                value = struct.hour.times(3600000).plus(struct.minute.times(60000)).plus(struct.second.times(1000)).plus(struct.millisecond);
                break;
            default:
                throw new Error(unit);
            }

            return value;
        }

        function gregorianToJd(struct) {
            var b = struct.year.minus(1),
                c = b.times(365),
                d = b.div(4).floor(),
                e = b.div(100).floor().neg(),
                f = b.div(400).floor(),
                g = struct.month.times(367).minus(362).div(12).floor(),
                h;

            if (struct.month.gt(2)) {
                if (isGregorianLeapYear(struct)) {
                    h = -1;
                } else {
                    h = -2;
                }
            } else {
                h = 0;
            }

            return new BigNumber(1721424.5).plus(c).plus(d).plus(e).plus(f).plus(g.plus(h).plus(struct.day).floor()).plus(timeTo(struct, 'day'));
        }

        function gregorianToJdn(struct) {
            return gregorianToJd(struct).round(1, 1);
        }

        /*
        function objectValues(inputArg) {
            return arrayMap(objectKeys(inputArg), function (key) {
                return inputArg[key];
            });
        }
        */

        function dayOfWeekNumber(struct) {
            var day = gregorianToJd(struct).plus(1.5).mod(7).floor();

            if (day.lt(0)) {
                day = day.plus(7);
            }

            return day;
        }

        function weekDayNumber(struct) {
            var bnWeekDay = dayOfWeekNumber(struct);

            if (bnWeekDay.isZero()) {
                bnWeekDay = new BigNumber(7);
            }

            return bnWeekDay;
        }

        function cldrDayKey(struct) {
            return dayKeys[toNumber(dayOfWeekNumber(struct))];
        }

        function fractionToTime(fraction, fractionIn, struct, julian) {
            var time = {},
                totalMs,
                days;

            fraction = new BigNumber(fraction);
            switch (fractionIn) {
            case 'year':
                if (strictEqual(julian, true)) {
                    days = daysInJulianYear(struct);
                } else {
                    days = daysInGregorianYear(struct);
                }

                totalMs = fraction.times(days.times(86400000));
                break;
            case 'month':
                if (strictEqual(julian, true)) {
                    days = daysInJulianMonth(struct);
                } else {
                    days = daysInGregorianMonth(struct);
                }

                totalMs = fraction.times(days.times(86400000));
                break;
            case 'day':
                totalMs = fraction.times(86400000);
                break;
            case 'hour':
                totalMs = fraction.times(3600000);
                break;
            case 'minute':
                totalMs = fraction.times(60000);
                break;
            case 'second':
                totalMs = fraction.times(1000);
                break;
            case 'millisecond':
                totalMs = fraction;
                break;
            default:
                throw new Error(fractionIn);
            }

            time.hour = totalMs.div(3600000).floor();
            time.minute = totalMs.minus(time.hour.times(3600000)).div(60000).floor();
            time.second = totalMs.minus(time.hour.times(3600000)).minus(time.minute.times(60000)).div(1000).floor();
            time.millisecond = totalMs.minus(time.hour.times(3600000)).minus(time.minute.times(60000)).minus(time.second.times(1000)).floor();

            return time;
        }

        function getTime(struct) {
            return gregorianToJd(struct).minus(2440587.5).times(86400000).floor();
        }

        // DeltaT
        //http://eclipse.gsfc.nasa.gov/SEhelp/deltatpoly2004.html
        function deltaTime(struct, canonCorrection) {
            var y = struct.year.plus(struct.month.minus(0.5).div(12)),
                u,
                t,
                r;

            if (struct.year.inRange(-500, 2150)) {
                if (struct.year.lt(500)) {
                    u = y.div(100);
                    r = new BigNumber(10583.6).minus(u.times(1014.41)).plus(u.pow(2).times(33.78311)).minus(u.pow(3).times(5.952053)).minus(u.pow(4).times(0.1798452)).plus(u.pow(5).times(0.022174192)).plus(u.pow(6).times(0.0090316521));
                } else if (struct.year.lt(1600)) {
                    u = y.minus(1000).div(100);
                    r = new BigNumber(1574.2).minus(u.times(556.01)).plus(u.pow(2).times(71.23472)).plus(u.pow(3).times(0.319781)).minus(u.pow(4).times(0.8503463)).minus(u.pow(5).times(0.005050998)).plus(u.pow(6).times(0.0083572073));
                } else if (struct.year.lt(1700)) {
                    t = y.minus(1600);
                    r = new BigNumber(120).minus(t.times(0.9808)).minus(t.pow(2).times(0.01532)).plus(t.pow(3).div(7129));
                } else if (struct.year.lt(1800)) {
                    t = y.minus(1700);
                    r = new BigNumber(8.83).plus(t.times(0.1603)).minus(t.pow(2).times(0.0059285)).plus(t.pow(3).times(0.00013336)).minus(t.pow(4).div(1174000));
                } else if (struct.year.lt(1860)) {
                    t = y.minus(1800);
                    r = new BigNumber(13.72).minus(t.times(0.332447)).plus(t.pow(2).times(0.0068612)).plus(t.pow(3).times(0.0041116)).minus(t.pow(4).times(0.00037436)).plus(t.pow(5).times(0.0000121272)).minus(t.pow(6).times(0.0000001699)).plus(t.pow(7).times(0.000000000875));
                } else if (struct.year.lt(1900)) {
                    t = y.minus(1860);
                    r = new BigNumber(7.62).plus(t.times(0.5737)).minus(t.pow(2).times(0.251754)).plus(t.pow(3).times(0.01680668)).minus(t.pow(4).times(0.0004473624)).plus(t.pow(5).div(233174));
                } else if (struct.year.lt(1920)) {
                    t = y.minus(1900);
                    r = new BigNumber(-2.79).plus(t.times(1.494119)).minus(t.pow(2).times(0.0598939)).plus(t.pow(3).times(0.0061966)).minus(t.pow(4).times(0.000197));
                } else if (struct.year.lt(1941)) {
                    t = y.minus(1920);
                    r = new BigNumber(21.20).plus(t.times(0.84493)).minus(t.pow(2).times(0.076100)).plus(t.pow(3).times(0.0020936));
                } else if (struct.year.lt(1961)) {
                    t = y.minus(1950);
                    r = new BigNumber(29.07).plus(t.times(0.407)).minus(t.pow(2).div(233)).plus(t.pow(3).div(2547));
                } else if (struct.year.lt(1986)) {
                    t = y.minus(1975);
                    r = new BigNumber(45.45).plus(t.times(1.067)).minus(t.pow(2).div(260)).minus(t.pow(3).div(718));
                } else if (struct.year.lt(2005)) {
                    t = y.minus(2000);
                    r = new BigNumber(63.86).plus(t.times(0.3345)).minus(t.pow(2).times(0.060374)).plus(t.pow(3).times(0.0017275)).plus(t.pow(4).times(0.000651814)).plus(t.pow(5).times(0.00002373599));
                } else if (struct.year.lt(2050)) {
                    t = y.minus(2000);
                    r = new BigNumber(62.92).plus(t.times(0.32217)).plus(t.pow(2).times(0.005589));
                } else {
                    r = new BigNumber(-20).plus(y.minus(1820).div(100).pow(2).times(32)).minus(y.neg().plus(2150).times(0.5628));
                }
            } else {
                u = y.minus(1820).div(100);
                r = u.pow(2).times(32).plus(-20);
            }

            if (canonCorrection && !struct.year.inRange(1955, 2004)) {
                r.plus(y.minus(1955).pow(2).times(-0.000012932));
            }

            return r.times(1000).trunc();
        }

        function arrayToStruct(arr, julian) {
            var struct = {};

            if (arrayIsArray(arr)) {
                arraySome(fullKeys, function (element, index) {
                    var value = arr[index],
                        bn,
                        dim;

                    if (isNumber(value) || isString(value) || BigNumber.isBigNumber(value)) {
                        bn = new BigNumber(value);
                    } else {
                        bn = new BigNumber(NaN);
                    }

                    switch (element.full) {
                    case 'year':
                        if (!inYearRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'month':
                        if (isUndefined(value)) {
                            bn = BigNumber.one();
                        }

                        if (!inMonthRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'day':
                        if (strictEqual(julian, true)) {
                            dim = daysInJulianMonth(struct);
                        } else {
                            dim = daysInGregorianMonth(struct);
                        }

                        if (isUndefined(value)) {
                            bn = BigNumber.one();
                        }

                        if (!inDayRange(bn, dim)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'hour':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inHourRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'minute':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inMinuteRange(bn, struct.hour)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'second':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inSecondRange(bn, struct)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'millisecond':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inMillisecondRange(bn, struct.hour)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'offset':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inOffsetRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    default:
                        throw new Error(element);
                    }

                    struct[element.full] = bn;

                    return false;
                });
            }

            return struct;
        }

        function structToArray(struct) {
            var arr;

            if (isValid(struct)) {
                arr = arrayMap(fullKeys, function (element) {
                    return struct[element.full];
                });
            } else {
                arr = [];
            }

            return arr;
        }

        function returnElementToString(element) {
            return element.toString();
        }

        function structToArrayOfString(struct) {
            return arrayMap(structToArray(struct), returnElementToString);
        }

        function objectToStruct(object, julian) {
            var struct = {};

            if (isPlainObject(object)) {
                arraySome(fullKeys, function (element) {
                    var value = object[element.alias] || object[element.full] || object[element.full + 's'],
                        bn,
                        dim;

                    if (isNumber(value) || isString(value) || BigNumber.isBigNumber(value)) {
                        bn = new BigNumber(value);
                    } else {
                        bn = new BigNumber(NaN);
                    }

                    switch (element.full) {
                    case 'year':
                        if (!inYearRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'month':
                        if (isUndefined(value)) {
                            bn = BigNumber.one();
                        }

                        if (!inMonthRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'day':
                        if (strictEqual(julian, true)) {
                            dim = daysInJulianMonth(struct);
                        } else {
                            dim = daysInGregorianMonth(struct);
                        }

                        if (isUndefined(value)) {
                            bn = BigNumber.one();
                        }

                        if (!inDayRange(bn, dim)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'hour':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inHourRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'minute':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inMinuteRange(bn, struct.hour)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'second':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inSecondRange(bn, struct)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'millisecond':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inMillisecondRange(bn, struct.hour)) {
                            struct = {};
                            return true;
                        }

                        break;
                    case 'offset':
                        if (isUndefined(value)) {
                            bn = BigNumber.zero();
                        }

                        if (!inOffsetRange(bn)) {
                            struct = {};
                            return true;
                        }

                        break;
                    default:
                        throw new Error(element);
                    }

                    struct[element.full] = bn;

                    return false;
                });
            }

            return struct;
        }

        function structToObject(struct) {
            var newObject = {};

            if (isPlainObject(struct)) {
                arrayForEach(objectKeys(struct), function (key) {
                    newObject[key] = struct[key].toString();
                });
            }

            return newObject;
        }

        function dateToStruct(date) {
            var struct = {};

            if (isDateValid(date)) {
                arrayForEach(fullKeys, function (element) {
                    var value = new BigNumber(date[element.local]());

                    if (strictEqual(element.full, 'month')) {
                        value = value.plus(1);
                    }

                    struct[element.full] = value;
                });
            }

            return struct;
        }

        function julianToJd(struct) {
            var year = struct.year,
                month,
                a,
                b;

            month = struct.month;
            if (month.lte(2)) {
                year = year.minus(1);
                month = month.plus(12);
            }

            a = year.plus(4716).times(365.25).floor();
            b = month.plus(1).times(30.6001).floor();

            return a.plus(b).plus(struct.day).minus(1524.5).plus(timeTo(struct, 'day'));
        }

        /*
        function julianToJdn(struct) {
            return julianToJd(struct).round(1, 1);
        }
        */

        function jdToGregorian(julianDate) {
            var struct = {},
                jd = new BigNumber(julianDate),
                a,
                b;

            if (jd.isFinite()) {
                jd = jd.plus(0.5);
                a = jd.plus(68569).floor();
                b = a.times(4).div(146097).floor();
                a = a.minus(b.times(146097).plus(3).div(4).floor());
                struct.year = a.plus(1).times(4000).div(1461001).floor();
                a = a.minus(struct.year.times(1461).div(4).floor()).plus(31);
                struct.month = a.times(80).div(2447).floor();
                struct.day = a.minus(struct.month.times(2447).div(80).floor());
                a = struct.month.div(11).floor();
                struct.month = struct.month.plus(2).minus(a.times(12));
                struct.year = b.minus(49).times(100).plus(struct.year).plus(a).floor();
                struct.offset = BigNumber.zero();
                extend(struct, fractionToTime(jd.modf().abs(), 'day'));
            }

            return struct;
        }

        function jdToJulian(julianDate) {
            var struct = {},
                jd = new BigNumber(julianDate),
                a,
                b,
                c,
                d,
                e,
                g;

            if (jd.isFinite()) {
                jd = jd.plus(0.5);
                a = jd.floor();
                b = a.plus(1524);
                c = b.minus(122.1).div(365.25).floor();
                d = c.times(365.25).floor();
                g = b.minus(d);
                e = g.div(30.6001).floor();

                struct.day = g.minus(e.times(30.6001).floor());
                if (e.lt(14)) {
                    struct.month = e.minus(1);
                } else {
                    struct.month = e.minus(13);
                }

                if (struct.month.gt(2)) {
                    struct.year = c.minus(4716);
                } else {
                    struct.year = c.minus(4715);
                }

                struct.offset = BigNumber.zero();
                extend(struct, fractionToTime(jd.modf().abs(), 'day'));
            }

            return struct;
        }

        function gregorianToMJD(struct) {
            return gregorianToJd(struct).minus(2400000.5);
        }

        function julianToMJD(struct) {
            return julianToJd(struct).minus(2400000.5);
        }

        /*
        function jdToMJD(jd) {
            return jd.minus(2400000.5);
        }
        */

        function gregorianToJulian(struct) {
            var newStruct;

            if (isValid(struct)) {
                newStruct = jdToJulian(gregorianToJd(struct));
            } else {
                newStruct = {};
            }

            return newStruct;
        }

        function julianToGregorian(struct) {
            var newStruct;

            if (isValid(struct)) {
                newStruct = jdToGregorian(julianToJd(struct));
            } else {
                newStruct = {};
            }

            return newStruct;
        }

        function toUT(struct) {
            return jdToGregorian(gregorianToJd(struct).times(86400000).plus(struct.offset.times(60000)).div(86400000));
        }

        function toTT(struct) {
            var offset = struct.offset,
                structTT = jdToGregorian(gregorianToJd(struct).times(86400000).minus(deltaTime(struct)).div(86400000));

            structTT.offset = offset;

            return structTT;
        }

        function bnGetTimezoneOffset() {
            return new BigNumber(new Date().getTimezoneOffset());
        }

        function toLocal(struct) {
            var timezoneOffset = bnGetTimezoneOffset(),
                structLocal = jdToGregorian(gregorianToJd(struct).times(86400000).plus(struct.offset.times(60000)).minus(bnGetTimezoneOffset().times(60000)).div(86400000));

            structLocal.offset = timezoneOffset;

            return structLocal;
        }

        /*
        function toTAI(struct) {
            var offset = struct.offset,
                structTT = jdToGregorian(gregorianToJd(struct).times(86400000).minus(deltaTime(struct)).minus(32184).div(86400000));

            structTT.offset = offset;

            return structTT;
        }

        function toGPS(struct) {
              var offset = struct.offset,
                structTT = jdToGregorian(gregorianToJd(struct).times(86400000).minus(deltaTime(struct)).minus(51184).div(86400000));

            structTT.offset = offset;

            return structTT;
        }
        */

        /**
         * Converts a date struct to an ISO extended dateTime stamp.
         * This routine needs changing so that the type of ISO dateTime stamp can be choosen.
         * @private
         * @function
         * @param {object} struct
         * @param {number} userPadding
         * @return {string}
         */
        function toISOString(struct, userPadding) {
            var string,
                index,
                count,
                padding,
                last,
                value,
                key,
                number;

            number = toNumber(userPadding);
            if (lt(number, 5) || !numberIsFinite(number)) {
                number = 6;
            }

            index = 0;
            string = '';
            for (count = 0; lt(count, 3); count += 1) {
                if (isUndefined(struct[fullKeys[count].full])) {
                    index = 3;
                    break;
                }
            }

            for (last = fullKeys.length - 1; lt(index, last); index += 1) {
                key = fullKeys[index].full;
                value = struct[key];
                if (strictEqual(key, 'year')) {
                    if (value.lt(0)) {
                        string += '-';
                        padding = number;
                    } else if (value.gte(10000)) {
                        string += '+';
                        padding = number;
                    } else {
                        padding = 4;
                    }
                } else if (strictEqual(key, 'hour')) {
                    string += 'T';
                    padding = 2;
                } else if (strictEqual(key, 'millisecond')) {
                    padding = 3;
                } else {
                    padding = 2;
                }

                string += value.abs().padLeadingZero(padding);
                if (lt(index, 2)) {
                    string += '-';
                } else if (inRange(index, 3, 4)) {
                    string += ':';
                } else if (strictEqual(key, 'second')) {
                    string += '.';
                }
            }

            value = struct.offset;
            if (value.isZero()) {
                string += 'Z';
            } else {
                if (value.lte(0)) {
                    string += '+';
                } else {
                    string += '-';
                }

                value = fractionToTime(value.abs(), 'minute');
                string += value.hour.padLeadingZero(2);
                string += ':';
                string += value.minute.padLeadingZero(2);
            }

            return string;
        }

        /**
         * Returns true if the ISO timeDate stamp has the correct character counts/looks like an ISO timeDate stamp.
         * @private
         * @function
         * @param {string} string
         * @return {boolean}
         */
        function isoHasValidCharacterCounts(string) {
            var val;

            if (!inRange(countCharacter(string, ' ') + countCharacter(string, 'T'), 0, 1)) {
                val = false;
            } else if (!inRange(countCharacter(string, 'W'), 0, 1)) {
                val = false;
            } else if (!inRange(countCharacter(string, 'Z'), 0, 1)) {
                val = false;
            } else if (!inRange(countCharacter(string, '.') + countCharacter(string, ','), 0, 1)) {
                val = false;
            } else if (!inRange(countCharacter(string, '+'), 0, 2)) {
                val = false;
            } else if (!inRange(countCharacter(string, '-'), 0, 4)) {
                val = false;
            } else if (!inRange(countCharacter(string, ':'), 0, 4)) {
                val = false;
            } else if (lt(string.replace(/\D/g, '').length, 2)) {
                val = false;
            } else {
                val = true;
            }

            return val;
        }

        /**
         * Convert the ISO ordinal date to a date struct.
         * @private
         * @function
         * @param {(number|string|BigNumber)} year
         * @param {(number|string|BigNumber)} dayOfYear
         * @return {object}
         */
        function ordinalToCalendar(year, dayOfYear) {
            var struct = {
                year: new BigNumber(year),
                month: BigNumber.one(),
                day: BigNumber.one(),
                hour: BigNumber.zero(),
                minute: BigNumber.zero(),
                second: BigNumber.zero(),
                millisecond: BigNumber.zero()
            },
                daysInYear = daysInGregorianYear(struct),
                result;

            dayOfYear = new BigNumber(dayOfYear);
            if (dayOfYear.inRange(1, daysInYear)) {
                struct = jdToGregorian(gregorianToJd(struct).plus(dayOfYear).minus(1));
                result = {
                    sign: 1,
                    year: struct.year,
                    month: struct.month,
                    day: struct.day
                };
            }

            return result;
        }

        /**
         * Convert the ISO week date to a date struct.
         * @private
         * @function
         * @param {(number|string|BigNumber)} year
         * @param {(number|string|BigNumber)} week
         * @param {(number|string|BigNumber)} weekDay
         * @return {object}
         */
        function weekDateToCalendar(year, week, weekDay) {
            var struct = {
                year: new BigNumber(year),
                month: BigNumber.one(),
                day: new BigNumber(4),
                hour: BigNumber.zero(),
                minute: BigNumber.zero(),
                second: BigNumber.zero(),
                millisecond: BigNumber.zero()
            },
                weekDayJan4 = weekDayNumber(struct),
                dayOfYear;

            dayOfYear = new BigNumber(7).times(week).plus(weekDay).minus(weekDayJan4.plus(3));
            if (dayOfYear.lt(1)) {
                struct.year = struct.year.minus(1);
                dayOfYear = daysInGregorianYear(struct).plus(dayOfYear);
            } else if (dayOfYear.gt(daysInGregorianYear(struct))) {
                struct.year = struct.year.plus(1);
                dayOfYear = dayOfYear.minus(daysInGregorianYear(struct));
            }

            return ordinalToCalendar(struct.year, dayOfYear);
        }

        /**
         * Returns the ISO week date.
         * @private
         * @function
         * @param {object} struct
         * @return {object}
         */
        function calendarToWeekDate(struct) {
            var weekDay = weekDayNumber(struct),
                year = struct.year,
                month = struct.month,
                nearestThursday,
                val;

            nearestThursday = struct.day.plus(4).minus(weekDay);
            if (struct.month.equals(12) && nearestThursday.gt(31)) {
                val = {
                    year: year.plus(1),
                    week: BigNumber.one(),
                    weekDay: weekDay
                };
            } else {
                if (struct.month.equals(1) && nearestThursday.lt(1)) {
                    year = struct.year.minus(1);
                    month = new BigNumber(12);
                    nearestThursday = nearestThursday.plus(31);
                }

                val = {
                    year: year,
                    week: dayOfGregorianYear({
                        year: year,
                        month: month,
                        day: nearestThursday
                    }).div(7).floor().plus(1),
                    weekDay: weekDay
                };
            }

            return val;
        }

        /**
         * ISO says that the first week of a year is the first week containing
         * a Thursday. Extending that says that the first week of the month is
         * the first week containing a Thursday. ICU agrees.
         * @private
         * @function
         * @param {object} struct
         * @return {BigNumber}
         */
        function calendarToWeekOfMonth(struct) {
            return struct.day.plus(4).minus(weekDayNumber(struct)).plus(6).div(7).floor();
        }

        /**
         * Returns the ISO weekDay number.
         * @private
         * @function
         * @param {object} struct
         * @return {BigNumber}
         */
        function weekDayOfMonth(struct) {
            return struct.day.minus(1).div(7).plus(1).floor();
        }

        /**
         * Returns true if BigNumber is any number except if it is minus zero.
         * @private
         * @function
         * @param {BigNumber} bn
         * @param {string} sign
         * @return {boolean}
         */
        function isNotNegativeZero(bn, sign) {
            return strictEqual(sign, '+') || !bn.isZero() || (bn.isZero() && !strictEqual(sign, '-'));
        }

        /**
         * Covert offset hours and minutes to minutes.
         * @private
         * @function
         * @param {(number|string|BigNumber)} hour
         * @param {(number|string|BigNumber)} minute
         * @return {BigNumber}
         */
        function hourMinuteToMinutes(hour, minute) {
            return new BigNumber(hour).times(60).plus(minute);
        }

        /**
         * Covert the fractional part of hours to a time object.
         * @private
         * @function
         * @param {(number|string)} number
         * @return {object.BigNumber}
         */
        function hourFractionToTime(number) {
            return fractionToTime('0.' + number, 'hour');
        }

        /**
         * Covert the fractional part of minutes to a time object.
         * @private
         * @function
         * @param {(number|string)} number
         * @return {object.BigNumber}
         */
        function minuteFractionToTime(number) {
            return fractionToTime('0.' + number, 'minute');
        }

        /**
         * Covert the fractional part of seconds to a time object.
         * @private
         * @function
         * @param {(number|string)} number
         * @return {object.BigNumber}
         */
        function secondFractionToTime(number) {
            return fractionToTime('0.' + number, 'second');
        }

        /**
         * Changes a '-' or '+' character to a multipler value '-1' or '+1' string.
         * @private
         * @function
         * @param {string} sign
         * @return {string}
         */
        function toSignMultipler(sign) {
            return sign + '1';
        }

        /**
         * Splits the given string into its date and time string components.
         * @private
         * @function
         * @param {string} string
         * @return {object}
         */
        function isoSplitDateTime(string) {
            var dtObject = {
                date: '',
                time: ''
            },
                firstSplit = stringSplit(stringTrim(string), /[T ]/),
                splitLength = firstSplit.length,
                element;

            if (inRange(splitLength, 1, 2)) {
                if (strictEqual(splitLength, 1)) {
                    element = arrayFirst(firstSplit);
                    // we make a best guess
                    if (strictEqual(element.slice(-4), '-') || firstCharIs(element, '+') || firstCharIs(element, '-') || strictEqual(element.length, 2) || gte(countCharacter(element, '-'), 2) || stringContains(element, 'W')) {
                        // only ordinal dates have a "-" at -4
                        // only dates begin with "+" or "-"
                        // dates and times can be only 2 digits but will default to date unless preceeded with " " or "T"
                        // only dates have 2 or more "-"
                        // only dates have a week number "W"
                        dtObject.date = element;
                        dtObject.time = '00';
                    } else if (lastCharIs(element, 'Z') || stringContains(element, ':') || stringContains(element, '.') || stringContains(element, ',') || stringContains(element, '+') || strictEqual(element.slice(-3), '-')) {
                        // only times end with a "Z"
                        // only times contain a ":" or a "." or a ","
                        // only times contain a "+" that is not at the beginning
                        // only times have a "-" at -3
                        dtObject.date = '00';
                        dtObject.time = element;
                    } else {
                        // otherwise we guess it is a date
                        dtObject.date = element;
                        dtObject.time = '00';
                    }
                } else {
                    dtObject.date = arrayFirst(firstSplit) || '00';
                    dtObject.time = arrayLast(firstSplit);
                }
            }

            return dtObject;
        }

        /**
         * Holds the a list of RegExps and functions for testing basic and extended ISO 8601 date patterns.
         * @private
         * @readonly
         * @type {object.array.object}
         * @see {@link http://en.wikipedia.org/wiki/ISO_8601}
         */
        datePatterns = {

            /**
             * The basic date patterns.
             * @private
             * @type {array.object}
             */
            basic: [{
                /**
                 * yy
                 * @private
                 */
                regex: /^(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[1] + '00'),
                        month: BigNumber.one(),
                        day: BigNumber.one()
                    };
                }
            }, {
                /**
                 * yyyy
                 * @private
                 */
                regex: /^(\d{4})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[1]),
                        month: BigNumber.one(),
                        day: BigNumber.one()
                    };
                }
            }, {
                /**
                 * yyyyMMdd
                 * @private
                 */
                regex: /^(\d{4})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[1]),
                        month: new BigNumber(rxResult[2]),
                        day: new BigNumber(rxResult[3])
                    };
                }
            }, {
                /**
                 * yyyyddd
                 * @private
                 */
                regex: /^(\d{4})(\d{3})$/,
                func: function (rxResult) {
                    return ordinalToCalendar(rxResult[1], rxResult[2]);
                }
            }, {
                /**
                 * yyyyWww
                 * @private
                 */
                regex: /^(\d{4})W(\d{2})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(rxResult[1], rxResult[2], 1);
                }
            }, {
                /**
                 * yyyyWwwD
                 * @private
                 */
                regex: /^(\d{4})W(\d{2})([1-7]{1})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(rxResult[1], rxResult[2], rxResult[3]);
                }
            }],

            /**
             * The extended date patterns.
             * @private
             * @type {array.object}
             */
            extended: [{
                // need to add tests for -0
                /**
                 * -+[..y]yyyyy-MM
                 * @private
                 */
                regex: /^([\-+]{1})(\d{5,})-(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[2]).times(toSignMultipler(rxResult[1])),
                        month: new BigNumber(rxResult[3]),
                        day: BigNumber.one()
                    };
                }
            }, {
                /**
                 * yyyy-MM
                 * @private
                 */
                regex: /^(\d{4})-(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[1]),
                        month: new BigNumber(rxResult[2]),
                        day: BigNumber.one()
                    };
                }
            }, {
                /**
                 * yyyy-MM-dd
                 * @private
                 */
                regex: /^(\d{4})-(\d{2})-(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[1]),
                        month: new BigNumber(rxResult[2]),
                        day: new BigNumber(rxResult[3])
                    };
                }
            }, {
                /**
                 * -+[..y]yyyyy-MM-dd
                 * @private
                 */
                regex: /^([\-+]{1})(\d{5,})-(\d{2})-(\d{2})$/,
                func: function (rxResult) {
                    return {
                        year: new BigNumber(rxResult[2]).times(toSignMultipler(rxResult[1])),
                        month: new BigNumber(rxResult[3]),
                        day: new BigNumber(rxResult[4])
                    };
                }
            }, {
                /**
                 * yyyy-DDD
                 * @private
                 */
                regex: /^(\d{4})-(\d{3})$/,
                func: function (rxResult) {
                    return ordinalToCalendar(rxResult[1], rxResult[2]);
                }
            }, {
                /**
                 * yyyy-Www
                 * @private
                 */
                regex: /^(\d{4})-W(\d{2})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(rxResult[1], rxResult[2], 1);
                }
            }, {
                /**
                 * yyyy-Www-D
                 * @private
                 */
                regex: /^(\d{4})-W(\d{2})-([1-7]{1})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(rxResult[1], rxResult[2], rxResult[3]);
                }
            }, {
                /**
                 * -+[..y]yyyy-DDD
                 * @private
                 */
                regex: /^([\-+]{1})(\d{5,})-(\d{3})$/,
                func: function (rxResult) {
                    return ordinalToCalendar(new BigNumber(rxResult[2]).times(toSignMultipler(rxResult[1])), rxResult[3]);
                }
            }, {
                /**
                 * -+[..y]yyyyy-Www
                 * @private
                 */
                regex: /^([\-+]{1})(\d{5,})-W(\d{2})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(new BigNumber(rxResult[2]).times(toSignMultipler(rxResult[1])), rxResult[3], 1);
                }
            }, {
                /**
                 * -+[..y]yyyyy-Www-D
                 * @private
                 */
                regex: /^([\-+]{1})(\d{5,})-W(\d{2})-([1-7]{1})$/,
                func: function (rxResult) {
                    return weekDateToCalendar(new BigNumber(rxResult[2]).times(toSignMultipler(rxResult[1])), rxResult[3], rxResult[4]);
                }
            }]
        };

        /** Make datePatterns readonly */
        deepFreeze(datePatterns);

        /**
         * Holds the a list of RegExps and functions for testing basic and extended ISO 8601 time patterns.
         * @private
         * @readonly
         * @type {object.array.object}
         * @see {@link http://en.wikipedia.org/wiki/ISO_8601}
         */
        timePatterns = {

            /**
             * The basic time patterns.
             * @private
             * @type {array.object}
             */
            basic: [{
                /**
                 * HH
                 * @private
                 */
                regex: /^(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: BigNumber.zero(),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HHMM
                 * @private
                 */
                regex: /^(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HHMMSS
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: new BigNumber(rxResult[3]),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HHZ
                 * @private
                 */
                regex: /^(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: BigNumber.zero(),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HHMMZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HHMMSSZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: new BigNumber(rxResult[3]),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HH-+ZZ
                 * @private
                 */
                regex: /^(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[2],
                        offset = hourMinuteToMinutes(rxResult[3], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: BigNumber.zero(),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HHMM-+ZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HHMMSS-+ZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: new BigNumber(rxResult[3]),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[2],
                        offset = hourMinuteToMinutes(rxResult[3], rxResult[4]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: BigNumber.zero(),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HHMM-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], rxResult[5]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HHMMSS-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], rxResult[6]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: new BigNumber(rxResult[3]),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = hourFractionToTime(rxResult[2]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HHMM.,[..f]f
                 * @private
                 */
                regex: /^(\d{2})(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = minuteFractionToTime(rxResult[3]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HHMMSS.,[..f]f
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = secondFractionToTime(rxResult[4]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.second = new BigNumber(rxResult[3]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = hourFractionToTime(rxResult[2]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HHMM.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = minuteFractionToTime(rxResult[3]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[1]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HHMMSS.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = secondFractionToTime(rxResult[4]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.second = new BigNumber(rxResult[3]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = hourFractionToTime(rxResult[2]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HHMM.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = minuteFractionToTime(rxResult[3]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HHMMSS.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[5],
                        offset = hourMinuteToMinutes(rxResult[6], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = secondFractionToTime(rxResult[4]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.minute = new BigNumber(rxResult[3]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], rxResult[5]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = hourFractionToTime(rxResult[2]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HHMM.,[..f]f-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], rxResult[6]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = minuteFractionToTime(rxResult[3]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HHMMSS.,[..f]f-+ZZZZ
                 * @private
                 */
                regex: /^(\d{2})(\d{2})(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[5],
                        offset = hourMinuteToMinutes(rxResult[6], rxResult[7]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = secondFractionToTime(rxResult[4]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.minute = new BigNumber(rxResult[3]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }],

            /**
             * The extended time patterns.
             * @private
             * @type {array.object}
             */
            extended: [{
                /**
                 * HH
                 * @private
                 */
                regex: /^(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: BigNumber.zero(),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HH:MM
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HH:MM:SS
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: new BigNumber(rxResult[3]),
                        millisecond: BigNumber.zero(),
                        offset: bnGetTimezoneOffset()
                    };
                }
            }, {
                /**
                 * HHZ
                 * @private
                 */
                regex: /^(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: BigNumber.zero(),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HH:MMZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: BigNumber.zero(),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HH:MM:SSZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})Z$/,
                func: function (rxResult) {
                    return {
                        hour: new BigNumber(rxResult[1]),
                        minute: new BigNumber(rxResult[2]),
                        second: new BigNumber(rxResult[3]),
                        millisecond: BigNumber.zero(),
                        offset: BigNumber.zero()
                    };
                }
            }, {
                /**
                 * HH-+ZZ
                 * @private
                 */
                regex: /^(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[2],
                        offset = hourMinuteToMinutes(rxResult[3], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: BigNumber.zero(),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM-+ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS-+ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: new BigNumber(rxResult[3]),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[2],
                        offset = hourMinuteToMinutes(rxResult[3], rxResult[4]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: BigNumber.zero(),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], rxResult[5]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: BigNumber.zero(),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], rxResult[6]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = {
                            hour: new BigNumber(rxResult[1]),
                            minute: new BigNumber(rxResult[2]),
                            second: new BigNumber(rxResult[3]),
                            millisecond: BigNumber.zero(),
                            offset: offset.times(toSignMultipler(sign)).neg()
                        };
                    }

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = hourFractionToTime(rxResult[2]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HH:MM.,[..f]f
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = minuteFractionToTime(rxResult[3]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS.,[..f]f
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})[\.,]{1}(\d{1,})$/,
                func: function (rxResult) {
                    var val = secondFractionToTime(rxResult[4]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.second = new BigNumber(rxResult[3]);
                    val.offset = bnGetTimezoneOffset();

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = hourFractionToTime(rxResult[2]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HH:MM.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = minuteFractionToTime(rxResult[3]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[1]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS.,[..f]fZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})[\.,]{1}(\d{1,})Z$/,
                func: function (rxResult) {
                    var val = secondFractionToTime(rxResult[4]);

                    val.hour = new BigNumber(rxResult[1]);
                    val.minute = new BigNumber(rxResult[2]);
                    val.second = new BigNumber(rxResult[3]);
                    val.offset = BigNumber.zero();

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = hourFractionToTime(rxResult[2]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = minuteFractionToTime(rxResult[3]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS.,[..f]f-+ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[5],
                        offset = hourMinuteToMinutes(rxResult[6], 0),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = secondFractionToTime(rxResult[4]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.second = new BigNumber(rxResult[3]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH.,[..f]f-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[3],
                        offset = hourMinuteToMinutes(rxResult[4], rxResult[5]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = hourFractionToTime(rxResult[2]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM.,[..f]f-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[4],
                        offset = hourMinuteToMinutes(rxResult[5], rxResult[6]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = minuteFractionToTime(rxResult[3]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }, {
                /**
                 * HH:MM:SS.,[..f]f-+ZZ:ZZ
                 * @private
                 */
                regex: /^(\d{2}):(\d{2}):(\d{2})[\.,]{1}(\d{1,})([\-+]{1})(\d{2}):(\d{2})$/,
                func: function (rxResult) {
                    var sign = rxResult[5],
                        offset = hourMinuteToMinutes(rxResult[6], rxResult[7]),
                        val;

                    if (isNotNegativeZero(offset, sign)) {
                        val = secondFractionToTime(rxResult[4]);
                        val.hour = new BigNumber(rxResult[1]);
                        val.minute = new BigNumber(rxResult[2]);
                        val.second = new BigNumber(rxResult[3]);
                        val.offset = offset.times(toSignMultipler(sign)).neg();
                    }

                    return val;
                }
            }]
        };

        /** Make timePatterns readonly */
        deepFreeze(timePatterns);

        /**
         * Takes a give string an parses it as a given ISO timestamp returning the date and time matches as an object.
         * Uses datePatterns and timePatterns for precision matching.
         * @private
         * @function
         * @param {string} isoString
         * @return {object}
         */
        function isoParse(isoString) {
            // Unused variable for JScript NFE bug
            // http://kangax.github.io/nfe
            var dtObject = {
                input: isoString
            },
                nfeSearchPatterns,
                searchString;

            if (isString(isoString) && !isEmptyString(isoString) && !invalidISOCharsRx.test(isoString) && isoHasValidCharacterCounts(isoString)) {
                tempSafariNFE = function nfeSearchPatterns(pattern) {
                    var rxResult = pattern.regex.exec(searchString),
                        val = false,
                        result;

                    if (!isNull(rxResult)) {
                        result = pattern.func(rxResult);
                        if (!isUndefined(result)) {
                            extend(dtObject, result);
                        }

                        val = true;
                    }

                    return val;
                };

                extend(dtObject, isoSplitDateTime(isoString));
                searchString = dtObject.date;
                if (!arraySome(datePatterns.basic, tempSafariNFE)) {
                    if (arraySome(datePatterns.extended, tempSafariNFE)) {
                        searchString = dtObject.time;
                        arraySome(timePatterns.extended, tempSafariNFE);
                    }
                } else {
                    searchString = dtObject.time;
                    arraySome(timePatterns.basic, tempSafariNFE);
                }
            }


            nfeSearchPatterns = null;

            return dtObject;
        }

        /**
         * Converts the given Gregorian structure to an appropriate structure depending on the AstroDate instance settings.
         * @private
         * @function
         * @param {AstroDate} thisAstroDate
         * @param {object} struct
         * @return {object}
         */
        function getCorrectStruct(thisAstroDate, struct) {
            if (thisAstroDate.isTT()) {
                struct = toTT(struct);
            }

            if (thisAstroDate.isUT()) {
                struct = toUT(struct);
            } else if (thisAstroDate.isLocal()) {
                struct = toLocal(struct);
            }

            return struct;
        }

        /**
         * Left pads a number with '0's so that it is of the require length as given by size.
         * @private
         * @function
         * @param {number|string} num
         * @param {number} size
         * @return {string}
         */
        function cldrPadLeadingZero(num, size) {
            var strNum = anyToString(checkObjectCoercible(num)),
                firsrCharacter,
                val;

            if (isDigits(strNum) && new BigNumber(strNum).isFinite()) {
                firsrCharacter = firstChar(strNum);
                val = '';
                if (strictEqual(firsrCharacter, '-')) {
                    strNum = strNum.slice(1);
                    size -= 1;
                    val = firsrCharacter;
                }

                val += padLeadingChar(strNum, '0', size);
            } else {
                val = strNum;
            }

            return val;
        }

        /**
         * Replaces the given token pattern in the given pattern with the supplied string value.
         * @private
         * @function
         * @param {string} pattern
         * @param {string} token
         * @param {string} value
         * @return {string}
         */
        function replaceToken(pattern, token, value) {
            if (!isString(token) || isEmptyString(token)) {
                throw new Error();
            }

            var firstCharacter,
                count,
                copyMatch,
                noWrap;

            if ((/^\{\d\}$/).test(token)) {
                token = escapeRegex(token);
                copyMatch = token;
                noWrap = true;
            } else {
                firstCharacter = firstChar(token);
                if (!(/^\S\{\d+,\d*\}$/).test(token)) {
                    count = token.length;
                    if (!strictEqual(count, countCharacter(token, firstCharacter))) {
                        throw new Error(token);
                    }
                }

                copyMatch = '(?:^|[^' + firstCharacter + '])(' + token + ')(?:[^' + firstCharacter + ']|$)';
            }

            /**
             * Replaces tokens, handles padding choice and wraps replacements (if required) in sinqle quotes so they are ignored in future.
             * @private
             * @function
             * @param {string} $0
             * @param {string} $1
             * @return {string}
             */
            function replacer($0, $1) {
                var val;

                if ($1) {
                    val = cldrPadLeadingZero(value, $1.length);
                } else {
                    val = value;
                }

                if (!strictEqual(noWrap, true)) {
                    val = wrapInChar(val, '\'');
                }

                return $0.replace(new RegExp(token, 'g'), val);
            }

            /**
             * Returns strings of non-tokens untouched or calls the replacer on strings with tokens.
             * @private
             * @function
             * @param {string} $0
             * @param {string} $1
             * @param {string} $2
             * @return {string}
             */
            function tokenReplacer($0, $1, $2) {
                var val;

                if ($0) {
                    if ($1) {
                        val = $1.replace(new RegExp(copyMatch, 'g'), replacer);
                    } else {
                        val = $2;
                    }
                }

                return val;
            }

            return pattern.replace(replaceTokenRX, tokenReplacer);
        }

        /**
         * Remove all non-token from a given pattern and returns a string with any tokens that remain.
         * @private
         * @function
         * @param {string} pattern
         * @return {string}
         */
        function remainingTokens(pattern) {
            function tokenReplacer($0, $1, $2) {
                var val;

                if ($0 && $1 && !$2) {
                    val = $1;
                } else {
                    val = '';
                }

                return val;
            }

            return pattern.replace(replaceTokenRX, tokenReplacer).replace(unmatchedTokenRx, '');
        }

        /**
         * Returns true if there are any remaining tokens in the given pattern.
         * @private
         * @function
         * @param {string} pattern
         * @return {boolean}
         */
        function hasRemainingTokens(pattern) {
            return !isEmptyString(remainingTokens(pattern));
        }

        /**
         * Remove all signle quote characters from a given dtring.
         * @private
         * @function
         * @param {string} string
         * @return {string}
         */
        function stripSingleQuotes(string) {
            return replaceAll(string, '\'', '');
        }

        /**
         * Replace all occurences of '-' with '_'.
         * @private
         * @function
         * @param {string} string
         * @return {string}
         */
        function minusToUnderscore(string) {
            return replaceAll(string, '-', '_');
        }

        /*
        calendarTypes = {
            julian: {
                abbreviated: 'OS',
                wide: 'Julian',
                narrow: 'O'
            },
            gregorian: {
                abbreviated: 'NS',
                wide: 'Gregorian',
                narrow: 'N'
            }
        };

        deepFreeze(calendarTypes);
        */

        /**
         * Split a string at '_'s.
         * @private
         * @function
         * @param {string} string
         * @return {array.<string>}
         */
        function splitUnderscore(string) {
            return string.split('_');
        }

        /**
         * Canonalizes a locale string.
         * @private
         * @function
         * @param {string} locale
         * @return {string}
         */
        function canonicalizeLocale(locale) {
            var val = [],
                firstSplit,
                firstSplitLength,
                element,
                elementLength,
                script,
                region;

            if (isString(locale) && (/^([a-z]{2,3}|[a-z]{2,3}[\-_][a-z]{2}|[a-z]{2,3}[\-_][a-z]{4}|[a-z]{2,3}[\-_][a-z]{4}[\-_][a-z]{2})$/i).test(locale)) {
                firstSplit = splitUnderscore(minusToUnderscore(locale));
                firstSplitLength = firstSplit.length;
                val.push(firstSplit[0].toLowerCase());
                if (!strictEqual(firstSplitLength, 1)) {
                    element = firstSplit[1];
                    if (strictEqual(firstSplitLength, 2)) {
                        elementLength = element.length;
                        if (strictEqual(elementLength, 2)) {
                            region = element.toUpperCase();
                        } else {
                            script = element.charAt(0).toUpperCase() + element.slice(1).toLowerCase();
                        }
                    } else {
                        script = element.charAt(0).toUpperCase() + element.slice(1).toLowerCase();
                        region = firstSplit[2].toUpperCase();
                    }
                }

                if (!isUndefined(script) && !strictEqual(script, 'Zzzz')) {
                    val.push(script);
                }

                if (!isUndefined(region) && !strictEqual(region, 'ZZ')) {
                    val.push(region);
                }
            }

            return val.join('_');
        }

        /**
         * Perform a locale lookup from the CLDR likeySubtags given a full or patial locale string.
         * @private
         * @function
         * @param {string} locale
         * @return {string}
         */
        function lookupLocale(locale) {
            var canonicalizedLocale = canonicalizeLocale(locale),
                likelySubtags,
                lookup,
                firstSplit,
                lang,
                script,
                region,
                length,
                element,
                elementLength;

            if (!isEmptyString(canonicalizedLocale)) {
                likelySubtags = supplemental.likelySubtags;
                lookup = likelySubtags[canonicalizedLocale];
                if (isUndefined(lookup)) {
                    firstSplit = splitUnderscore(canonicalizedLocale);
                    length = firstSplit.length;
                    lang = arrayFirst(firstSplit);
                    if (strictEqual(length, 3)) {
                        region = arrayLast(firstSplit);
                        script = firstSplit[1];
                    } else if (strictEqual(length, 2)) {
                        element = arrayLast(firstSplit);
                        elementLength = element.length;
                        if (strictEqual(elementLength, 2)) {
                            region = element;
                        } else {
                            script = element;
                        }
                    }

                    if (isUndefined(lookup) && !isUndefined(region)) {
                        lookup = likelySubtags[[lang, region].join('_')];
                    }

                    if (isUndefined(lookup) && !isUndefined(script)) {
                        lookup = likelySubtags[[lang, script].join('_')];
                    }

                    if (isUndefined(lookup)) {
                        if (!isUndefined(languages[canonicalizedLocale])) {
                            lookup = canonicalizedLocale;
                        }
                    }

                    if (isUndefined(lookup)) {
                        lookup = likelySubtags[lang];
                    }

                    if (isUndefined(lookup) && !isUndefined(script)) {
                        lookup = likelySubtags[['und', script].join('_')];
                    }
                }
            }

            if (isUndefined(lookup)) {
                lookup = '';
            }

            return lookup;
        }

        /**
         * Finds a loaded language from the given locale string.
         * @private
         * @function
         * @param {string} locale
         * @return {string}
         */
        function languageLoaded(locale) {
            var loaded,
                lang,
                firstSplit;

            if (!isEmptyString(locale)) {
                lang = minusToUnderscore(locale);
                if (!isUndefined(languages[lang])) {
                    loaded = lang;
                } else {
                    firstSplit = splitUnderscore(lookupLocale(locale));
                    lang = [arrayFirst(firstSplit), arrayLast(firstSplit)].join('_');
                    if (!isUndefined(languages[lang])) {
                        loaded = lang;
                    } else {
                        lang = arrayFirst(firstSplit);
                        if (!isUndefined(languages[lang])) {
                            loaded = lang;
                        }
                    }
                }
            } else {
                loaded = '';
            }

            return loaded;
        }

        /**
         * Gets the region part of a locale string.
         * @private
         * @function
         * @param {string} locale
         * @return {string}
         */
        function getRegion(locale) {
            return arrayLast(splitUnderscore(locale));
        }

        /**
         * Takes a date pattern of tokens and replaces those tokens with the appropriate CLDR translations.
         * @private
         * @see {@link http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table}
         * @function
         * @param {object} struct
         * @param {string} pattern
         * @param {boolean} julian
         * @param {string} lang
         * @param {string} locale
         * @return {string}
         */
        // struct should not be UTC but UT
        function formatDate(struct, pattern, julian, lang, locale) {
            var gregorian = languages[lang].dates.calendars.gregorian,
                dateFormats = gregorian.dateFormats,
                eras = gregorian.eras,
                standAlone = arrayLast(nameTypes),
                months = gregorian.months,
                monthsFormat = months.format,
                monthsStandAlone = months[standAlone],
                days = gregorian.days,
                daysFormat = days.format,
                daysStandAlone = days[standAlone],
                shortStr = arrayLast(formatTypes),
                weekDate = calendarToWeekDate(struct), // should use alternative CLDR
                dayKey = cldrDayKey(struct),
                eraNum,
                eraNumStr,
                year,
                yearSign,
                month,
                dayOfYear,
                dayStr,
                week,
                dayOfWeekLocaleNumber,
                mjd;

            if (arrayContains(formatTypes, pattern)) {
                /*
                switch (pattern) {
                case 'long':
                    calendarPattern = '\'(\'CCCC\')\'';
                    break;
                case 'medium':
                    calendarPattern = '\'(\'C\')\'';
                    break;
                case 'short':
                    calendarPattern = '\'(\'CCCCCC\')\'';
                    break;
                default:
                    calendarPattern = '\'(\'CCCC\')\'';
                }
                */

                pattern = dateFormats[pattern];

            }

            /*
            if (julian) {
                calendarType = 'julian';
            } else {
                calendarType = 'gregorian';
            }
            */

            /*
            pattern = replaceToken(pattern, 'CCCCC', calendarTypes[calendarType].narrow);
            pattern = replaceToken(pattern, 'CCCC', calendarTypes[calendarType].wide);
            pattern = replaceToken(pattern, 'C{1,3}', calendarTypes[calendarType].abbreviated);
            */

            if (struct.year.lt(1)) {
                eraNum = 0;
            } else {
                eraNum = 1;
            }

            eraNumStr = eraNum.toString();
            pattern = replaceToken(pattern, 'GGGGG', eras.eraNarrow[eraNumStr]);
            pattern = replaceToken(pattern, 'GGGG', eras.eraNames[eraNumStr]);
            pattern = replaceToken(pattern, 'G{1,3}', eras.eraAbbr[eraNumStr]);

            year = struct.year.plus(eraNum - 1);
            if (year.lt(0)) {
                yearSign = '-';
            } else {
                yearSign = '';
            }

            pattern = replaceToken(pattern, 'y{3,}', year);
            pattern = replaceToken(pattern, 'yy', yearSign + year.toString().slice(-2));
            pattern = replaceToken(pattern, 'y', year);
            pattern = replaceToken(pattern, 'U{1,}', year);

            pattern = replaceToken(pattern, 'u{1,}', struct.year);

            pattern = replaceToken(pattern, 'Y{1,}', weekDate.year);
            week = weekDate.week.toString();
            pattern = replaceToken(pattern, 'w{1,2}', week);
            pattern = replaceToken(pattern, 'W', calendarToWeekOfMonth(struct));

            /*
            pattern = replaceToken(pattern, 'Q{1,2}', value);
            pattern = replaceToken(pattern, 'QQQ', value);
            pattern = replaceToken(pattern, 'QQQQ', value);
            pattern = replaceToken(pattern, 'q{1,2}', value);
            pattern = replaceToken(pattern, 'qqq', value);
            pattern = replaceToken(pattern, 'qqqq', value);
            */

            month = struct.month.toString();
            pattern = replaceToken(pattern, 'MMMMM', monthsFormat.narrow[month]);
            pattern = replaceToken(pattern, 'MMMM', monthsFormat.wide[month]);
            pattern = replaceToken(pattern, 'MMM', monthsFormat.abbreviated[month]);
            pattern = replaceToken(pattern, 'M{1,2}', month);
            pattern = replaceToken(pattern, 'LLLLL', monthsStandAlone.narrow[month]);
            pattern = replaceToken(pattern, 'LLLL', monthsStandAlone.wide[month]);
            pattern = replaceToken(pattern, 'LLL', monthsStandAlone.abbreviated[month]);
            pattern = replaceToken(pattern, 'L{1,2}', month);

            pattern = replaceToken(pattern, 'd{1,2}', struct.day);
            if (julian) {
                dayOfYear = dayOfJulianYear(gregorianToJulian(struct));
            } else {
                dayOfYear = dayOfGregorianYear(struct);
            }

            pattern = replaceToken(pattern, 'D{1,3}', dayOfYear);

            pattern = replaceToken(pattern, 'F', weekDayOfMonth(struct));
            if (julian) {
                mjd = julianToMJD(toUT(struct));
            } else {
                mjd = gregorianToMJD(toUT(struct));
            }

            pattern = replaceToken(pattern, 'g{1,}', mjd);

            dayStr = daysFormat[shortStr][dayKey];
            pattern = replaceToken(pattern, 'EEEEEE', dayStr);
            pattern = replaceToken(pattern, 'eeeeee', dayStr);
            dayStr = daysFormat.narrow[dayKey];
            pattern = replaceToken(pattern, 'EEEEE', dayStr);
            pattern = replaceToken(pattern, 'eeeee', dayStr);
            dayStr = daysFormat.wide[dayKey];
            pattern = replaceToken(pattern, 'EEEE', dayStr);
            pattern = replaceToken(pattern, 'eeee', dayStr);
            dayStr = daysFormat.abbreviated[dayKey];
            pattern = replaceToken(pattern, 'EEE', dayStr);
            pattern = replaceToken(pattern, 'eee', dayStr);

            pattern = replaceToken(pattern, 'E{1,2}', weekDate.weekDay);

            dayOfWeekLocaleNumber = mod(1 + (7 - arrayIndexOf(dayKeys, supplemental.weekData.firstDay[getRegion(locale)]) + arrayIndexOf(dayKeys, dayKey)), 7);
            pattern = replaceToken(pattern, 'e{1,2}', dayOfWeekLocaleNumber);

            pattern = replaceToken(pattern, 'cccccc', daysStandAlone[shortStr][dayKey]);
            pattern = replaceToken(pattern, 'ccccc', daysStandAlone.narrow[dayKey]);
            pattern = replaceToken(pattern, 'cccc', daysStandAlone.wide[dayKey]);
            pattern = replaceToken(pattern, 'ccc', daysStandAlone.abbreviated[dayKey]);
            pattern = replaceToken(pattern, 'c{1,2}', dayOfWeekLocaleNumber);

            return pattern;
        }

        /**
         * Formats ISO timezone tokens with the appropriate CLDR translations.
         * @private
         * @see {@link http://www.unicode.org/reports/tr35/tr35-dates.html#Using_Time_Zone_Names}
         * @function
         * @param {object} struct
         * @param {string} lang
         * @param {boolean} withZ
         * @param {string} format
         * @param {string} width
         * @return {string}
         */
        // ISO 8601 time zone formats.
        function formatIsoTimeZone(struct, lang, withZ, format, width) {
            var timeZoneNames = languages[lang].dates.timeZoneNames,
                offsetFormats = timeZoneNames.hourFormat.split(';'),
                offsetFormat,
                offset,
                pattern;

            if (withZ && struct.offset.isZero()) {
                pattern = 'Z';
            } else {
                if (struct.offset.lte(0)) {
                    offsetFormat = arrayFirst(offsetFormats);
                } else {
                    offsetFormat = arrayLast(offsetFormats);
                }

                offsetFormat = offsetFormat.replace(/([\-+])H:/, '$1HH:');
                offset = fractionToTime(struct.offset.abs(), 'minute');
                offsetFormat = replaceToken(offsetFormat, 'H{1,2}', offset.hour);


                if (strictEqual(format, 'basic')) {
                    if (strictEqual(width, arrayLast(formatTypes)) && offset.minute.isZero()) {
                        pattern = arrayFirst(offsetFormat.split(':'));
                    } else {
                        offsetFormat = offsetFormat.replace(':', '');
                        pattern = replaceToken(offsetFormat, 'm{1,2}', offset.minute);
                    }
                } else {
                    pattern = replaceToken(offsetFormat, 'm{1,2}', offset.minute);
                }

                if (hasRemainingTokens(pattern)) {
                    throw new Error('formatIsoTimeZone has remaining tokens! ' + remainingTokens(pattern));
                }
            }

            return stripSingleQuotes(pattern);
        }

        /**
         * Formats localized GMT timezone tokens with the appropriate CLDR translations.
         * @private
         * @see {@link http://www.unicode.org/reports/tr35/tr35-dates.html#Using_Time_Zone_Names}
         * @function
         * @param {object} struct
         * @param {string} lang
         * @param {string} width
         * @return {string}
         */
        // The localized GMT format.
        function formatLocalisedGMT(struct, lang, width) {
            var timeZoneNames = languages[lang].dates.timeZoneNames,
                offsetFormats = timeZoneNames.hourFormat.split(';'),
                offsetFormat,
                offset,
                requestedShort,
                pattern;

            if (struct.offset.isZero()) {
                pattern = timeZoneNames.gmtZeroFormat;
            } else {
                if (struct.offset.lte(0)) {
                    offsetFormat = arrayFirst(offsetFormats);
                } else {
                    offsetFormat = arrayLast(offsetFormats);
                }

                requestedShort = strictEqual(width, arrayLast(formatTypes));
                if (requestedShort) {
                    offsetFormat = offsetFormat.replace('HH', 'H');
                } else {
                    offsetFormat = offsetFormat.replace(/([\-+])H:/, '$1HH:');
                }

                offset = fractionToTime(struct.offset.abs(), 'minute');
                offsetFormat = replaceToken(offsetFormat, 'H{1,2}', offset.hour);
                if (requestedShort && offset.minute.isZero()) {
                    pattern = arrayFirst(offsetFormat.split(':'));
                } else {
                    pattern = replaceToken(offsetFormat, 'm{1,2}', offset.minute);
                }

                if (hasRemainingTokens(pattern)) {
                    throw new Error('formatLocalisedGMT has remaining tokens! ' + remainingTokens(pattern));
                }

                pattern = replaceToken(timeZoneNames.gmtFormat, '{0}', pattern);
            }

            return stripSingleQuotes(pattern);
        }

        /**
         * Takes a time pattern of tokens and replaces those tokens with the appropriate CLDR translations.
         * @private
         * @see {@link http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table}
         * @function
         * @param {object} struct
         * @param {string} pattern
         * @param {string} lang
         * @return {string}
         */
        // struct should not be UTC but UT
        function formatTime(struct, pattern, lang) {
            var language = languages[lang],
                gregorian = language.dates.calendars.gregorian,
                shortLocalisedGMT,
                longLocalisedGMT,
                isoBasicShort,
                isoBasicShortNoZ,
                isoBasic,
                isoBasicNoZ,
                isoExtended,
                isoExtendedNoZ,
                dayPeriod,
                hour;

            if (arrayContains(formatTypes, pattern)) {
                pattern = gregorian.timeFormats[pattern];
            }

            if (struct.hour.inRange(12, 23)) {
                dayPeriod = 'pm';
            } else {
                dayPeriod = 'am';
            }

            pattern = replaceToken(pattern, 'a', gregorian.dayPeriods.format.abbreviated[dayPeriod]);
            hour = struct.hour.plus(11).mod(12).plus(1);
            pattern = replaceToken(pattern, 'h{1,2}', hour);
            pattern = replaceToken(pattern, 'H{1,2}', struct.hour);
            pattern = replaceToken(pattern, 'K{1,2}', hour.minus(1));

            // if hour is 24, needs to be handled in date too
            //temp = new AstroDate().jd(new AstroDate().jd());
            //pattern = replaceToken(pattern, 'k{1,2}', struct.hour.plus(1));

            //pattern = replaceToken(pattern, 'j{1,2}', struct.hour);

            pattern = replaceToken(pattern, 'm{1,2}', struct.minute);
            pattern = replaceToken(pattern, 's{1,2}', struct.second);
            pattern = replaceToken(pattern, 'S{1,}', struct.millisecond);

            //pattern = replaceToken(pattern, 'A{1,}', value);

            // The short localized GMT format.
            shortLocalisedGMT = formatLocalisedGMT(struct, lang, arrayLast(formatTypes));
            pattern = replaceToken(pattern, 'O', shortLocalisedGMT);
            pattern = replaceToken(pattern, 'z{1,3}', shortLocalisedGMT);
            // The long localized GMT format.
            longLocalisedGMT = formatLocalisedGMT(struct, lang);
            pattern = replaceToken(pattern, 'OOOO', longLocalisedGMT);
            pattern = replaceToken(pattern, 'zzzz', longLocalisedGMT);
            pattern = replaceToken(pattern, 'ZZZZ', longLocalisedGMT);
            pattern = replaceToken(pattern, 'vvvv', longLocalisedGMT);
            pattern = replaceToken(pattern, 'v', longLocalisedGMT);
            pattern = replaceToken(pattern, 'VVVV', longLocalisedGMT);
            // The ISO8601 basic format short
            isoBasicShort = formatIsoTimeZone(struct, lang, true, 'basic', arrayLast(formatTypes));
            pattern = replaceToken(pattern, 'X', isoBasicShort);
            // The ISO8601 basic format short no Z
            isoBasicShortNoZ = formatIsoTimeZone(struct, lang, false, 'basic', arrayLast(formatTypes));
            pattern = replaceToken(pattern, 'x', isoBasicShortNoZ);
            // The ISO8601 basic format
            isoBasic = formatIsoTimeZone(struct, lang, true, 'basic');
            pattern = replaceToken(pattern, 'Z{1,3}', isoBasic);
            pattern = replaceToken(pattern, 'XXXX', isoBasic);
            pattern = replaceToken(pattern, 'XX', isoBasic);
            // The ISO8601 basic format no Z
            isoBasicNoZ = formatIsoTimeZone(struct, lang, false, 'basic');
            pattern = replaceToken(pattern, 'xxxx', isoBasicNoZ);
            pattern = replaceToken(pattern, 'xx', isoBasicNoZ);
            //The ISO8601 extended format
            isoExtended = formatIsoTimeZone(struct, lang, true);
            pattern = replaceToken(pattern, 'XXXXX', isoExtended);
            pattern = replaceToken(pattern, 'XXX', isoExtended);
            pattern = replaceToken(pattern, 'ZZZZZ', isoExtended);
            //The ISO8601 extended format no Z
            isoExtendedNoZ = formatIsoTimeZone(struct, lang, false);
            pattern = replaceToken(pattern, 'xxxxx', isoExtendedNoZ);
            pattern = replaceToken(pattern, 'xxx', isoExtendedNoZ);

            return pattern;
        }

        /**
         * Used to create a new instance of a date.
         * @constructor AstroDate
         * @classdesc This is what becomes exported or made global.
         * @this AstroDate
         */
        function AstroDate() {
            var args = arguments,
                input = arguments,
                argsLength = args.length,
                isJulian = false,
                isUT = false,
                isTT = false,
                isLocal = false,
                error = null,
                /**
                 * The current language of the AstroDate instance.
                 * @private
                 * @type {string}
                 */
                currentLanguage = defaultLanguage,
                /**
                 * The current locale of the AstroDate instance.
                 * @private
                 * @type {string}
                 */
                currentLocale = defaultLocale,
                struct,
                arg;

            objectDefineProperties(this, {
                /**
                 * Gets the value of a specific internal property.
                 * @readonly
                 * @protected
                 * @memberOf AstroDate
                 * @instance
                 * @function
                 * @param {*} key
                 * @return {*}
                 */
                getter: {
                    value: function (key) {
                        var got;

                        if (isUndefined(key)) {
                            got = extend({}, struct);
                        } else if (isString(key)) {
                            switch (key) {
                            case 'struct':
                                got = extend({}, struct);
                                break;
                            case 'isJulian':
                                got = isJulian;
                                break;
                            case 'isUT':
                                got = isUT;
                                break;
                            case 'isTT':
                                got = isTT;
                                break;
                            case 'isLocal':
                                got = isLocal;
                                break;
                            case 'args':
                                got = args;
                                break;
                            case 'input':
                                got = input;
                                break;
                            case 'error':
                                got = error;
                                break;
                            case 'lang':
                                got = currentLanguage;
                                break;
                            case 'locale':
                                got = currentLocale;
                                break;
                            default:
                                throw new SyntaxError(key);
                            }
                        } else {
                            throw new TypeError(key);
                        }

                        return got;
                    }
                },

                /**
                 * Sets the value of a specific internal property.
                 * @protected
                 * @instance
                 * @memberOf AstroDate
                 * @function
                 * @param {*} key
                 * @param {*} value
                 * @return {AstroDate}
                 * @this AstroDate
                 */
                setter: {
                    value: function (key, value) {
                        var unit = normaliseUnits(key),
                            valid = false,
                            bn,
                            dim;

                        if (unit) {
                            bn = new BigNumber(value);
                            switch (unit) {
                            case 'year':
                                valid = inYearRange(bn);
                                break;
                            case 'month':
                                valid = inMonthRange(bn);
                                break;
                            case 'day':
                                if (strictEqual(isJulian, true)) {
                                    dim = daysInJulianMonth(struct);
                                } else {
                                    dim = daysInGregorianMonth(struct);
                                }

                                valid = inDayRange(bn, dim);
                                break;
                            case 'hour':
                                valid = inHourRange(bn);
                                break;
                            case 'minute':
                                valid = inMinuteRange(bn, struct.hour);
                                break;
                            case 'second':
                                valid = inSecondRange(bn, struct);
                                break;
                            case 'millisecond':
                                valid = inMillisecondRange(bn, struct.hour);
                                break;
                            case 'offset':
                                valid = inOffsetRange(bn);
                                break;
                            default:
                                throw new Error(unit);
                            }

                            if (valid) {
                                struct[unit] = bn;
                            } else {
                                struct = {};
                            }
                        } else if (arrayIsArray(key)) {
                            struct = arrayToStruct(key, false);
                        } else if (AstroDate.isAstroDate(key)) {
                            struct = key.getter();
                            isJulian = key.isJulian();
                        } else if (isDate(key)) {
                            struct = dateToStruct(key);
                        } else if (isString(key)) {
                            switch (key) {
                            case 'input':
                                input = value;
                                break;
                            case 'error':
                                error = value;
                                break;
                            case 'struct':
                                if (isValid(value)) {
                                    struct = extend({}, value);
                                } else {
                                    struct = {};
                                }

                                break;
                            case 'isJulian':
                                isJulian = Boolean(value);
                                break;
                            case 'isUT':
                                isUT = Boolean(value);
                                break;
                            case 'isTT':
                                isTT = Boolean(value);
                                break;
                            case 'isLocal':
                                isLocal = Boolean(value);
                                break;
                            case 'lang':
                                if (isString(value) && !isEmptyString(value)) {
                                    currentLanguage = value;
                                } else {
                                    currentLanguage = defaultLanguage;
                                    currentLocale = defaultLocale;
                                }

                                break;
                            case 'locale':
                                if (isString(value) && !isEmptyString(value)) {
                                    currentLocale = lookupLocale(value);
                                } else {
                                    currentLanguage = defaultLanguage;
                                    currentLocale = defaultLocale;
                                }

                                break;
                            default:
                                struct = isoParse(key);
                            }
                        } else {
                            throw new SyntaxError(key);
                        }

                        return this;
                    }
                }
            });

            switch (argsLength.toString()) {
            case '0':
                struct = dateToStruct(new Date());
                break;
            case '1':
                arg = arrayFirst(args);
                if (AstroDate.isAstroDate(arg)) {
                    isJulian = arg.getter('isJulian');
                    struct = extend({}, arg.getter());
                } else if (arrayIsArray(arg)) {
                    struct = arrayToStruct(arg, false);
                } else if (isDate(arg)) {
                    struct = dateToStruct(arg);
                } else if (isNumber(arg)) {
                    struct = dateToStruct(new Date(arg));
                } else if (isString(arg)) {
                    struct = isoParse(arg);
                } else if (isPlainObject(arg)) {
                    struct = objectToStruct(arg);
                    if (!isValid(struct)) {
                        struct = {};
                    }
                } else {
                    throw new TypeError(arg);
                }

                break;
            case '2':
                arg = arrayFirst(args);
                if (isString(arg)) {
                    arg = stringTrim(arg).toLowerCase();
                    switch (arg) {
                    case 'j':
                        arg = args[1];
                        if (arrayIsArray(arg)) {
                            struct = julianToGregorian(arrayToStruct(arg, true));
                        } else if (isPlainObject(arg)) {
                            struct = objectToStruct(arg, true);
                            if (isValid(struct, true)) {
                                struct = julianToGregorian(struct);
                            } else {
                                struct = {};
                            }
                        } else {
                            throw new TypeError(arg);
                        }

                        break;
                    case 'g':
                        arg = args[1];
                        if (arrayIsArray(arg)) {
                            struct = arrayToStruct(arg, false);
                        } else if (isPlainObject(arg)) {
                            struct = objectToStruct(arg);
                            if (!isValid(struct)) {
                                struct = {};
                            }
                        } else {
                            throw new TypeError(arg);
                        }

                        break;
                    case 'jd':
                        arg = args[1];
                        this.jd(arg);
                        break;
                    default:
                        throw new SyntaxError(arg);
                    }
                } else {
                    throw new TypeError(arg);
                }

                break;
            default:
                throw new SyntaxError(argsLength);
            }

            if (!isValid(struct)) {
                struct = {};
            }
        }

        objectDefineProperties(AstroDate.prototype, {
            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            julian: {
                value: function () {
                    return this.setter('isJulian', true);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            gregorian: {
                value: function () {
                    return this.setter('isJulian', false);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {AstroDate}
             * @this AstroDate
             */
            local: {
                value: function () {
                    this.setter('isLocal', true);
                    this.setter('isUT', false);

                    return this;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {AstroDate}
             * @this AstroDate
             */
            UT: {
                value: function () {
                    this.setter('isLocal', false);
                    this.setter('isUT', true);

                    return this;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            TT: {
                value: function () {
                    return this.setter('isTT', true);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            civil: {
                value: function () {
                    return this.setter('isTT', false);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {AstroDate}
             * @this AstroDate
             */
            raw: {
                value: function () {
                    this.setter('isLocal', false);
                    this.setter('isUT', false);
                    this.setter('isTT', false);

                    return this;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isJulian: {
                value: function () {
                    return this.getter('isJulian');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isGregorian: {
                value: function () {
                    return !this.getter('isJulian');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isUT: {
                value: function () {
                    return this.getter('isUT');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isTT: {
                value: function () {
                    return this.getter('isTT');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isCivil: {
                value: function () {
                    return !this.getter('isTT');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isLocal: {
                value: function () {
                    return this.getter('isLocal');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isRaw: {
                value: function () {
                    return !this.getter('isUT') && !this.getter('isTT') && this.getter('isLocal');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {string}
             * @this AstroDate
             */
            currentLang: {
                value: function () {
                    return this.getter('lang');
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            isWeekDay: {
                value: function () {
                    var val;

                    if (this.isValid()) {
                        val = weekDayNumber(getCorrectStruct(this, this.getter())).inRange(1, 5);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            isWeekend: {
                value: function () {
                    var val;

                    if (this.isValid()) {
                        val = weekDayNumber(getCorrectStruct(this, this.getter())).inRange(6, 7);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            zone: {
                value: function () {
                    var val;

                    if (this.isValid()) {
                        val = getCorrectStruct(this, this.getter()).offset.toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {boolean}
             * @this AstroDate
             */
            isValid: {
                value: function () {
                    return isValid(this.getter());
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} isoString
             * @this AstroDate
             */
            parse: {
                value: function (isoString) {
                    var val;

                    if (isString(isoString)) {
                        val = this.setter('struct', isoParse(isoString));
                    } else {
                        throw new TypeError(isoString);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} pattern
             * @this AstroDate
             */
            format: {
                value: function (pattern) {
                    var struct,
                        string,
                        isJulian,
                        lang,
                        dateTimeFormats,
                        dateTimeFormat;

                    if (this.isValid()) {
                        lang = this.currentLang();
                        if (!isString(lang) || isEmptyString(lang) || !isPlainObject(languages[lang])) {
                            if (!isString(defaultLanguage) || isEmptyString(defaultLanguage) || !isPlainObject(languages[defaultLanguage])) {
                                throw new Error('Language not loaded!');
                            }

                            lang = defaultLanguage;
                        }

                        isJulian = this.isJulian();
                        if (isJulian) {
                            struct = jdToJulian(this.jd());
                        } else {
                            struct = this.getter();
                        }

                        struct = getCorrectStruct(this, struct);
                        dateTimeFormats = languages[lang].dates.calendars.gregorian.dateTimeFormats;
                        if (!isString(pattern) || isEmptyString(pattern)) {
                            pattern = arrayFirst(formatTypes);
                        }

                        if (arrayContains(objectKeys(dateTimeFormats), pattern)) {
                            dateTimeFormat = dateTimeFormats[pattern];
                            dateTimeFormat = replaceToken(dateTimeFormat, '{1}', formatDate(struct, pattern, isJulian, lang, this.locale()));
                            dateTimeFormat = replaceToken(dateTimeFormat, '{0}', formatTime(struct, pattern, lang));
                        } else {
                            dateTimeFormat = formatDate(struct, pattern, isJulian, lang, this.locale());
                            dateTimeFormat = formatTime(struct, dateTimeFormat, lang);
                        }

                        if (hasRemainingTokens(dateTimeFormat)) {
                            throw new Error('Pattern has remaining tokens!: ' + remainingTokens(dateTimeFormat));
                        }

                        string = stripSingleQuotes(dateTimeFormat);
                    } else {
                        string = 'Invalid Date';
                    }

                    return string;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [pattern]
             * @return {string}
             * @this AstroDate
             */
            toString: {
                value: function (pattern) {
                    if (!isString(pattern) || isEmptyString(pattern) || !arrayContains(formatTypes, pattern)) {
                        pattern = arrayFirst(formatTypes);
                    }

                    return this.format(pattern);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [pattern]
             * @return {string}
             * @this AstroDate
             */
            toDateString: {
                value: function (pattern) {
                    var struct,
                        string,
                        isJulian,
                        lang;

                    if (this.isValid()) {
                        lang = this.currentLang();
                        if (!isString(lang) || isEmptyString(lang) || !isPlainObject(languages[lang])) {
                            if (!isString(defaultLanguage) || isEmptyString(defaultLanguage) || !isPlainObject(languages[defaultLanguage])) {
                                throw new Error('Language not loaded!');
                            }

                            lang = defaultLanguage;
                        }

                        isJulian = this.isJulian();
                        if (isJulian) {
                            struct = jdToJulian(this.jd());
                        } else {
                            struct = this.getter();
                        }

                        if (!isString(pattern) || isEmptyString(pattern) || !arrayContains(formatTypes, pattern)) {
                            pattern = arrayFirst(formatTypes);
                        }

                        pattern = formatDate(getCorrectStruct(this, struct), pattern, isJulian, lang, this.locale());
                        if (hasRemainingTokens(pattern)) {
                            throw new Error('Pattern has remaining tokens!: ' + remainingTokens(pattern));
                        }

                        string = stripSingleQuotes(pattern);
                    } else {
                        string = 'Invalid Date';
                    }

                    return string;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [pattern]
             * @return {string}
             * @this AstroDate
             */
            toTimeString: {
                value: function (pattern) {
                    var struct,
                        string,
                        isJulian,
                        lang;

                    if (this.isValid()) {
                        lang = this.currentLang();
                        if (!isString(lang) || isEmptyString(lang) || !isPlainObject(languages[lang])) {
                            if (!isString(defaultLanguage) || isEmptyString(defaultLanguage) || !isPlainObject(languages[defaultLanguage])) {
                                throw new Error('Language not loaded!');
                            }

                            lang = defaultLanguage;
                        }

                        isJulian = this.isJulian();
                        if (isJulian) {
                            struct = jdToJulian(this.jd());
                        } else {
                            struct = this.getter();
                        }

                        if (!isString(pattern) || isEmptyString(pattern) || !arrayContains(formatTypes, pattern)) {
                            pattern = arrayFirst(formatTypes);
                        }

                        pattern = formatTime(getCorrectStruct(this, struct), pattern, lang);
                        if (hasRemainingTokens(pattern)) {
                            throw new Error('Pattern has remaining tokens!: ' + remainingTokens(pattern));
                        }

                        string = stripSingleQuotes(pattern);
                    } else {
                        string = 'Invalid Date';
                    }

                    return string;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {string}
             * @this AstroDate
             */
            toISOString: {
                value: function (padding) {
                    var val;

                    if (this.isValid()) {
                        // should be gregorian?!
                        // add weekDate = calendarToWeekDate(struct)
                        val = toISOString(getCorrectStruct(this, this.getter()), padding);
                    } else {
                        val = 'Invalid Date';
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {string}
             * @this AstroDate
             */
            valueOf: {
                value: function () {
                    var val;

                    if (this.isJulian()) {
                        val = this.jd();
                    } else {
                        val = this.getTime();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            unix: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        if (this.isTT()) {
                            struct = toTT(this.getter());
                        } else {
                            struct = this.getter();
                        }

                        val = getTime(toUT(struct)).div(1000).trunc().toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {object} [dateObject]
             * @this AstroDate
             */
            object: {
                value: function (dateObject) {
                    var struct,
                        val;

                    if (isUndefined(dateObject)) {
                        if (this.isValid()) {
                            struct = getCorrectStruct(this, this.getter());
                            if (this.isJulian()) {
                                val = structToObject(gregorianToJulian(struct));
                            } else {
                                val = structToObject(struct);
                            }
                        }
                    } else if (isPlainObject(dateObject)) {
                        val = this.setter('struct', objectToStruct(dateObject, this.isJulian()));
                    } else {
                        throw new TypeError(dateObject);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {AstroDate}
             * @this AstroDate
             */
            clone: {
                value: function () {
                    return new AstroDate(this);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {array} [dateArray]
             * @this AstroDate
             */
            array: {
                value: function (dateArray) {
                    var struct,
                        val;

                    if (isUndefined(dateArray)) {
                        if (this.isValid()) {
                            struct = getCorrectStruct(this, this.getter());
                            if (this.isJulian()) {
                                val = structToArrayOfString(gregorianToJulian(struct));
                            } else {
                                val = structToArrayOfString(struct);
                            }
                        }
                    } else if (arrayIsArray(dateArray)) {
                        val = this.setter('struct', arrayToStruct(dateArray, this.isJulian()));
                    } else {
                        throw new TypeError(dateArray);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {window.Date} [date]
             * @this AstroDate
             */
            date: {
                value: function (date) {
                    var val;

                    if (isUndefined(date)) {
                        if (this.isValid()) {
                            val = new Date(parseInt(this.getTime(), 10));
                        } else {
                            val = new Date(NaN);
                        }
                    } else if (isDate(date)) {
                        val = this.setter(date);
                    } else {
                        throw new TypeError(date);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            getTime: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        if (this.isTT()) {
                            struct = toTT(this.getter());
                        } else {
                            struct = this.getter();
                        }

                        val = getTime(toUT(struct)).toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            deltaTime: {
                value: function () {
                    var val;

                    if (this.isValid()) {
                        val = deltaTime(getCorrectStruct(this, this.getter())).toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} unit
             * @this AstroDate
             */
            timeTo: {
                value: function (unit) {
                    var val;

                    if (this.isValid()) {
                        val = timeTo(getCorrectStruct(this, this.getter()), normaliseUnits(unit)).toString();
                    }

                    return val;
                }
            },

            /**
             * The Julian Date (JD) of any instant is the Julian day number for the preceding noon plus the fraction of the day since that instant.
             * Julian Dates are expressed as a Julian day number with a decimal fraction added.
             * For example, the Julian Date for 00:30:00.0 UT 1 January 2013 is 2456293.520833334
             * If argument is passed then this function acts as a setter; otherwise it is a getter.
             * If AstroDate is invalid then undefined is returned.
             * Throws an error if the argument is not of the correct type.
             * @memberOf AstroDate.prototype
             * @function
             * @param {(number|string)} [jd]
             * @return {string|undefined}
             * @this AstroDate
             */
            jd: {
                value: function (jd) {
                    var struct,
                        val;

                    if (isUndefined(jd)) {
                        if (this.isValid()) {
                            if (this.isTT()) {
                                struct = toTT(this.getter());
                            } else {
                                struct = this.getter();
                            }

                            val = gregorianToJd(toUT(struct)).toFixed(BigNumber.config().DECIMAL_PLACES);
                        }
                    } else if (isNumber(jd) || isString(jd) || BigNumber.isBigNumber(jd)) {
                        val = this.setter('struct', jdToGregorian(jd));
                    } else {
                        throw new TypeError(jd);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            jdn: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        if (this.isTT()) {
                            struct = toTT(this.getter());
                        } else {
                            struct = this.getter();
                        }

                        val = gregorianToJdn(toUT(struct)).toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            mjd: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        if (this.isTT()) {
                            struct = toTT(this.getter());
                        } else {
                            struct = this.getter();
                        }

                        val = gregorianToMJD(toUT(struct)).toString();
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            easter: {
                value: function () {
                    var struct,
                        val,
                        a,
                        b,
                        c,
                        d,
                        e,
                        f,
                        g,
                        h,
                        i,
                        k,
                        l,
                        m,
                        n;

                    if (this.isValid()) {
                        struct = getCorrectStruct(this, this.getter());
                        if (this.isJulian()) {
                            a = struct.year.mod(4);
                            b = struct.year.mod(7);
                            c = struct.year.mod(19);
                            d = c.times(19).plus(15).mod(30);
                            e = a.times(2).plus(b.times(4)).minus(d).plus(34).mod(7);
                            f = d.plus(e).plus(114);
                            val = new AstroDate([struct.year, f.div(31).floor().minus(1), f.mod(31).plus(1)]);
                        } else {
                            a = struct.year.mod(19);
                            b = struct.year.div(100).floor();
                            c = struct.year.mod(100).floor();
                            d = b.div(4);
                            e = b.mod(4);
                            f = b.plus(8).div(25).floor();
                            g = b.minus(f).plus(1).div(3).floor();
                            h = new BigNumber(19).times(a).plus(b).minus(d).minus(g).plus(15).mod(30);
                            i = c.div(4).floor();
                            k = c.mod(4);
                            l = new BigNumber(32).plus(e.times(2)).plus(i.times(2)).minus(h).minus(k).mod(7);
                            m = a.plus(h.times(11)).plus(l.times(22)).div(451).floor();
                            n = h.plus(l).minus(m.times(7)).plus(114);
                            val = new AstroDate([struct.year, n.div(31).floor(), n.mod(31).plus(1)]);
                        }
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            isLeapYear: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        struct = getCorrectStruct(this, this.getter());
                        if (this.isJulian()) {
                            val = isJulianLeapYear(gregorianToJulian(struct));
                        } else {
                            val = isGregorianLeapYear(struct);
                        }
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            daysInYear: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        struct = getCorrectStruct(this, this.getter());
                        if (this.isJulian()) {
                            val = daysInJulianYear(gregorianToJulian(struct)).toString();
                        } else {
                            val = daysInGregorianYear(struct).toString();
                        }
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            daysInMonth: {
                value: function () {
                    var struct,
                        val;

                    if (this.isValid()) {
                        struct = getCorrectStruct(this, this.getter());
                        if (this.isJulian()) {
                            val = daysInJulianMonth(gregorianToJulian(struct)).toString();
                        } else {
                            val = daysInGregorianMonth(struct).toString();
                        }
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [jsonString]
             * @return {string}
             * @this AstroDate
             */
            json: {
                value: function (jsonString) {
                    var struct,
                        propArray,
                        val;

                    if (isUndefined(jsonString)) {
                        if (isFunction(JSON.stringify)) {
                            val = JSON.stringify(this.object());
                        } else {
                            struct = this.object();
                            propArray = arrayMap(objectKeys(struct), function (key) {
                                return '"' + key + '":"' + struct[key] + '"';
                            });

                            val = '{' + propArray.join(',') + '}';
                        }
                    } else if (isString(jsonString)) {
                        if (isFunction(JSON.parse)) {
                            struct = objectToStruct(JSON.parse(jsonString), this.isJulian());
                        } else {
                            /*jslint evil: true */
                            struct = objectToStruct(new Function('return' + jsonString)(), this.isJulian());
                            /*jslint evil:   false */
                        }

                        if (!isValid(struct)) {
                            throw new SyntaxError(struct);
                        }

                        val = this.setter('struct', struct);
                    } else {
                        throw new TypeError(jsonString);
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @return {string}
             * @this AstroDate
             */
            toJSON: {
                value: function (padding, type) {
                    return this.toISOString(padding, type);
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @this AstroDate
             */
            calendarToWeekDate: {
                value: function () {
                    var val;

                    if (this.isValid()) {
                        val = structToObject(calendarToWeekDate(getCorrectStruct(this, this.getter())));
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [id]
             * @return {string}
             * @this AstroDate
             */
            lang: {
                value: function (id) {
                    var val,
                        lang;

                    if (isString(id) && !isEmptyString(id)) {
                        lang = minusToUnderscore(id);
                        if (isPlainObject(languages[lang])) {
                            this.setter('lang', lang);
                            this.setter('locale', lookupLocale(lang));
                        }

                        val = this;
                    } else {
                        val = this.getter('lang');
                    }

                    return val;
                }
            },

            /** @memberOf AstroDate.prototype
             * @function
             * @param {string} [id]
             * @return {string}
             * @this AstroDate
             */
            locale: {
                value: function (id) {
                    var lang,
                        val;

                    if (isString(id) && !isEmptyString(id)) {
                        lang = languageLoaded(id);
                        if (!isEmptyString(lang)) {
                            this.setter('lang', lang);
                            this.setter('locale', lookupLocale(id));
                        }

                        val = this;
                    } else {
                        val = this.getter('locale');
                    }

                    return val;
                }
            }
        });

        objectDefineProperties(AstroDate, {
            /** @memberOf AstroDate
             * @function
             * @return {string}
             */
            version: {
                value: function () {
                    return VERSION;
                }
            },

            /** @memberOf AstroDate
             * @function
             * @param {string} [id]
             * @param {object} [object]
             * @param {boolean} [freeze]
             * @return {string}
             */
            lang: {
                value: function (id, object, freeze) {
                    var lang;

                    if (isString(id) && !isEmptyString(id)) {
                        lang = minusToUnderscore(id);
                        if (isPlainObject(object)) {
                            languages[lang] = object;
                            if (!strictEqual(freeze, false)) {
                                deepFreeze(languages[lang]);
                            }
                        }

                        if (isPlainObject(languages[lang])) {
                            defaultLanguage = lang;
                            defaultLocale = lookupLocale(lang);
                        }
                    }

                    return defaultLanguage;
                }
            },

            /** @memberOf AstroDate
             * @function
             * @return {array.<String>}
             */
            langs: {
                value: function () {
                    return objectKeys(languages);
                }
            },

            /** @memberOf AstroDate
             * @function
             * @param {string} [id] The string representing the required locale, e.g. 'en_GB'
             * @return {string} Returns the current locale, e.g. 'en_GB'
             */
            locale: {
                value: function (id) {
                    var lang;

                    if (isString(id) && !isEmptyString(id)) {
                        lang = languageLoaded(id);
                        if (!isEmptyString(lang)) {
                            defaultLanguage = lang;
                            defaultLocale = lookupLocale(id);
                        }
                    }

                    return defaultLocale;
                }
            },

            /** @memberOf AstroDate
             * @function
             * @param {object} object
             * @param {boolean} freeze
             * @return {object}
             */
            leapSeconds: {
                value: function (object, freeze) {
                    if (isPlainObject(object)) {
                        leapSeconds = object;
                        if (!strictEqual(freeze, false)) {
                            deepFreeze(leapSeconds);
                        }
                    }

                    return leapSeconds;
                }
            },

            /** @memberOf AstroDate
             * @function
             * @param {object} object
             * @param {boolean} freeze
             * @return {object}
             */
            supplemental: {
                value: function (object, freeze) {
                    if (isPlainObject(object)) {
                        supplemental = object;
                        if (!strictEqual(freeze, false)) {
                            deepFreeze(supplemental);
                        }
                    }

                    return supplemental;
                }
            },

            /** @memberOf AstroDate
             * @function
             * @return {BigNumber}
             */
            BigNumber: {
                value: BigNumber
            },

            /** @memberOf AstroDate
             * @function
             * @param {string} unitString
             */
            normaliseUnits: {
                value: function (unitString) {
                    return normaliseUnits(unitString);
                }
            },

            /**
             * Tests if the provided input is an instance of AstroDate.
             * @memberOf AstroDate
             * @function
             * @param {object} inputArg
             * @return {boolean}
             */
            isAstroDate: {
                value: function (inputArg) {
                    return isObject(inputArg) && objectInstanceOf(inputArg, AstroDate);
                }
            },

            /**
             * Time is measured in ECMAScript in milliseconds since 01 January, 1970 UTC. In time values leap seconds
             * are ignored. It is assumed that there are exactly 86,400,000 milliseconds per day.
             * @memberOf AstroDate
             * @function
             * @return {string}
             */
            now: {
                value: function () {
                    return new AstroDate().getTime();
                }
            },

            /**
             * The Julian Date (JD) of any instant is the Julian day number for the preceding noon plus the fraction of the day since that instant.
             * Julian Dates are expressed as a Julian day number with a decimal fraction added.
             * For example, the Julian Date for 00:30:00.0 UT 1 January 2013 is 2456293.520833334
             * @memberOf AstroDate
             * @function
             * @return {string}
             */
            jd: {
                value: function () {
                    return new AstroDate().jd();
                }
            },
            /**
             * The Julian Day Number (JDN) is the integer assigned to a whole solar day in the Julian day count starting from noon Greenwich Mean Time,
             * with Julian day number 0 assigned to the day starting at noon on 1 January 4713 BC proleptic Julian calendar (24 November 4714 BC, in the proleptic Gregorian calendar).
             * For example, the Julian day number for 1 January 2000 was 2,451,545.0
             * @memberOf AstroDate
             * @function
             * @return {string}
             */
            jdn: {
                value: function () {
                    return new AstroDate().jdn();
                }
            },

            /**
             * The Modified Julian Date (MJD) was introduced by the Smithsonian Astrophysical Observatory in 1957 to record the orbit of
             * Sputnik via an IBM 704 (36-bit machine) and using only 18 bits until August 7, 2576.
             * MJD is the epoch of OpenVMS, using 63-bit date/time postponing the next Y2K campaign to July 31, 31086 02:48:05.47.
             * MJD is defined relative to midnight, rather than noon.
             * @memberOf AstroDate
             * @function
             * @return {string}
             */
            mjd: {
                value: function () {
                    return new AstroDate().mjd();
                }
            },

            /**
             * The time now represented in Unix time.
             * Unix time, or POSIX time, is a system for describing instants in time,
             * defined as the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC),
             * Thursday, 1 January 1970, not counting leap seconds.
             * It is used widely in Unix-like and many other operating systems and file formats.
             * Due to its handling of leap seconds, it is neither a linear representation of time nor a true representation of UTC.
             * Unix time may be checked on most Unix systems by typing date +%s on the command line.
             * @memberOf AstroDate
             * @function
             * @return {string}
             */
            unix: {
                value: function () {
                    return new AstroDate().unix();
                }
            }
        });

        function addAstroDateModules(module, define) {
            if (!isUndefined(module) || !isUndefined(define)) {
                throw new Error();
            }

            /*jshint validthis:true */
            /**
             * @file {@link https://github.com/Xotic750/astrodate leapSeconds}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * leapSeconds: 46
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLeapSeconds(AstroDate) {
                    AstroDate.leapSeconds({
                        '2012': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1972': {
                            '12': {
                                '31': '1'
                            },
                            '6': {
                                '30': '1'
                            }
                        },
                        '1987': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1998': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1973': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1990': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1992': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1993': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1983': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1985': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1978': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1997': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1974': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1981': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1979': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '2008': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1975': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1995': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1977': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1989': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1994': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '1982': {
                            '6': {
                                '30': '1'
                            }
                        },
                        '2005': {
                            '12': {
                                '31': '1'
                            }
                        },
                        '1976': {
                            '12': {
                                '31': '1'
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLeapSeconds(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLeapSeconds);
                } else {
                    defineLeapSeconds(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate supplemental}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * likelySubtags: [1]
             * timeData: [2]
             * weekData: [3]
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineSupplement(AstroDate) {
                    AstroDate.supplemental({
                        'weekData': {
                            'minDays': {
                                'LT': '4',
                                'LI': '4',
                                'JE': '4',
                                'IT': '4',
                                'IS': '4',
                                'IM': '4',
                                'IE': '4',
                                'HU': '4',
                                'GU': '1',
                                'GR': '4',
                                'GP': '4',
                                'GI': '4',
                                'GG': '4',
                                'GF': '4',
                                'GB': '4',
                                'FR': '4',
                                'LU': '4',
                                'MC': '4',
                                'MQ': '4',
                                'NL': '4',
                                'NO': '4',
                                'PL': '4',
                                'PT': '4',
                                'RE': '4',
                                'VI': '1',
                                'VA': '4',
                                'US': '1',
                                'UM': '1',
                                'SM': '4',
                                'SK': '4',
                                'SJ': '4',
                                'SE': '4',
                                'FO': '4',
                                'FJ': '4',
                                'FI': '4',
                                'ES': '4',
                                'EE': '4',
                                'DK': '4',
                                'DE': '4',
                                'CZ': '4',
                                '001': '1',
                                'AD': '4',
                                'AN': '4',
                                'AT': '4',
                                'AX': '4',
                                'BE': '4',
                                'BG': '4',
                                'CH': '4'
                            },
                            'firstDay': {
                                'SK': 'mon',
                                'SI': 'mon',
                                'SG': 'sun',
                                'SE': 'mon',
                                'SD': 'sat',
                                'SA': 'sun',
                                'RU': 'mon',
                                'RS': 'mon',
                                'RO': 'mon',
                                'RE': 'mon',
                                'QA': 'sat',
                                'PY': 'sun',
                                'PT': 'mon',
                                'PR': 'sun',
                                'PL': 'mon',
                                'PK': 'sun',
                                'PH': 'sun',
                                'PE': 'sun',
                                'PA': 'sun',
                                'OM': 'sat',
                                'NZ': 'sun',
                                'NP': 'sun',
                                'NO': 'mon',
                                'NL': 'mon',
                                'AN': 'mon',
                                'AR': 'sun',
                                'AS': 'sun',
                                'AT': 'mon',
                                'AU': 'sun',
                                'AX': 'mon',
                                'AZ': 'mon',
                                'BA': 'mon',
                                'CN': 'sun',
                                'CO': 'sun',
                                'CR': 'mon',
                                'CY': 'mon',
                                'CZ': 'mon',
                                'DE': 'mon',
                                'DJ': 'sat',
                                'DK': 'mon',
                                'DM': 'sun',
                                'DO': 'sun',
                                'DZ': 'sat',
                                'EC': 'mon',
                                'EE': 'mon',
                                'EG': 'sat',
                                'ES': 'mon',
                                'ET': 'sun',
                                'FI': 'mon',
                                'FJ': 'mon',
                                'FO': 'mon',
                                'FR': 'mon',
                                'GB': 'mon',
                                'GE': 'mon',
                                'GF': 'mon',
                                'GP': 'mon',
                                'TT': 'sun',
                                'TW': 'sun',
                                'UA': 'mon',
                                'UM': 'sun',
                                'US': 'sun',
                                'UY': 'mon',
                                'UZ': 'mon',
                                'VA': 'mon',
                                'ZW': 'sun',
                                'ZA': 'sun',
                                'YE': 'sun',
                                'XK': 'mon',
                                'WS': 'sun',
                                'VN': 'mon',
                                'VI': 'sun',
                                'VE': 'sun',
                                'TR': 'mon',
                                'TN': 'sun',
                                'TM': 'mon',
                                'TJ': 'mon',
                                'TH': 'sun',
                                'SY': 'sat',
                                'SV': 'sun',
                                'SM': 'mon',
                                'ID': 'sun',
                                'HU': 'mon',
                                'HR': 'mon',
                                'HN': 'sun',
                                'HK': 'sun',
                                'GU': 'sun',
                                'GT': 'sun',
                                'GR': 'mon',
                                '001': 'mon',
                                'AD': 'mon',
                                'AE': 'sat',
                                'AF': 'sat',
                                'AG': 'sun',
                                'AI': 'mon',
                                'AL': 'mon',
                                'AM': 'mon',
                                'BD': 'fri',
                                'BE': 'mon',
                                'BG': 'mon',
                                'BH': 'sat',
                                'BM': 'mon',
                                'BN': 'mon',
                                'BR': 'sun',
                                'BS': 'sun',
                                'BT': 'sun',
                                'BW': 'sun',
                                'BY': 'sun',
                                'BZ': 'sun',
                                'CA': 'sun',
                                'CH': 'mon',
                                'CL': 'mon',
                                'CM': 'mon',
                                'IE': 'sun',
                                'IL': 'sun',
                                'IN': 'sun',
                                'IQ': 'sat',
                                'IR': 'sat',
                                'IS': 'mon',
                                'IT': 'mon',
                                'JM': 'sun',
                                'JO': 'sat',
                                'JP': 'sun',
                                'KE': 'sun',
                                'KG': 'mon',
                                'KH': 'sun',
                                'KR': 'sun',
                                'KW': 'sat',
                                'KZ': 'mon',
                                'LA': 'sun',
                                'LB': 'mon',
                                'LI': 'mon',
                                'LK': 'mon',
                                'LT': 'mon',
                                'LU': 'mon',
                                'LV': 'mon',
                                'LY': 'sat',
                                'MA': 'sat',
                                'MC': 'mon',
                                'MD': 'mon',
                                'ME': 'mon',
                                'MH': 'sun',
                                'MK': 'mon',
                                'MM': 'sun',
                                'MN': 'mon',
                                'MO': 'sun',
                                'MQ': 'mon',
                                'MT': 'sun',
                                'MV': 'fri',
                                'MX': 'sun',
                                'MY': 'mon',
                                'MZ': 'sun',
                                'NI': 'sun'
                            },
                            'firstDay-alt-variant': {
                                'GB': 'sun'
                            },
                            'weekendStart': {
                                'QA': 'fri',
                                'OM': 'thu',
                                'MA': 'fri',
                                'LY': 'fri',
                                'KW': 'fri',
                                'EG': 'fri',
                                'IL': 'fri',
                                'IN': 'sun',
                                'SA': 'fri',
                                'SD': 'fri',
                                'SY': 'fri',
                                'TN': 'fri',
                                'YE': 'fri',
                                'DZ': 'thu',
                                'BH': 'fri',
                                'AF': 'thu',
                                'AE': 'fri',
                                '001': 'sat',
                                'IQ': 'fri',
                                'IR': 'thu',
                                'JO': 'fri'
                            },
                            'weekendEnd': {
                                'SA': 'sat',
                                'QA': 'sat',
                                'OM': 'fri',
                                'MA': 'sat',
                                'DZ': 'fri',
                                'EG': 'sat',
                                'IL': 'sat',
                                'IQ': 'sat',
                                'SD': 'sat',
                                'SY': 'sat',
                                'TN': 'sat',
                                'YE': 'sat',
                                'BH': 'sat',
                                'AF': 'fri',
                                'AE': 'sat',
                                '001': 'sun',
                                'IR': 'fri',
                                'JO': 'sat',
                                'KW': 'sat',
                                'LY': 'sat'
                            }
                        },
                        'likelySubtags': {
                            'bfq': 'bfq_Taml_IN',
                            'bez': 'bez_Latn_TZ',
                            'bem': 'bem_Latn_ZM',
                            'be': 'be_Cyrl_BY',
                            'bbc': 'bbc_Latn_ID',
                            'bax': 'bax_Bamu_CM',
                            'bas': 'bas_Latn_CM',
                            'ban': 'ban_Latn_ID',
                            'bal': 'bal_Arab_PK',
                            'ba': 'ba_Cyrl_RU',
                            'az_RU': 'az_Cyrl_RU',
                            'az_IR': 'az_Arab_IR',
                            'az_Arab': 'az_Arab_IR',
                            'az': 'az_Latn_AZ',
                            'ay': 'ay_Latn_BO',
                            'alt': 'alt_Cyrl_RU',
                            'ak': 'ak_Latn_GH',
                            'agq': 'agq_Latn_CM',
                            'af': 'af_Latn_ZA',
                            'ady': 'ady_Cyrl_RU',
                            'ace': 'ace_Latn_ID',
                            'ab': 'ab_Cyrl_GE',
                            'aa': 'aa_Latn_ET',
                            'am': 'am_Ethi_ET',
                            'amo': 'amo_Latn_NG',
                            'ar': 'ar_Arab_EG',
                            'as': 'as_Beng_IN',
                            'asa': 'asa_Latn_TZ',
                            'ast': 'ast_Latn_ES',
                            'av': 'av_Cyrl_RU',
                            'awa': 'awa_Deva_IN',
                            'bfy': 'bfy_Deva_IN',
                            'bg': 'bg_Cyrl_BG',
                            'bhb': 'bhb_Deva_IN',
                            'bho': 'bho_Deva_IN',
                            'bi': 'bi_Latn_VU',
                            'bik': 'bik_Latn_PH',
                            'bin': 'bin_Latn_NG',
                            'bjj': 'bjj_Deva_IN',
                            'bku': 'bku_Latn_PH',
                            'bm': 'bm_Latn_ML',
                            'bn': 'bn_Beng_BD',
                            'bo': 'bo_Tibt_CN',
                            'bqv': 'bqv_Latn_CI',
                            'br': 'br_Latn_FR',
                            'bra': 'bra_Deva_IN',
                            'brx': 'brx_Deva_IN',
                            'bs': 'bs_Latn_BA',
                            'bss': 'bss_Latn_CM',
                            'btv': 'btv_Deva_PK',
                            'bua': 'bua_Cyrl_RU',
                            'buc': 'buc_Latn_YT',
                            'bug': 'bug_Latn_ID',
                            'bya': 'bya_Latn_ID',
                            'byn': 'byn_Ethi_ER',
                            'ca': 'ca_Latn_ES',
                            'cch': 'cch_Latn_NG',
                            'ccp': 'ccp_Beng_IN',
                            'ce': 'ce_Cyrl_RU',
                            'ceb': 'ceb_Latn_PH',
                            'cgg': 'cgg_Latn_UG',
                            'ch': 'ch_Latn_GU',
                            'chk': 'chk_Latn_FM',
                            'gv': 'gv_Latn_IM',
                            'gwi': 'gwi_Latn_CA',
                            'ha': 'ha_Latn_NG',
                            'ha_CM': 'ha_Arab_CM',
                            'ha_SD': 'ha_Arab_SD',
                            'haw': 'haw_Latn_US',
                            'he': 'he_Hebr_IL',
                            'hi': 'hi_Deva_IN',
                            'hil': 'hil_Latn_PH',
                            'hne': 'hne_Deva_IN',
                            'hnn': 'hnn_Latn_PH',
                            'ho': 'ho_Latn_PG',
                            'hoc': 'hoc_Deva_IN',
                            'hoj': 'hoj_Deva_IN',
                            'hr': 'hr_Latn_HR',
                            'ht': 'ht_Latn_HT',
                            'hu': 'hu_Latn_HU',
                            'hy': 'hy_Armn_AM',
                            'ia': 'ia_Latn_FR',
                            'ibb': 'ibb_Latn_NG',
                            'id': 'id_Latn_ID',
                            'ig': 'ig_Latn_NG',
                            'ii': 'ii_Yiii_CN',
                            'ik': 'ik_Latn_US',
                            'ilo': 'ilo_Latn_PH',
                            'in': 'in_Latn_ID',
                            'inh': 'inh_Cyrl_RU',
                            'is': 'is_Latn_IS',
                            'it': 'it_Latn_IT',
                            'iu': 'iu_Cans_CA',
                            'iw': 'iw_Hebr_IL',
                            'ja': 'ja_Jpan_JP',
                            'jgo': 'jgo_Latn_CM',
                            'ji': 'ji_Hebr_UA',
                            'jmc': 'jmc_Latn_TZ',
                            'jv': 'jv_Latn_ID',
                            'jw': 'jw_Latn_ID',
                            'ka': 'ka_Geor_GE',
                            'kaa': 'kaa_Cyrl_UZ',
                            'kab': 'kab_Latn_DZ',
                            'kaj': 'kaj_Latn_NG',
                            'kam': 'kam_Latn_KE',
                            'kbd': 'kbd_Cyrl_RU',
                            'kcg': 'kcg_Latn_NG',
                            'kde': 'kde_Latn_TZ',
                            'kdt': 'kdt_Thai_TH',
                            'kea': 'kea_Latn_CV',
                            'ken': 'ken_Latn_CM',
                            'kfo': 'kfo_Latn_CI',
                            'kfr': 'kfr_Deva_IN',
                            'kg': 'kg_Latn_CD',
                            'kha': 'kha_Latn_IN',
                            'khb': 'khb_Talu_CN',
                            'khq': 'khq_Latn_ML',
                            'kht': 'kht_Mymr_IN',
                            'ki': 'ki_Latn_KE',
                            'kj': 'kj_Latn_NA',
                            'kk': 'kk_Cyrl_KZ',
                            'kk_AF': 'kk_Arab_AF',
                            'kk_Arab': 'kk_Arab_CN',
                            'kk_CN': 'kk_Arab_CN',
                            'kk_IR': 'kk_Arab_IR',
                            'kk_MN': 'kk_Arab_MN',
                            'kkj': 'kkj_Latn_CM',
                            'kl': 'kl_Latn_GL',
                            'kln': 'kln_Latn_KE',
                            'km': 'km_Khmr_KH',
                            'kmb': 'kmb_Latn_AO',
                            'kn': 'kn_Knda_IN',
                            'ko': 'ko_Kore_KR',
                            'koi': 'koi_Cyrl_RU',
                            'kok': 'kok_Deva_IN',
                            'kos': 'kos_Latn_FM',
                            'kpe': 'kpe_Latn_LR',
                            'krc': 'krc_Cyrl_RU',
                            'kri': 'kri_Latn_SL',
                            'krl': 'krl_Latn_RU',
                            'kru': 'kru_Deva_IN',
                            'ks': 'ks_Arab_IN',
                            'ksb': 'ksb_Latn_TZ',
                            'ksf': 'ksf_Latn_CM',
                            'ksh': 'ksh_Latn_DE',
                            'ku': 'ku_Latn_TR',
                            'ku_Arab': 'ku_Arab_IQ',
                            'ku_LB': 'ku_Arab_LB',
                            'kum': 'kum_Cyrl_RU',
                            'kv': 'kv_Cyrl_RU',
                            'kw': 'kw_Latn_GB',
                            'ky': 'ky_Cyrl_KG',
                            'ky_Arab': 'ky_Arab_CN',
                            'ky_CN': 'ky_Arab_CN',
                            'ky_Latn': 'ky_Latn_TR',
                            'ky_TR': 'ky_Latn_TR',
                            'la': 'la_Latn_VA',
                            'lag': 'lag_Latn_TZ',
                            'lah': 'lah_Arab_PK',
                            'lb': 'lb_Latn_LU',
                            'lbe': 'lbe_Cyrl_RU',
                            'lcp': 'lcp_Thai_CN',
                            'lep': 'lep_Lepc_IN',
                            'lez': 'lez_Cyrl_RU',
                            'lg': 'lg_Latn_UG',
                            'li': 'li_Latn_NL',
                            'lif': 'lif_Deva_NP',
                            'lis': 'lis_Lisu_CN',
                            'lki': 'lki_Arab_IR',
                            'lkt': 'lkt_Latn_US',
                            'lmn': 'lmn_Telu_IN',
                            'ln': 'ln_Latn_CD',
                            'lo': 'lo_Laoo_LA',
                            'lol': 'lol_Latn_CD',
                            'lt': 'lt_Latn_LT',
                            'lu': 'lu_Latn_CD',
                            'lua': 'lua_Latn_CD',
                            'luo': 'luo_Latn_KE',
                            'luy': 'luy_Latn_KE',
                            'lv': 'lv_Latn_LV',
                            'lwl': 'lwl_Thai_TH',
                            'mad': 'mad_Latn_ID',
                            'mag': 'mag_Deva_IN',
                            'mai': 'mai_Deva_IN',
                            'mak': 'mak_Latn_ID',
                            'man': 'man_Latn_GM',
                            'man_GN': 'man_Nkoo_GN',
                            'man_Nkoo': 'man_Nkoo_GN',
                            'mas': 'mas_Latn_KE',
                            'mdf': 'mdf_Cyrl_RU',
                            'mdh': 'mdh_Latn_PH',
                            'und_Cyrl_MD': 'uk_Cyrl_MD',
                            'und_Cyrl_PL': 'be_Cyrl_PL',
                            'und_Cyrl_RO': 'bg_Cyrl_RO',
                            'und_Cyrl_SK': 'uk_Cyrl_SK',
                            'und_Cyrl_TR': 'kbd_Cyrl_TR',
                            'und_Cyrl_XK': 'sr_Cyrl_XK',
                            'und_CZ': 'cs_Latn_CZ',
                            'und_DE': 'de_Latn_DE',
                            'und_Deva': 'hi_Deva_IN',
                            'und_Deva_BT': 'ne_Deva_BT',
                            'und_Deva_MU': 'bho_Deva_MU',
                            'und_Deva_PK': 'btv_Deva_PK',
                            'und_DJ': 'aa_Latn_DJ',
                            'und_DK': 'da_Latn_DK',
                            'und_DO': 'es_Latn_DO',
                            'und_DZ': 'ar_Arab_DZ',
                            'und_EA': 'es_Latn_EA',
                            'und_EC': 'es_Latn_EC',
                            'und_EE': 'et_Latn_EE',
                            'und_EG': 'ar_Arab_EG',
                            'und_Egyp': 'egy_Egyp_EG',
                            'und_EH': 'ar_Arab_EH',
                            'und_ER': 'ti_Ethi_ER',
                            'und_ES': 'es_Latn_ES',
                            'und_ET': 'am_Ethi_ET',
                            'und_Ethi': 'am_Ethi_ET',
                            'und_FI': 'fi_Latn_FI',
                            'und_FM': 'chk_Latn_FM',
                            'und_FO': 'fo_Latn_FO',
                            'und_FR': 'fr_Latn_FR',
                            'und_GA': 'fr_Latn_GA',
                            'und_GE': 'ka_Geor_GE',
                            'und_Geor': 'ka_Geor_GE',
                            'und_GF': 'fr_Latn_GF',
                            'und_GH': 'ak_Latn_GH',
                            'und_GL': 'kl_Latn_GL',
                            'und_Glag': 'cu_Glag_BG',
                            'und_GN': 'fr_Latn_GN',
                            'und_Goth': 'got_Goth_UA',
                            'und_GP': 'fr_Latn_GP',
                            'und_GQ': 'es_Latn_GQ',
                            'und_GR': 'el_Grek_GR',
                            'und_Grek': 'el_Grek_GR',
                            'und_GS': 'und_Latn_GS',
                            'und_GT': 'es_Latn_GT',
                            'und_Gujr': 'gu_Gujr_IN',
                            'und_Guru': 'pa_Guru_IN',
                            'und_GW': 'pt_Latn_GW',
                            'und_Hang': 'ko_Hang_KR',
                            'und_Hani': 'zh_Hani_CN',
                            'und_Hano': 'hnn_Hano_PH',
                            'und_Hans': 'zh_Hans_CN',
                            'und_Hant': 'zh_Hant_TW',
                            'und_Hebr': 'he_Hebr_IL',
                            'und_Hebr_CA': 'yi_Hebr_CA',
                            'und_Hebr_GB': 'yi_Hebr_GB',
                            'und_Hebr_SE': 'yi_Hebr_SE',
                            'und_Hebr_UA': 'yi_Hebr_UA',
                            'und_Hebr_US': 'yi_Hebr_US',
                            'und_Hira': 'ja_Hira_JP',
                            'und_HK': 'zh_Hant_HK',
                            'und_HM': 'und_Latn_HM',
                            'und_HN': 'es_Latn_HN',
                            'und_HR': 'hr_Latn_HR',
                            'und_HT': 'ht_Latn_HT',
                            'und_QA': 'ar_Arab_QA',
                            'und_RE': 'fr_Latn_RE',
                            'und_Rjng': 'rej_Rjng_ID',
                            'und_RO': 'ro_Latn_RO',
                            'und_RS': 'sr_Cyrl_RS',
                            'und_RU': 'ru_Cyrl_RU',
                            'und_Runr': 'non_Runr_SE',
                            'und_RW': 'rw_Latn_RW',
                            'und_SA': 'ar_Arab_SA',
                            'und_Samr': 'smp_Samr_IL',
                            'und_Sarb': 'xsa_Sarb_YE',
                            'und_Saur': 'saz_Saur_IN',
                            'und_SC': 'fr_Latn_SC',
                            'und_SD': 'ar_Arab_SD',
                            'und_SE': 'sv_Latn_SE',
                            'und_Shaw': 'en_Shaw_GB',
                            'und_Shrd': 'sa_Shrd_IN',
                            'und_SI': 'sl_Latn_SI',
                            'und_Sinh': 'si_Sinh_LK',
                            'und_SJ': 'nb_Latn_SJ',
                            'und_SK': 'sk_Latn_SK',
                            'und_SM': 'it_Latn_SM',
                            'und_SN': 'fr_Latn_SN',
                            'und_SO': 'so_Latn_SO',
                            'und_Sora': 'srb_Sora_IN',
                            'und_SR': 'nl_Latn_SR',
                            'und_ST': 'pt_Latn_ST',
                            'und_Sund': 'su_Sund_ID',
                            'und_SV': 'es_Latn_SV',
                            'und_SY': 'ar_Arab_SY',
                            'und_Sylo': 'syl_Sylo_BD',
                            'und_Syrc': 'syr_Syrc_IQ',
                            'und_Tagb': 'tbw_Tagb_PH',
                            'und_Takr': 'doi_Takr_IN',
                            'und_Tale': 'tdd_Tale_CN',
                            'und_Talu': 'khb_Talu_CN',
                            'und_Taml': 'ta_Taml_IN',
                            'und_Tavt': 'blt_Tavt_VN',
                            'und_TD': 'fr_Latn_TD',
                            'und_Telu': 'te_Telu_IN',
                            'und_TF': 'fr_Latn_TF',
                            'und_Tfng': 'zgh_Tfng_MA',
                            'und_TG': 'fr_Latn_TG',
                            'und_Tglg': 'fil_Tglg_PH',
                            'und_TH': 'th_Thai_TH',
                            'und_Thaa': 'dv_Thaa_MV',
                            'und_Thai': 'th_Thai_TH',
                            'und_Thai_CN': 'lcp_Thai_CN',
                            'und_Thai_KH': 'kdt_Thai_KH',
                            'und_Thai_LA': 'kdt_Thai_LA',
                            'und_Tibt': 'bo_Tibt_CN',
                            'und_TJ': 'tg_Cyrl_TJ',
                            'und_TK': 'tkl_Latn_TK',
                            'und_TL': 'pt_Latn_TL',
                            'und_TM': 'tk_Latn_TM',
                            'und_TN': 'ar_Arab_TN',
                            'und_TO': 'to_Latn_TO',
                            'und_TR': 'tr_Latn_TR',
                            'und_TV': 'tvl_Latn_TV',
                            'und_TW': 'zh_Hant_TW',
                            'und_TZ': 'sw_Latn_TZ',
                            'und_UA': 'uk_Cyrl_UA',
                            'und_UG': 'sw_Latn_UG',
                            'und_Ugar': 'uga_Ugar_SY',
                            'war': 'war_Latn_PH',
                            'mdr': 'mdr_Latn_ID',
                            'men': 'men_Latn_SL',
                            'mer': 'mer_Latn_KE',
                            'mfe': 'mfe_Latn_MU',
                            'mg': 'mg_Latn_MG',
                            'mgh': 'mgh_Latn_MZ',
                            'mgo': 'mgo_Latn_CM',
                            'mh': 'mh_Latn_MH',
                            'mi': 'mi_Latn_NZ',
                            'min': 'min_Latn_ID',
                            'mk': 'mk_Cyrl_MK',
                            'ml': 'ml_Mlym_IN',
                            'mn': 'mn_Cyrl_MN',
                            'mn_CN': 'mn_Mong_CN',
                            'mn_Mong': 'mn_Mong_CN',
                            'mni': 'mni_Beng_IN',
                            'mnw': 'mnw_Mymr_MM',
                            'mo': 'mo_Latn_RO',
                            'mos': 'mos_Latn_BF',
                            'mr': 'mr_Deva_IN',
                            'ms': 'ms_Latn_MY',
                            'ms_CC': 'ms_Arab_CC',
                            'ms_ID': 'ms_Arab_ID',
                            'mt': 'mt_Latn_MT',
                            'mua': 'mua_Latn_CM',
                            'mwr': 'mwr_Deva_IN',
                            'my': 'my_Mymr_MM',
                            'myv': 'myv_Cyrl_RU',
                            'na': 'na_Latn_NR',
                            'nap': 'nap_Latn_IT',
                            'naq': 'naq_Latn_NA',
                            'nb': 'nb_Latn_NO',
                            'nd': 'nd_Latn_ZW',
                            'nds': 'nds_Latn_DE',
                            'ne': 'ne_Deva_NP',
                            'new': 'new_Deva_NP',
                            'ng': 'ng_Latn_NA',
                            'niu': 'niu_Latn_NU',
                            'nl': 'nl_Latn_NL',
                            'nmg': 'nmg_Latn_CM',
                            'nn': 'nn_Latn_NO',
                            'nnh': 'nnh_Latn_CM',
                            'no': 'no_Latn_NO',
                            'nod': 'nod_Lana_TH',
                            'nr': 'nr_Latn_ZA',
                            'nso': 'nso_Latn_ZA',
                            'nus': 'nus_Latn_SD',
                            'nv': 'nv_Latn_US',
                            'ny': 'ny_Latn_MW',
                            'nym': 'nym_Latn_TZ',
                            'nyn': 'nyn_Latn_UG',
                            'oc': 'oc_Latn_FR',
                            'om': 'om_Latn_ET',
                            'or': 'or_Orya_IN',
                            'os': 'os_Cyrl_GE',
                            'pa': 'pa_Guru_IN',
                            'pa_Arab': 'pa_Arab_PK',
                            'pa_PK': 'pa_Arab_PK',
                            'pag': 'pag_Latn_PH',
                            'pam': 'pam_Latn_PH',
                            'pap': 'pap_Latn_AW',
                            'pau': 'pau_Latn_PW',
                            'pl': 'pl_Latn_PL',
                            'pon': 'pon_Latn_FM',
                            'prd': 'prd_Arab_IR',
                            'ps': 'ps_Arab_AF',
                            'pt': 'pt_Latn_BR',
                            'qu': 'qu_Latn_PE',
                            'raj': 'raj_Latn_IN',
                            'rcf': 'rcf_Latn_RE',
                            'rej': 'rej_Latn_ID',
                            'rjs': 'rjs_Deva_NP',
                            'rkt': 'rkt_Beng_BD',
                            'rm': 'rm_Latn_CH',
                            'rn': 'rn_Latn_BI',
                            'ro': 'ro_Latn_RO',
                            'rof': 'rof_Latn_TZ',
                            'ru': 'ru_Cyrl_RU',
                            'rw': 'rw_Latn_RW',
                            'rwk': 'rwk_Latn_TZ',
                            'sa': 'sa_Deva_IN',
                            'saf': 'saf_Latn_GH',
                            'sah': 'sah_Cyrl_RU',
                            'saq': 'saq_Latn_KE',
                            'sas': 'sas_Latn_ID',
                            'sat': 'sat_Latn_IN',
                            'saz': 'saz_Saur_IN',
                            'sbp': 'sbp_Latn_TZ',
                            'scn': 'scn_Latn_IT',
                            'sco': 'sco_Latn_GB',
                            'sd': 'sd_Arab_PK',
                            'sd_Deva': 'sd_Deva_IN',
                            'sdh': 'sdh_Arab_IR',
                            'se': 'se_Latn_NO',
                            'seh': 'seh_Latn_MZ',
                            'ses': 'ses_Latn_ML',
                            'sg': 'sg_Latn_CF',
                            'shi': 'shi_Tfng_MA',
                            'shn': 'shn_Mymr_MM',
                            'si': 'si_Sinh_LK',
                            'sid': 'sid_Latn_ET',
                            'sk': 'sk_Latn_SK',
                            'sl': 'sl_Latn_SI',
                            'sm': 'sm_Latn_WS',
                            'sma': 'sma_Latn_SE',
                            'smj': 'smj_Latn_SE',
                            'smn': 'smn_Latn_FI',
                            'sms': 'sms_Latn_FI',
                            'sn': 'sn_Latn_ZW',
                            'snk': 'snk_Latn_ML',
                            'so': 'so_Latn_SO',
                            'sq': 'sq_Latn_AL',
                            'sr': 'sr_Cyrl_RS',
                            'sr_ME': 'sr_Latn_ME',
                            'sr_RO': 'sr_Latn_RO',
                            'sr_RU': 'sr_Latn_RU',
                            'sr_TR': 'sr_Latn_TR',
                            'srn': 'srn_Latn_SR',
                            'srr': 'srr_Latn_SN',
                            'ss': 'ss_Latn_ZA',
                            'ssy': 'ssy_Latn_ER',
                            'st': 'st_Latn_ZA',
                            'su': 'su_Latn_ID',
                            'suk': 'suk_Latn_TZ',
                            'sus': 'sus_Latn_GN',
                            'sv': 'sv_Latn_SE',
                            'sw': 'sw_Latn_TZ',
                            'swb': 'swb_Arab_YT',
                            'und_Arab_PK': 'ur_Arab_PK',
                            'und_Arab_TJ': 'fa_Arab_TJ',
                            'und_Arab_TR': 'zza_Arab_TR',
                            'und_Arab_YT': 'swb_Arab_YT',
                            'und_Armi': 'arc_Armi_IR',
                            'und_Armn': 'hy_Armn_AM',
                            'und_AS': 'sm_Latn_AS',
                            'und_AT': 'de_Latn_AT',
                            'und_Avst': 'ae_Avst_IR',
                            'und_AW': 'nl_Latn_AW',
                            'und_AX': 'sv_Latn_AX',
                            'und_AZ': 'az_Latn_AZ',
                            'und_BA': 'bs_Latn_BA',
                            'und_Bali': 'ban_Bali_ID',
                            'und_Bamu': 'bax_Bamu_CM',
                            'und_Batk': 'bbc_Batk_ID',
                            'und_BD': 'bn_Beng_BD',
                            'und_BE': 'nl_Latn_BE',
                            'und_Beng': 'bn_Beng_BD',
                            'und_BF': 'fr_Latn_BF',
                            'und_BG': 'bg_Cyrl_BG',
                            'und_BH': 'ar_Arab_BH',
                            'und_BI': 'rn_Latn_BI',
                            'und_BJ': 'fr_Latn_BJ',
                            'und_BL': 'fr_Latn_BL',
                            'und_BN': 'ms_Latn_BN',
                            'und_BO': 'es_Latn_BO',
                            'und_Bopo': 'zh_Bopo_TW',
                            'und_BQ': 'pap_Latn_BQ',
                            'und_BR': 'pt_Latn_BR',
                            'und_Brah': 'pra_Brah_IN',
                            'und_Brai': 'und_Brai_FR',
                            'und_CM': 'fr_Latn_CM',
                            'und_CN': 'zh_Hans_CN',
                            'und_CO': 'es_Latn_CO',
                            'und_Copt': 'cop_Copt_EG',
                            'und_CP': 'und_Latn_CP',
                            'und_Cprt': 'grc_Cprt_CY',
                            'und_CR': 'es_Latn_CR',
                            'und_CU': 'es_Latn_CU',
                            'und_Cyrl_GR': 'mk_Cyrl_GR',
                            'und_Cyrl_GE': 'ab_Cyrl_GE',
                            'und_Cyrl_BA': 'sr_Cyrl_BA',
                            'und_Cyrl_AL': 'mk_Cyrl_AL',
                            'und_Cyrl': 'ru_Cyrl_RU',
                            'und_CY': 'el_Grek_CY',
                            'und_CW': 'pap_Latn_CW',
                            'und_CV': 'pt_Latn_CV',
                            'und_CL': 'es_Latn_CL',
                            'und_CI': 'fr_Latn_CI',
                            'und_Cher': 'chr_Cher_US',
                            'und_Cham': 'cjm_Cham_VN',
                            'und_CH': 'de_Latn_CH',
                            'und_CG': 'fr_Latn_CG',
                            'und_CF': 'fr_Latn_CF',
                            'und_CD': 'sw_Latn_CD',
                            'und_Cari': 'xcr_Cari_TR',
                            'und_Cans': 'cr_Cans_CA',
                            'und_Cakm': 'ccp_Cakm_BD',
                            'und_BY': 'be_Cyrl_BY',
                            'und_BV': 'und_Latn_BV',
                            'und_Buhd': 'bku_Buhd_PH',
                            'und_Bugi': 'bug_Bugi_ID',
                            'und_BT': 'dz_Tibt_BT',
                            'und_Arab_NG': 'ha_Arab_NG',
                            'und_Arab_MU': 'ur_Arab_MU',
                            'und_Arab_MN': 'kk_Arab_MN',
                            'und_Arab_KH': 'cja_Arab_KH',
                            'und_Arab_IN': 'ur_Arab_IN',
                            'und_Arab_ID': 'ms_Arab_ID',
                            'und_Arab_GB': 'ks_Arab_GB',
                            'und_Arab_CN': 'ug_Arab_CN',
                            'und_Arab_CC': 'ms_Arab_CC',
                            'und_Arab': 'ar_Arab_EG',
                            'und_AR': 'es_Latn_AR',
                            'und_AQ': 'und_Latn_AQ',
                            'und_AO': 'pt_Latn_AO',
                            'und_AM': 'hy_Armn_AM',
                            'und_AL': 'sq_Latn_AL',
                            'und_AF': 'fa_Arab_AF',
                            'und_AE': 'ar_Arab_AE',
                            'und_AD': 'ca_Latn_AD',
                            'und': 'en_Latn_US',
                            'umb': 'umb_Latn_AO',
                            'uli': 'uli_Latn_FM',
                            'uk': 'uk_Cyrl_UA',
                            'ug_MN': 'ug_Cyrl_MN',
                            'ug_KZ': 'ug_Cyrl_KZ',
                            'ug_Cyrl': 'ug_Cyrl_KZ',
                            'ug': 'ug_Arab_CN',
                            'udm': 'udm_Cyrl_RU',
                            'tzm': 'tzm_Latn_MA',
                            'tyv': 'tyv_Cyrl_RU',
                            'ty': 'ty_Latn_PF',
                            'twq': 'twq_Latn_NE',
                            'tvl': 'tvl_Latn_TV',
                            'tum': 'tum_Latn_MW',
                            'tts': 'tts_Thai_TH',
                            'tt': 'tt_Cyrl_RU',
                            'tsg': 'tsg_Latn_PH',
                            'ts': 'ts_Latn_ZA',
                            'trv': 'trv_Latn_TW',
                            'tr': 'tr_Latn_TR',
                            'tpi': 'tpi_Latn_PG',
                            'to': 'to_Latn_TO',
                            'tn': 'tn_Latn_ZA',
                            'tmh': 'tmh_Latn_NE',
                            'tl': 'tl_Latn_PH',
                            'tkl': 'tkl_Latn_TK',
                            'tk': 'tk_Latn_TM',
                            'tiv': 'tiv_Latn_NG',
                            'tig': 'tig_Ethi_ER',
                            'ti': 'ti_Ethi_ET',
                            'th': 'th_Thai_TH',
                            'tg_PK': 'tg_Arab_PK',
                            'tg_Arab': 'tg_Arab_PK',
                            'tg': 'tg_Cyrl_TJ',
                            'tet': 'tet_Latn_TL',
                            'teo': 'teo_Latn_UG',
                            'tem': 'tem_Latn_SL',
                            'te': 'te_Telu_IN',
                            'tdd': 'tdd_Tale_CN',
                            'tcy': 'tcy_Knda_IN',
                            'tbw': 'tbw_Latn_PH',
                            'ta': 'ta_Taml_IN',
                            'syr': 'syr_Syrc_IQ',
                            'syl': 'syl_Beng_BD',
                            'swc': 'swc_Latn_CD',
                            'guz': 'guz_Latn_KE',
                            'gu': 'gu_Gujr_IN',
                            'gsw': 'gsw_Latn_CH',
                            'grt': 'grt_Beng_IN',
                            'gor': 'gor_Latn_ID',
                            'gon': 'gon_Telu_IN',
                            'gn': 'gn_Latn_PY',
                            'gl': 'gl_Latn_ES',
                            'gil': 'gil_Latn_KI',
                            'gez': 'gez_Ethi_ET',
                            'gd': 'gd_Latn_GB',
                            'gcr': 'gcr_Latn_GF',
                            'gbm': 'gbm_Deva_IN',
                            'gag': 'gag_Latn_MD',
                            'gaa': 'gaa_Latn_GH',
                            'ga': 'ga_Latn_IE',
                            'fy': 'fy_Latn_NL',
                            'fur': 'fur_Latn_IT',
                            'fr': 'fr_Latn_FR',
                            'fon': 'fon_Latn_BJ',
                            'fo': 'fo_Latn_FO',
                            'fj': 'fj_Latn_FJ',
                            'fil': 'fil_Latn_PH',
                            'fi': 'fi_Latn_FI',
                            'ff': 'ff_Latn_SN',
                            'fan': 'fan_Latn_GQ',
                            'fa': 'fa_Arab_IR',
                            'ewo': 'ewo_Latn_CM',
                            'eu': 'eu_Latn_ES',
                            'et': 'et_Latn_EE',
                            'es': 'es_Latn_ES',
                            'eo': 'eo_Latn_001',
                            'en': 'en_Latn_US',
                            'el': 'el_Grek_GR',
                            'efi': 'efi_Latn_NG',
                            'ee': 'ee_Latn_GH',
                            'ebu': 'ebu_Latn_KE',
                            'dz': 'dz_Tibt_BT',
                            'dyu': 'dyu_Latn_BF',
                            'dyo': 'dyo_Latn_SN',
                            'dv': 'dv_Thaa_MV',
                            'dua': 'dua_Latn_CM',
                            'dsb': 'dsb_Latn_DE',
                            'doi': 'doi_Arab_IN',
                            'dje': 'dje_Latn_NE',
                            'dgr': 'dgr_Latn_CA',
                            'den': 'den_Latn_CA',
                            'de': 'de_Latn_DE',
                            'dav': 'dav_Latn_KE',
                            'dar': 'dar_Cyrl_RU',
                            'da': 'da_Latn_DK',
                            'cy': 'cy_Latn_GB',
                            'cv': 'cv_Cyrl_RU',
                            'csb': 'csb_Latn_PL',
                            'cs': 'cs_Latn_CZ',
                            'crk': 'crk_Cans_CA',
                            'cr': 'cr_Cans_CA',
                            'co': 'co_Latn_FR',
                            'ckb': 'ckb_Arab_IQ',
                            'cjm': 'cjm_Cham_VN',
                            'cja': 'cja_Arab_KH',
                            'chr': 'chr_Cher_US',
                            'chp': 'chp_Latn_CA',
                            'chm': 'chm_Cyrl_RU',
                            'bft': 'bft_Arab_PK',
                            'und_HU': 'hu_Latn_HU',
                            'und_IC': 'es_Latn_IC',
                            'und_ID': 'id_Latn_ID',
                            'und_IL': 'he_Hebr_IL',
                            'und_IN': 'hi_Deva_IN',
                            'und_IQ': 'ar_Arab_IQ',
                            'und_IR': 'fa_Arab_IR',
                            'und_IS': 'is_Latn_IS',
                            'und_IT': 'it_Latn_IT',
                            'und_Ital': 'ett_Ital_IT',
                            'und_Java': 'jv_Java_ID',
                            'und_JO': 'ar_Arab_JO',
                            'und_JP': 'ja_Jpan_JP',
                            'und_Jpan': 'ja_Jpan_JP',
                            'und_Kali': 'eky_Kali_MM',
                            'und_Kana': 'ja_Kana_JP',
                            'und_KG': 'ky_Cyrl_KG',
                            'und_KH': 'km_Khmr_KH',
                            'und_Khar': 'pra_Khar_PK',
                            'und_Khmr': 'km_Khmr_KH',
                            'und_KM': 'ar_Arab_KM',
                            'und_Knda': 'kn_Knda_IN',
                            'und_Kore': 'ko_Kore_KR',
                            'und_KP': 'ko_Kore_KP',
                            'und_KR': 'ko_Kore_KR',
                            'und_Kthi': 'bh_Kthi_IN',
                            'und_KW': 'ar_Arab_KW',
                            'und_KZ': 'ru_Cyrl_KZ',
                            'und_LA': 'lo_Laoo_LA',
                            'und_Lana': 'nod_Lana_TH',
                            'und_Laoo': 'lo_Laoo_LA',
                            'und_Latn_AF': 'tk_Latn_AF',
                            'und_Latn_AM': 'az_Latn_AM',
                            'und_Latn_BG': 'tr_Latn_BG',
                            'und_Latn_CN': 'za_Latn_CN',
                            'und_Latn_CY': 'tr_Latn_CY',
                            'und_Latn_DZ': 'fr_Latn_DZ',
                            'und_Latn_ET': 'en_Latn_ET',
                            'und_Latn_GE': 'ku_Latn_GE',
                            'und_Latn_GR': 'tr_Latn_GR',
                            'und_Latn_IL': 'ro_Latn_IL',
                            'und_Latn_IR': 'tk_Latn_IR',
                            'und_Latn_KM': 'fr_Latn_KM',
                            'und_Latn_KZ': 'de_Latn_KZ',
                            'und_Latn_LB': 'fr_Latn_LB',
                            'und_Latn_MA': 'fr_Latn_MA',
                            'und_Latn_MK': 'sq_Latn_MK',
                            'und_Latn_MO': 'pt_Latn_MO',
                            'und_Latn_MR': 'fr_Latn_MR',
                            'und_Latn_RU': 'krl_Latn_RU',
                            'und_Latn_SY': 'fr_Latn_SY',
                            'und_Latn_TN': 'fr_Latn_TN',
                            'und_Latn_TW': 'trv_Latn_TW',
                            'und_Latn_UA': 'pl_Latn_UA',
                            'und_LB': 'ar_Arab_LB',
                            'und_Lepc': 'lep_Lepc_IN',
                            'und_LI': 'de_Latn_LI',
                            'und_Limb': 'lif_Limb_IN',
                            'und_Linb': 'grc_Linb_GR',
                            'und_Lisu': 'lis_Lisu_CN',
                            'und_LK': 'si_Sinh_LK',
                            'und_LS': 'st_Latn_LS',
                            'und_LT': 'lt_Latn_LT',
                            'und_LU': 'fr_Latn_LU',
                            'und_LV': 'lv_Latn_LV',
                            'und_LY': 'ar_Arab_LY',
                            'und_Lyci': 'xlc_Lyci_TR',
                            'und_Lydi': 'xld_Lydi_TR',
                            'und_MA': 'ar_Arab_MA',
                            'und_Mand': 'myz_Mand_IR',
                            'und_MC': 'fr_Latn_MC',
                            'und_MD': 'ro_Latn_MD',
                            'und_ME': 'sr_Latn_ME',
                            'und_Merc': 'xmr_Merc_SD',
                            'und_Mero': 'xmr_Mero_SD',
                            'und_MF': 'fr_Latn_MF',
                            'und_MG': 'mg_Latn_MG',
                            'und_MK': 'mk_Cyrl_MK',
                            'und_ML': 'bm_Latn_ML',
                            'und_Mlym': 'ml_Mlym_IN',
                            'und_MM': 'my_Mymr_MM',
                            'und_MN': 'mn_Cyrl_MN',
                            'und_MO': 'zh_Hant_MO',
                            'und_Mong': 'mn_Mong_CN',
                            'und_MQ': 'fr_Latn_MQ',
                            'und_MR': 'ar_Arab_MR',
                            'und_MT': 'mt_Latn_MT',
                            'und_Mtei': 'mni_Mtei_IN',
                            'und_MU': 'mfe_Latn_MU',
                            'und_MV': 'dv_Thaa_MV',
                            'und_MX': 'es_Latn_MX',
                            'und_MY': 'ms_Latn_MY',
                            'und_Mymr': 'my_Mymr_MM',
                            'und_Mymr_IN': 'kht_Mymr_IN',
                            'und_Mymr_TH': 'mnw_Mymr_TH',
                            'und_MZ': 'pt_Latn_MZ',
                            'und_NA': 'af_Latn_NA',
                            'und_NC': 'fr_Latn_NC',
                            'und_NE': 'ha_Latn_NE',
                            'und_NI': 'es_Latn_NI',
                            'und_Nkoo': 'man_Nkoo_GN',
                            'und_NL': 'nl_Latn_NL',
                            'und_NO': 'nb_Latn_NO',
                            'und_NP': 'ne_Deva_NP',
                            'und_Ogam': 'sga_Ogam_IE',
                            'und_Olck': 'sat_Olck_IN',
                            'und_OM': 'ar_Arab_OM',
                            'und_Orkh': 'otk_Orkh_MN',
                            'und_Orya': 'or_Orya_IN',
                            'und_Osma': 'so_Osma_SO',
                            'und_PA': 'es_Latn_PA',
                            'und_PE': 'es_Latn_PE',
                            'und_PF': 'fr_Latn_PF',
                            'und_PG': 'tpi_Latn_PG',
                            'und_PH': 'fil_Latn_PH',
                            'und_Phag': 'lzh_Phag_CN',
                            'und_Phli': 'pal_Phli_IR',
                            'und_Phnx': 'phn_Phnx_LB',
                            'und_PK': 'ur_Arab_PK',
                            'und_PL': 'pl_Latn_PL',
                            'und_Plrd': 'hmd_Plrd_CN',
                            'und_PM': 'fr_Latn_PM',
                            'und_PR': 'es_Latn_PR',
                            'und_Prti': 'xpr_Prti_IR',
                            'und_PS': 'ar_Arab_PS',
                            'und_PT': 'pt_Latn_PT',
                            'und_PW': 'pau_Latn_PW',
                            'und_PY': 'gn_Latn_PY',
                            'und_UY': 'es_Latn_UY',
                            'und_UZ': 'uz_Latn_UZ',
                            'und_VA': 'la_Latn_VA',
                            'und_Vaii': 'vai_Vaii_LR',
                            'und_VE': 'es_Latn_VE',
                            'und_VN': 'vi_Latn_VN',
                            'und_VU': 'bi_Latn_VU',
                            'und_WF': 'fr_Latn_WF',
                            'und_WS': 'sm_Latn_WS',
                            'und_XK': 'sq_Latn_XK',
                            'und_Xpeo': 'peo_Xpeo_IR',
                            'und_Xsux': 'akk_Xsux_IQ',
                            'und_YE': 'ar_Arab_YE',
                            'und_Yiii': 'ii_Yiii_CN',
                            'und_YT': 'fr_Latn_YT',
                            'unr': 'unr_Beng_IN',
                            'unr_Deva': 'unr_Deva_NP',
                            'unr_NP': 'unr_Deva_NP',
                            'unx': 'unx_Beng_IN',
                            'ur': 'ur_Arab_PK',
                            'uz': 'uz_Latn_UZ',
                            'uz_AF': 'uz_Arab_AF',
                            'uz_Arab': 'uz_Arab_AF',
                            'uz_CN': 'uz_Cyrl_CN',
                            'vai': 'vai_Vaii_LR',
                            've': 've_Latn_ZA',
                            'vi': 'vi_Latn_VN',
                            'vo': 'vo_Latn_001',
                            'vun': 'vun_Latn_TZ',
                            'wa': 'wa_Latn_BE',
                            'wae': 'wae_Latn_CH',
                            'wal': 'wal_Ethi_ET',
                            'zh_GF': 'zh_Hant_GF',
                            'zh_Hant': 'zh_Hant_TW',
                            'zh_HK': 'zh_Hant_HK',
                            'zh_ID': 'zh_Hant_ID',
                            'zh_MO': 'zh_Hant_MO',
                            'zh_MY': 'zh_Hant_MY',
                            'zh_PA': 'zh_Hant_PA',
                            'zh_PF': 'zh_Hant_PF',
                            'zza': 'zza_Arab_TR',
                            'zu': 'zu_Latn_ZA',
                            'zh_VN': 'zh_Hant_VN',
                            'zh_US': 'zh_Hant_US',
                            'zh_TW': 'zh_Hant_TW',
                            'zh_TH': 'zh_Hant_TH',
                            'zh_SR': 'zh_Hant_SR',
                            'zh_PH': 'zh_Hant_PH',
                            'zh_GB': 'zh_Hant_GB',
                            'zh_BN': 'zh_Hant_BN',
                            'zh_AU': 'zh_Hant_AU',
                            'zh': 'zh_Hans_CN',
                            'zgh': 'zgh_Tfng_MA',
                            'za': 'za_Latn_CN',
                            'yo': 'yo_Latn_NG',
                            'yi': 'yi_Hebr_UA',
                            'yav': 'yav_Latn_CM',
                            'yap': 'yap_Latn_FM',
                            'yao': 'yao_Latn_MZ',
                            'xsr': 'xsr_Deva_NP',
                            'xog': 'xog_Latn_UG',
                            'xh': 'xh_Latn_ZA',
                            'wo': 'wo_Latn_SN'
                        },
                        'timeData': {
                            'PS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'PR': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'PM': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'PK': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'PG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'OM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'NZ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'NL': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'NG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'NE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'NC': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'NA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MZ': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'MY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MR': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MQ': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'MP': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MO': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ML': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'MH': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ZA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ZM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ZW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'VI': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'VG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'VC': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'US': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'UM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TT': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TR': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'GL': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GH': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GF': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'GD': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GA': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'FR': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'FM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'FJ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'FI': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'ET': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ER': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'EH': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'EG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'EE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'DZ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'DM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'DK': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'DJ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'DE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'CZ': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'CY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'RU': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SB': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SD': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SI': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SJ': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'ST': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SR': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SO': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SM': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'SL': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SK': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'RO': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'RE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'QA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'PW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'PT': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'AE': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'AD': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            '001': {
                                '_preferred': 'H',
                                '_allowed': 'H h'
                            },
                            'AT': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'AU': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'AW': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'AX': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'BB': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BD': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BE': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'BF': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'YT': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'YE': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'WS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'WF': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'VU': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TN': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TG': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'TD': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'TC': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'SZ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'IN': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'IL': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'HR': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'HK': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GW': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'GU': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GR': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'GP': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'GN': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'GM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'AG': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'AL': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'AM': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'AO': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'AS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BH': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BJ': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'BL': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'BM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BN': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BR': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'BS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BT': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'BW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'CA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'CD': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'CI': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'CN': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'CO': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'CP': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'CV': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'IQ': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'IS': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'IT': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'JM': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'JO': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'JP': {
                                '_preferred': 'H',
                                '_allowed': 'H K h'
                            },
                            'KH': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KI': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KN': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KP': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KR': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KW': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'KY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'LB': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'LC': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'LR': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'LS': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'LY': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MA': {
                                '_preferred': 'h',
                                '_allowed': 'H h'
                            },
                            'MC': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'MD': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            },
                            'MF': {
                                '_preferred': 'H',
                                '_allowed': 'H'
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineSupplement(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineSupplement);
                } else {
                    defineSupplement(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ar}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ar', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '\u062A\u0648\u0642\u064A\u062A {0} \u0627\u0644\u0631\u0633\u0645\u064A',
                                'regionFormat-type-daylight': '\u062A\u0648\u0642\u064A\u062A {0} \u0627\u0644\u0635\u064A\u0641\u064A',
                                'regionFormat': '\u062A\u0648\u0642\u064A\u062A {0}',
                                'gmtZeroFormat': '\u062C\u0631\u064A\u0646\u062A\u0634',
                                'gmtFormat': '\u062C\u0631\u064A\u0646\u062A\u0634{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0623\u063A\u0633\u0637\u0633',
                                                '7': '\u064A\u0648\u0644\u064A\u0648',
                                                '6': '\u064A\u0648\u0646\u064A\u0648',
                                                '5': '\u0645\u0627\u064A\u0648',
                                                '12': '\u062F\u064A\u0633\u0645\u0628\u0631',
                                                '11': '\u0646\u0648\u0641\u0645\u0628\u0631',
                                                '10': '\u0623\u0643\u062A\u0648\u0628\u0631',
                                                '9': '\u0633\u0628\u062A\u0645\u0628\u0631',
                                                '1': '\u064A\u0646\u0627\u064A\u0631',
                                                '2': '\u0641\u0628\u0631\u0627\u064A\u0631',
                                                '3': '\u0645\u0627\u0631\u0633',
                                                '4': '\u0623\u0628\u0631\u064A\u0644'
                                            },
                                            'narrow': {
                                                '8': '\u063A',
                                                '7': '\u0644',
                                                '6': '\u0646',
                                                '5': '\u0648',
                                                '12': '\u062F',
                                                '11': '\u0628',
                                                '10': '\u0643',
                                                '9': '\u0633',
                                                '1': '\u064A',
                                                '2': '\u0641',
                                                '3': '\u0645',
                                                '4': '\u0623'
                                            },
                                            'wide': {
                                                '8': '\u0623\u063A\u0633\u0637\u0633',
                                                '7': '\u064A\u0648\u0644\u064A\u0648',
                                                '6': '\u064A\u0648\u0646\u064A\u0648',
                                                '5': '\u0645\u0627\u064A\u0648',
                                                '12': '\u062F\u064A\u0633\u0645\u0628\u0631',
                                                '11': '\u0646\u0648\u0641\u0645\u0628\u0631',
                                                '10': '\u0623\u0643\u062A\u0648\u0628\u0631',
                                                '9': '\u0633\u0628\u062A\u0645\u0628\u0631',
                                                '1': '\u064A\u0646\u0627\u064A\u0631',
                                                '2': '\u0641\u0628\u0631\u0627\u064A\u0631',
                                                '3': '\u0645\u0627\u0631\u0633',
                                                '4': '\u0623\u0628\u0631\u064A\u0644'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0623\u063A\u0633\u0637\u0633',
                                                '7': '\u064A\u0648\u0644\u064A\u0648',
                                                '6': '\u064A\u0648\u0646\u064A\u0648',
                                                '5': '\u0645\u0627\u064A\u0648',
                                                '12': '\u062F\u064A\u0633\u0645\u0628\u0631',
                                                '11': '\u0646\u0648\u0641\u0645\u0628\u0631',
                                                '10': '\u0623\u0643\u062A\u0648\u0628\u0631',
                                                '9': '\u0633\u0628\u062A\u0645\u0628\u0631',
                                                '1': '\u064A\u0646\u0627\u064A\u0631',
                                                '2': '\u0641\u0628\u0631\u0627\u064A\u0631',
                                                '3': '\u0645\u0627\u0631\u0633',
                                                '4': '\u0623\u0628\u0631\u064A\u0644'
                                            },
                                            'narrow': {
                                                '8': '\u063A',
                                                '7': '\u0644',
                                                '6': '\u0646',
                                                '5': '\u0648',
                                                '12': '\u062F',
                                                '11': '\u0628',
                                                '10': '\u0643',
                                                '9': '\u0633',
                                                '1': '\u064A',
                                                '2': '\u0641',
                                                '3': '\u0645',
                                                '4': '\u0623'
                                            },
                                            'wide': {
                                                '8': '\u0623\u063A\u0633\u0637\u0633',
                                                '7': '\u064A\u0648\u0644\u064A\u0648',
                                                '6': '\u064A\u0648\u0646\u064A\u0648',
                                                '5': '\u0645\u0627\u064A\u0648',
                                                '12': '\u062F\u064A\u0633\u0645\u0628\u0631',
                                                '11': '\u0646\u0648\u0641\u0645\u0628\u0631',
                                                '10': '\u0623\u0643\u062A\u0648\u0628\u0631',
                                                '9': '\u0633\u0628\u062A\u0645\u0628\u0631',
                                                '1': '\u064A\u0646\u0627\u064A\u0631',
                                                '2': '\u0641\u0628\u0631\u0627\u064A\u0631',
                                                '3': '\u0645\u0627\u0631\u0633',
                                                '4': '\u0623\u0628\u0631\u064A\u0644'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            },
                                            'narrow': {
                                                'sun': '\u062D',
                                                'mon': '\u0646',
                                                'tue': '\u062B',
                                                'wed': '\u0631',
                                                'thu': '\u062E',
                                                'fri': '\u062C',
                                                'sat': '\u0633'
                                            },
                                            'short': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            },
                                            'wide': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            },
                                            'narrow': {
                                                'sun': '\u062D',
                                                'mon': '\u0646',
                                                'tue': '\u062B',
                                                'wed': '\u0631',
                                                'thu': '\u062E',
                                                'fri': '\u062C',
                                                'sat': '\u0633'
                                            },
                                            'short': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            },
                                            'wide': {
                                                'sun': '\u0627\u0644\u0623\u062D\u062F',
                                                'mon': '\u0627\u0644\u0627\u062B\u0646\u064A\u0646',
                                                'tue': '\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621',
                                                'wed': '\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621',
                                                'thu': '\u0627\u0644\u062E\u0645\u064A\u0633',
                                                'fri': '\u0627\u0644\u062C\u0645\u0639\u0629',
                                                'sat': '\u0627\u0644\u0633\u0628\u062A'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644',
                                                '2': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A',
                                                '3': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B',
                                                '4': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639'
                                            },
                                            'narrow': {
                                                '1': '\u0661',
                                                '2': '\u0662',
                                                '3': '\u0663',
                                                '4': '\u0664'
                                            },
                                            'wide': {
                                                '1': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644',
                                                '2': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A',
                                                '3': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B',
                                                '4': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644',
                                                '2': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A',
                                                '3': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B',
                                                '4': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639'
                                            },
                                            'narrow': {
                                                '1': '\u0661',
                                                '2': '\u0662',
                                                '3': '\u0663',
                                                '4': '\u0664'
                                            },
                                            'wide': {
                                                '1': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644',
                                                '2': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A',
                                                '3': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B',
                                                '4': '\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            },
                                            'narrow': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            },
                                            'wide': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            },
                                            'narrow': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            },
                                            'wide': {
                                                'am': '\u0635',
                                                'pm': '\u0645'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0645\u064A\u0644\u0627\u062F\u064A',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u0642.\u0645',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0645',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u0642.\u0645',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0645',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE\u060C d MMMM\u060C y',
                                        'long': 'd MMMM\u060C y',
                                        'medium': 'dd\u200F/MM\u200F/y',
                                        'short': 'd\u200F/M\u200F/y'
                                    },
                                    'timeFormats': {
                                        'full': 'h:mm:ss a zzzz',
                                        'long': 'h:mm:ss a z',
                                        'medium': 'h:mm:ss a',
                                        'short': 'h:mm a'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'MMM y',
                                            'yMM': 'MM\u200F/y',
                                            'yMEd': 'E\u060C d/\u200FM/\u200Fy',
                                            'yMd': 'd\u200F/M\u200F/y',
                                            'yM': 'M\u200F/y',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E\u060C d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM\u060C y G',
                                            'GyMMMEd': 'E\u060C d MMM\u060C y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'h:mm a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E\u060C d MMM\u060C y',
                                            'yMMMd': 'd MMM\u060C y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd/\u200FM',
                                            'MEd': 'E\u060C d/M',
                                            'MMdd': 'dd\u200F/MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E\u060C d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E\u060C d MMMM',
                                            'ms': 'mm:ss',
                                            'y': 'y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E\u060C d \u2013 E\u060C d MMM',
                                                'M': 'E\u060C d MMM \u2013 E\u060C d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E\u060C d/\u200FM \u2013\u200F E\u060C d/\u200FM',
                                                'M': 'E\u060C d/\u200FM \u2013 E\u060C d/\u200FM'
                                            },
                                            'Md': {
                                                'd': 'M/d \u2013 M/d',
                                                'M': 'M/d \u2013 M/d'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}',
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M\u200F/y \u2013 M\u200F/y',
                                                'y': 'M\u200F/y \u2013 M\u200F/y'
                                            },
                                            'yMd': {
                                                'd': 'd\u200F/M\u200F/y \u2013 d\u200F/M\u200F/y',
                                                'M': 'd\u200F/M\u200F/y \u2013 d\u200F/M\u200F/y',
                                                'y': 'd\u200F/M\u200F/y \u2013 d\u200F/M\u200F/y'
                                            },
                                            'yMEd': {
                                                'd': 'E\u060C dd\u200F/MM\u200F/y \u2013 E\u060C dd\u200F/MM\u200F/y',
                                                'M': 'E\u060C d\u200F/M\u200F/y \u2013 E\u060C d\u200F/M\u200F/y',
                                                'y': 'E\u060C d\u200F/M\u200F/y \u2013 E\u060C d\u200F/M\u200F/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM \u2013 MMM\u060C y',
                                                'y': 'MMM\u060C y \u2013 MMM\u060C y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM\u060C y',
                                                'M': 'd MMM \u2013 d MMM\u060C y',
                                                'y': 'd MMM\u060C y \u2013 d MMM\u060C y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E\u060C d \u2013 E\u060C d MMM\u060C y',
                                                'M': 'E\u060C d MMM \u2013 E\u060C d MMM\u060C y',
                                                'y': 'E\u060C d MMM\u060C y \u2013 E\u060C d MMM\u060C y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM \u2013 MMMM\u060C y',
                                                'y': 'MMMM\u060C y \u2013 MMMM\u060C y'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL\u2013LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ca}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ca', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Hora est\u00E0ndard, {0}',
                                'regionFormat-type-daylight': 'Horari d\'estiu, {0}',
                                'regionFormat': 'Hora de: {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'ag.',
                                                '7': 'jul.',
                                                '6': 'juny',
                                                '5': 'maig',
                                                '12': 'des.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'set.',
                                                '1': 'gen.',
                                                '2': 'feb.',
                                                '3': 'mar\u00E7',
                                                '4': 'abr.'
                                            },
                                            'narrow': {
                                                '8': 'AG',
                                                '7': 'JL',
                                                '6': 'JN',
                                                '5': 'MG',
                                                '12': 'DS',
                                                '11': 'NV',
                                                '10': 'OC',
                                                '9': 'ST',
                                                '1': 'GN',
                                                '2': 'FB',
                                                '3': 'M\u00C7',
                                                '4': 'AB'
                                            },
                                            'wide': {
                                                '8': 'agost',
                                                '7': 'juliol',
                                                '6': 'juny',
                                                '5': 'maig',
                                                '12': 'desembre',
                                                '11': 'novembre',
                                                '10': 'octubre',
                                                '9': 'setembre',
                                                '1': 'gener',
                                                '2': 'febrer',
                                                '3': 'mar\u00E7',
                                                '4': 'abril'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'ag.',
                                                '7': 'jul.',
                                                '6': 'juny',
                                                '5': 'maig',
                                                '12': 'des.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'set.',
                                                '1': 'gen.',
                                                '2': 'feb.',
                                                '3': 'mar\u00E7',
                                                '4': 'abr.'
                                            },
                                            'narrow': {
                                                '8': 'AG',
                                                '7': 'JL',
                                                '6': 'JN',
                                                '5': 'MG',
                                                '12': 'DS',
                                                '11': 'NV',
                                                '10': 'OC',
                                                '9': 'ST',
                                                '1': 'GN',
                                                '2': 'FB',
                                                '3': 'M\u00C7',
                                                '4': 'AB'
                                            },
                                            'wide': {
                                                '8': 'agost',
                                                '7': 'juliol',
                                                '6': 'juny',
                                                '5': 'maig',
                                                '12': 'desembre',
                                                '11': 'novembre',
                                                '10': 'octubre',
                                                '9': 'setembre',
                                                '1': 'gener',
                                                '2': 'febrer',
                                                '3': 'mar\u00E7',
                                                '4': 'abril'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dg.',
                                                'mon': 'dl.',
                                                'tue': 'dt.',
                                                'wed': 'dc.',
                                                'thu': 'dj.',
                                                'fri': 'dv.',
                                                'sat': 'ds.'
                                            },
                                            'narrow': {
                                                'sun': 'dg',
                                                'mon': 'dl',
                                                'tue': 'dt',
                                                'wed': 'dc',
                                                'thu': 'dj',
                                                'fri': 'dv',
                                                'sat': 'ds'
                                            },
                                            'short': {
                                                'sun': 'dg.',
                                                'mon': 'dl.',
                                                'tue': 'dt.',
                                                'wed': 'dc.',
                                                'thu': 'dj.',
                                                'fri': 'dv.',
                                                'sat': 'ds.'
                                            },
                                            'wide': {
                                                'sun': 'diumenge',
                                                'mon': 'dilluns',
                                                'tue': 'dimarts',
                                                'wed': 'dimecres',
                                                'thu': 'dijous',
                                                'fri': 'divendres',
                                                'sat': 'dissabte'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'dg.',
                                                'mon': 'dl.',
                                                'tue': 'dt.',
                                                'wed': 'dc.',
                                                'thu': 'dj.',
                                                'fri': 'dv.',
                                                'sat': 'ds.'
                                            },
                                            'narrow': {
                                                'sun': 'dg',
                                                'mon': 'dl',
                                                'tue': 'dt',
                                                'wed': 'dc',
                                                'thu': 'dj',
                                                'fri': 'dv',
                                                'sat': 'ds'
                                            },
                                            'short': {
                                                'sun': 'dg.',
                                                'mon': 'dl.',
                                                'tue': 'dm.',
                                                'wed': 'dc.',
                                                'thu': 'dj.',
                                                'fri': 'dv.',
                                                'sat': 'ds.'
                                            },
                                            'wide': {
                                                'sun': 'diumenge',
                                                'mon': 'dilluns',
                                                'tue': 'dimarts',
                                                'wed': 'dimecres',
                                                'thu': 'dijous',
                                                'fri': 'divendres',
                                                'sat': 'dissabte'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1T',
                                                '2': '2T',
                                                '3': '3T',
                                                '4': '4T'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1r trimestre',
                                                '2': '2n trimestre',
                                                '3': '3r trimestre',
                                                '4': '4t trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1T',
                                                '2': '2T',
                                                '3': '3T',
                                                '4': '4T'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1r trimestre',
                                                '2': '2n trimestre',
                                                '3': '3r trimestre',
                                                '4': '4t trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'abans de Crist',
                                            '0-alt-variant': 'a. de la n. e.',
                                            '1': 'despr\u00E9s de Crist',
                                            '1-alt-variant': 'de la n. e.'
                                        },
                                        'eraAbbr': {
                                            '0': 'aC',
                                            '0-alt-variant': 'a. de la n. e.',
                                            '1': 'dC',
                                            '1-alt-variant': 'de la n.e.'
                                        },
                                        'eraNarrow': {
                                            '0': 'aC',
                                            '0-alt-variant': 'a. de la n. e.',
                                            '1': 'dC',
                                            '1-alt-variant': 'de la n.e.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM \'de\' y',
                                        'long': 'd MMMM \'de\' y',
                                        'medium': 'dd/MM/y',
                                        'short': 'd/M/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'H.mm.ss zzzz',
                                        'long': 'H.mm.ss z',
                                        'medium': 'H.mm.ss',
                                        'short': 'H.mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMd': 'd MMM y',
                                            'yMMM': 'LLL y',
                                            'yMEd': 'E, d/M/y',
                                            'yMd': 'd/M/y',
                                            'EHm': 'E H:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E, d MMM, y G',
                                            'GyMMMM': 'LLLL \'de\' y G',
                                            'h': 'h a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'LLLL \'de\' y',
                                            'yMMMEd': 'E, d MMM, y',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'H',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E H:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLL y G',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E d MMMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M/y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d - E d MMM',
                                                'M': 'E d MMM - E d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL-LLL'
                                            },
                                            'MEd': {
                                                'd': 'E dd/MM - E dd/MM',
                                                'M': 'E dd/MM - E dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'H-H v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd/MM/y - E dd/MM/y',
                                                'M': 'E dd/MM/y - E dd/MM/y',
                                                'y': 'E dd/MM/y - E dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL-LLL \'de\' y',
                                                'y': 'LLL \'de\' y - LLL \'de\' y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM \'de\' y',
                                                'M': 'd MMM - d MMM \'de\' y',
                                                'y': 'd MMM \'de\' y - d MMM \'de\' y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d - E d MMM \'de\' y',
                                                'M': 'E d MMM - E d MMM \'de\' y',
                                                'y': 'E d MMM \'de\' y - E d MMM \'de\' y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL-LLLL \'de\' y',
                                                'y': 'LLLL \'de\' y - LLLL \'de\' y'
                                            },
                                            'Hmv': {
                                                'H': 'HH.mm-HH.mm v',
                                                'm': 'HH.mm-HH.mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH.mm-HH.mm',
                                                'm': 'HH.mm-HH.mm'
                                            },
                                            'hm': {
                                                'a': 'h.mm a -h.mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'H-H'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate cs}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9298
             * timeZoneNames: 24r9298
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('cs', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': '\u010Casov\u00E9 p\u00E1smo {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+H:mm;-H:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'srp',
                                                '7': '\u010Dvc',
                                                '6': '\u010Dvn',
                                                '5': 'kv\u011B',
                                                '12': 'pro',
                                                '11': 'lis',
                                                '10': '\u0159\u00EDj',
                                                '9': 'z\u00E1\u0159',
                                                '1': 'led',
                                                '2': '\u00FAno',
                                                '3': 'b\u0159e',
                                                '4': 'dub'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': 'srpna',
                                                '7': '\u010Dervence',
                                                '6': '\u010Dervna',
                                                '5': 'kv\u011Btna',
                                                '12': 'prosince',
                                                '11': 'listopadu',
                                                '10': '\u0159\u00EDjna',
                                                '9': 'z\u00E1\u0159\u00ED',
                                                '1': 'ledna',
                                                '2': '\u00FAnora',
                                                '3': 'b\u0159ezna',
                                                '4': 'dubna'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'srp',
                                                '7': '\u010Dvc',
                                                '6': '\u010Dvn',
                                                '5': 'kv\u011B',
                                                '12': 'pro',
                                                '11': 'lis',
                                                '10': '\u0159\u00EDj',
                                                '9': 'z\u00E1\u0159',
                                                '1': 'led',
                                                '2': '\u00FAno',
                                                '3': 'b\u0159e',
                                                '4': 'dub'
                                            },
                                            'narrow': {
                                                '8': 's',
                                                '7': '\u010D',
                                                '6': '\u010D',
                                                '5': 'k',
                                                '12': 'p',
                                                '11': 'l',
                                                '10': '\u0159',
                                                '9': 'z',
                                                '1': 'l',
                                                '2': '\u00FA',
                                                '3': 'b',
                                                '4': 'd'
                                            },
                                            'wide': {
                                                '8': 'srpen',
                                                '7': '\u010Dervenec',
                                                '6': '\u010Derven',
                                                '5': 'kv\u011Bten',
                                                '12': 'prosinec',
                                                '11': 'listopad',
                                                '10': '\u0159\u00EDjen',
                                                '9': 'z\u00E1\u0159\u00ED',
                                                '1': 'leden',
                                                '2': '\u00FAnor',
                                                '3': 'b\u0159ezen',
                                                '4': 'duben'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': '\u00FAt',
                                                'wed': 'st',
                                                'thu': '\u010Dt',
                                                'fri': 'p\u00E1',
                                                'sat': 'so'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': '\u00DA',
                                                'wed': 'S',
                                                'thu': '\u010C',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': '\u00FAt',
                                                'wed': 'st',
                                                'thu': '\u010Dt',
                                                'fri': 'p\u00E1',
                                                'sat': 'so'
                                            },
                                            'wide': {
                                                'sun': 'ned\u011Ble',
                                                'mon': 'pond\u011Bl\u00ED',
                                                'tue': '\u00FAter\u00FD',
                                                'wed': 'st\u0159eda',
                                                'thu': '\u010Dtvrtek',
                                                'fri': 'p\u00E1tek',
                                                'sat': 'sobota'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': '\u00FAt',
                                                'wed': 'st',
                                                'thu': '\u010Dt',
                                                'fri': 'p\u00E1',
                                                'sat': 'so'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': '\u00DA',
                                                'wed': 'S',
                                                'thu': '\u010C',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': '\u00FAt',
                                                'wed': 'st',
                                                'thu': '\u010Dt',
                                                'fri': 'p\u00E1',
                                                'sat': 'so'
                                            },
                                            'wide': {
                                                'sun': 'ned\u011Ble',
                                                'mon': 'pond\u011Bl\u00ED',
                                                'tue': '\u00FAter\u00FD',
                                                'wed': 'st\u0159eda',
                                                'thu': '\u010Dtvrtek',
                                                'fri': 'p\u00E1tek',
                                                'sat': 'sobota'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u010Dtvrtlet\u00ED',
                                                '2': '2. \u010Dtvrtlet\u00ED',
                                                '3': '3. \u010Dtvrtlet\u00ED',
                                                '4': '4. \u010Dtvrtlet\u00ED'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u010Dtvrtlet\u00ED',
                                                '2': '2. \u010Dtvrtlet\u00ED',
                                                '3': '3. \u010Dtvrtlet\u00ED',
                                                '4': '4. \u010Dtvrtlet\u00ED'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'p\u0159. n. l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n. l.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'p\u0159. n. l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n. l.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'p\u0159.n.l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.l.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE d. MMMM y',
                                        'long': 'd. MMMM y',
                                        'medium': 'd. M. y',
                                        'short': 'dd.MM.yy'
                                    },
                                    'timeFormats': {
                                        'full': 'H:mm:ss zzzz',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'LLLL y',
                                            'yMEd': 'E d. M. y',
                                            'yMd': 'd. M. y',
                                            'yM': 'M/y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMMEd': 'E d. MMMM',
                                            'd': 'd.',
                                            'GyMMMd': 'd. M. y G',
                                            'GyMMMEd': 'E d. M. y G',
                                            'GyMMMMd': 'd. MMMM y G',
                                            'GyMMMMEd': 'E d. MMMM y G',
                                            'h': 'h a',
                                            'H': 'H',
                                            'hm': 'h:mm a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMMEd': 'E d. MMMM y',
                                            'yMMMMd': 'd. MMMM y',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E d. M. y',
                                            'yMMMd': 'd. M. y',
                                            'Hm': 'H:mm',
                                            'Ed': 'E d.',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E H:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E H:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLLL y G',
                                            'hms': 'h:mm:ss a',
                                            'Hms': 'H:mm:ss',
                                            'M': 'L',
                                            'Md': 'd. M.',
                                            'MEd': 'E d. M.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. M.',
                                            'MMMEd': 'E d. M.',
                                            'MMMMd': 'd. MMMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d. M. \u2013 E d. M.',
                                                'M': 'E d. M. \u2013 E d. M.'
                                            },
                                            'MMMd': {
                                                'd': 'd.\u2013d. M.',
                                                'M': 'd. M. \u2013 d. M.'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E d. M. \u2013 E d. M.',
                                                'M': 'E d. M. \u2013 E d. M.'
                                            },
                                            'Md': {
                                                'd': 'd. M. \u2013 d. M.',
                                                'M': 'd. M. \u2013 d. M.'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'H\u2013H v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M/y \u2013 M/y',
                                                'y': 'M/y \u2013 M/y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y \u2013 dd.MM.y',
                                                'M': 'dd.MM.y \u2013 dd.MM.y',
                                                'y': 'dd.MM.y \u2013 dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd.MM.y \u2013 E dd.MM.y',
                                                'M': 'E dd.MM.y \u2013 E dd.MM.y',
                                                'y': 'E dd.MM.y \u2013 E dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.\u2013d. M. y',
                                                'M': 'd. M. \u2013 d. M. y',
                                                'y': 'd. M. y \u2013 d. M. y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d. M. \u2013 E d. M. y',
                                                'M': 'E d. M. \u2013 E d. M. y',
                                                'y': 'E d. M. y \u2013 E d. M. y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL\u2013LLLL y',
                                                'y': 'LLLL y \u2013 LLLL y'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm\u2013H:mm v',
                                                'm': 'H:mm\u2013H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm\u2013H:mm',
                                                'm': 'H:mm\u2013H:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'H\u2013H'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd.\u2013d.'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate da}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('da', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': 'Tidszone for {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH.mm;-HH.mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'jul.',
                                                '6': 'jun.',
                                                '5': 'maj',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'sep.',
                                                '1': 'jan.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'maj',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'marts',
                                                '4': 'april'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'maj',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'maj',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'marts',
                                                '4': 'april'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 's\u00F8n.',
                                                'mon': 'man.',
                                                'tue': 'tir.',
                                                'wed': 'ons.',
                                                'thu': 'tor.',
                                                'fri': 'fre.',
                                                'sat': 'l\u00F8r.'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 's\u00F8',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'on',
                                                'thu': 'to',
                                                'fri': 'fr',
                                                'sat': 'l\u00F8'
                                            },
                                            'wide': {
                                                'sun': 's\u00F8ndag',
                                                'mon': 'mandag',
                                                'tue': 'tirsdag',
                                                'wed': 'onsdag',
                                                'thu': 'torsdag',
                                                'fri': 'fredag',
                                                'sat': 'l\u00F8rdag'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 's\u00F8n',
                                                'mon': 'man',
                                                'tue': 'tir',
                                                'wed': 'ons',
                                                'thu': 'tor',
                                                'fri': 'fre',
                                                'sat': 'l\u00F8r'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 's\u00F8',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'on',
                                                'thu': 'to',
                                                'fri': 'fr',
                                                'sat': 'l\u00F8'
                                            },
                                            'wide': {
                                                'sun': 's\u00F8ndag',
                                                'mon': 'mandag',
                                                'tue': 'tirsdag',
                                                'wed': 'onsdag',
                                                'thu': 'torsdag',
                                                'fri': 'fredag',
                                                'sat': 'l\u00F8rdag'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'noon': 'middag',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'noon': 'middag',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'noon': 'middag',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'noon': 'middag',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'noon': 'middag',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'formiddag',
                                                'noon': 'middag',
                                                'pm': 'eftermiddag'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'f\u00F8r vesterlandsk tidsregning',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'vesterlandsk tidsregning'
                                        },
                                        'eraAbbr': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'f.v.t.',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'v.t.'
                                        },
                                        'eraNarrow': {
                                            '0': 'fKr',
                                            '0-alt-variant': 'fvt',
                                            '1': 'eKr',
                                            '1-alt-variant': 'vt'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE \'den\' d. MMMM y',
                                        'long': 'd. MMM y',
                                        'medium': 'dd/MM/y',
                                        'short': 'dd/MM/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH.mm.ss zzzz',
                                        'long': 'HH.mm.ss z',
                                        'medium': 'HH.mm.ss',
                                        'short': 'HH.mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \'kl.\' {0}',
                                        'long': '{1} \'kl.\' {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMd': 'd. MMM y',
                                            'yMMM': 'MMM y',
                                            'yMM': 'MM/y',
                                            'Ehms': 'E h.mm.ss a',
                                            'EHm': 'E HH.mm',
                                            'Ehm': 'E h.mm a',
                                            'Ed': 'E \'d\'. d.',
                                            'd': 'd.',
                                            'GyMMMd': 'd. MMM y G',
                                            'GyMMMEd': 'E d. MMM y G',
                                            'h': 'h a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMEd': 'E d. MMM y',
                                            'Hms': 'HH.mm.ss',
                                            'hms': 'h.mm.ss a',
                                            'Hm': 'HH.mm',
                                            'hm': 'h.mm a',
                                            'H': 'HH',
                                            'EHms': 'E HH.mm.ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'M',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMdd': 'dd/MM',
                                            'MMM': 'MMM',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'E d. MMM',
                                            'MMMMEd': 'E d. MMMM',
                                            'ms': 'mm.ss',
                                            'y': 'y',
                                            'yM': 'M/y',
                                            'yMd': 'd/M/y',
                                            'yMEd': 'E d/M/y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E \'den\' d. \u2013 E \'den\' d. MMM',
                                                'M': 'E \'den\' d. MMM \u2013 E \'den\' d. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd.\u2013d. MMM',
                                                'M': 'd. MMM \u2013 d. MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E dd/MM \u2013 E dd/MM',
                                                'M': 'E dd/MM \u2013 E dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM \u2013 dd/MM',
                                                'M': 'dd/MM \u2013 dd/MM'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM/y \u2013 MM/y',
                                                'y': 'MM/y \u2013 MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y \u2013 dd/MM/y',
                                                'M': 'dd/MM/y \u2013 dd/MM/y',
                                                'y': 'dd/MM/y \u2013 dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd/MM/y \u2013 E dd/MM/y',
                                                'M': 'E dd/MM/y \u2013 E dd/MM/y',
                                                'y': 'E dd/MM/y \u2013 E dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.\u2013d. MMM y',
                                                'M': 'd. MMM \u2013 d. MMM y',
                                                'y': 'd. MMM y \u2013 d. MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E \'den\' d. \u2013 E \'den\' d. MMM y',
                                                'M': 'E \'den\' d. MMM \u2013 E \'den\' d. MMM y',
                                                'y': 'E \'den\' d. MMM y \u2013 E \'den\' d. MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH.mm\u2013HH.mm v',
                                                'm': 'HH.mm\u2013HH.mm v'
                                            },
                                            'hmv': {
                                                'a': 'h.mm a \u2013 h.mm a v',
                                                'h': 'h.mm\u2013h.mm a v',
                                                'm': 'h.mm\u2013h.mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH.mm\u2013HH.mm',
                                                'm': 'HH.mm\u2013HH.mm'
                                            },
                                            'hm': {
                                                'a': 'h.mm a \u2013 h.mm a',
                                                'h': 'h.mm\u2013h.mm a',
                                                'm': 'h.mm\u2013h.mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd.\u2013d.'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate de}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('de', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} Normalzeit',
                                'regionFormat-type-daylight': '{0} Sommerzeit',
                                'regionFormat': '{0} Zeit',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'Aug.',
                                                '7': 'Juli',
                                                '6': 'Juni',
                                                '5': 'Mai',
                                                '12': 'Dez.',
                                                '11': 'Nov.',
                                                '10': 'Okt.',
                                                '9': 'Sep.',
                                                '1': 'Jan.',
                                                '2': 'Feb.',
                                                '3': 'M\u00E4rz',
                                                '4': 'Apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'August',
                                                '7': 'Juli',
                                                '6': 'Juni',
                                                '5': 'Mai',
                                                '12': 'Dezember',
                                                '11': 'November',
                                                '10': 'Oktober',
                                                '9': 'September',
                                                '1': 'Januar',
                                                '2': 'Februar',
                                                '3': 'M\u00E4rz',
                                                '4': 'April'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Aug',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'Mai',
                                                '12': 'Dez',
                                                '11': 'Nov',
                                                '10': 'Okt',
                                                '9': 'Sep',
                                                '1': 'Jan',
                                                '2': 'Feb',
                                                '3': 'M\u00E4r',
                                                '4': 'Apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'August',
                                                '7': 'Juli',
                                                '6': 'Juni',
                                                '5': 'Mai',
                                                '12': 'Dezember',
                                                '11': 'November',
                                                '10': 'Oktober',
                                                '9': 'September',
                                                '1': 'Januar',
                                                '2': 'Februar',
                                                '3': 'M\u00E4rz',
                                                '4': 'April'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'So.',
                                                'mon': 'Mo.',
                                                'tue': 'Di.',
                                                'wed': 'Mi.',
                                                'thu': 'Do.',
                                                'fri': 'Fr.',
                                                'sat': 'Sa.'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'D',
                                                'wed': 'M',
                                                'thu': 'D',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'So.',
                                                'mon': 'Mo.',
                                                'tue': 'Di.',
                                                'wed': 'Mi.',
                                                'thu': 'Do.',
                                                'fri': 'Fr.',
                                                'sat': 'Sa.'
                                            },
                                            'wide': {
                                                'sun': 'Sonntag',
                                                'mon': 'Montag',
                                                'tue': 'Dienstag',
                                                'wed': 'Mittwoch',
                                                'thu': 'Donnerstag',
                                                'fri': 'Freitag',
                                                'sat': 'Samstag'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'So',
                                                'mon': 'Mo',
                                                'tue': 'Di',
                                                'wed': 'Mi',
                                                'thu': 'Do',
                                                'fri': 'Fr',
                                                'sat': 'Sa'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'D',
                                                'wed': 'M',
                                                'thu': 'D',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'So.',
                                                'mon': 'Mo.',
                                                'tue': 'Di.',
                                                'wed': 'Mi.',
                                                'thu': 'Do.',
                                                'fri': 'Fr.',
                                                'sat': 'Sa.'
                                            },
                                            'wide': {
                                                'sun': 'Sonntag',
                                                'mon': 'Montag',
                                                'tue': 'Dienstag',
                                                'wed': 'Mittwoch',
                                                'thu': 'Donnerstag',
                                                'fri': 'Freitag',
                                                'sat': 'Samstag'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. Quartal',
                                                '2': '2. Quartal',
                                                '3': '3. Quartal',
                                                '4': '4. Quartal'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. Quartal',
                                                '2': '2. Quartal',
                                                '3': '3. Quartal',
                                                '4': '4. Quartal'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': 'nachmittags',
                                                'am': 'vorm.',
                                                'earlyMorning': 'morgens',
                                                'evening': 'abends',
                                                'morning': 'vormittags',
                                                'night': 'nachts',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            },
                                            'narrow': {
                                                'afternoon': 'nachmittags',
                                                'am': 'vorm.',
                                                'earlyMorning': 'morgens',
                                                'evening': 'abends',
                                                'morning': 'vormittags',
                                                'night': 'nachts',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            },
                                            'wide': {
                                                'afternoon': 'nachmittags',
                                                'am': 'vorm.',
                                                'earlyMorning': 'morgens',
                                                'evening': 'abends',
                                                'morning': 'vormittags',
                                                'night': 'nachts',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': 'nachmittags',
                                                'am': 'vorm.',
                                                'earlyMorning': 'morgens',
                                                'evening': 'abends',
                                                'morning': 'vormittags',
                                                'night': 'nachts',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            },
                                            'narrow': {
                                                'afternoon': 'nachmittags',
                                                'am': 'vorm.',
                                                'earlyMorning': 'morgens',
                                                'evening': 'abends',
                                                'morning': 'vormittags',
                                                'night': 'nachts',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            },
                                            'wide': {
                                                'afternoon': 'Nachmittag',
                                                'am': 'vorm.',
                                                'earlyMorning': 'Morgen',
                                                'evening': 'Abend',
                                                'morning': 'Vormittag',
                                                'night': 'Nacht',
                                                'noon': 'Mittag',
                                                'pm': 'nachm.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'v. Chr.',
                                            '0-alt-variant': 'vor der gew\u00F6hnlichen Zeitrechnung',
                                            '1': 'n. Chr.',
                                            '1-alt-variant': 'der gew\u00F6hnlichen Zeitrechnung'
                                        },
                                        'eraAbbr': {
                                            '0': 'v. Chr.',
                                            '0-alt-variant': 'v. u. Z.',
                                            '1': 'n. Chr.',
                                            '1-alt-variant': 'u. Z.'
                                        },
                                        'eraNarrow': {
                                            '0': 'v. Chr.',
                                            '0-alt-variant': 'vdZ',
                                            '1': 'n. Chr.',
                                            '1-alt-variant': 'dZ'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d. MMMM y',
                                        'long': 'd. MMMM y',
                                        'medium': 'dd.MM.y',
                                        'short': 'dd.MM.yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMM': 'MM.y',
                                            'yMEd': 'E, d.M.y',
                                            'yMd': 'd.M.y',
                                            'yM': 'M.y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMMEd': 'E, d. MMMM',
                                            'd': 'd',
                                            'GyMMMd': 'd. MMM y G',
                                            'GyMMMEd': 'E, d. MMM y G',
                                            'h': 'h a',
                                            'H': 'HH \'Uhr\'',
                                            'hm': 'h:mm a',
                                            'Hm': 'HH:mm',
                                            'hms': 'h:mm:ss a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, d. MMM y',
                                            'yMMMd': 'd. MMM y',
                                            'yMMM': 'MMM y',
                                            'yMMdd': 'dd.MM.y',
                                            'Hms': 'HH:mm:ss',
                                            'Ed': 'E, d.',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E, HH:mm',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd.M.',
                                            'MEd': 'E, d.M.',
                                            'MMd': 'd.MM.',
                                            'MMdd': 'dd.MM.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'E, d. MMM',
                                            'MMMMdd': 'dd. MMMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d. - E, d. MMM',
                                                'M': 'E, d. MMM - E, d. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd.-d. MMM',
                                                'M': 'd. MMM - d. MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM. - E, dd.MM.',
                                                'M': 'E, dd.MM. - E, dd.MM.'
                                            },
                                            'Md': {
                                                'd': 'dd.MM. - dd.MM.',
                                                'M': 'dd.MM. - dd.MM.'
                                            },
                                            'M': {
                                                'M': 'M.-M.'
                                            },
                                            'Hv': {
                                                'H': 'HH-HH \'Uhr\' v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'intervalFormatFallback': '{0} - {1}',
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM.y - MM.y',
                                                'y': 'MM.y - MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y - dd.MM.y',
                                                'M': 'dd.MM.y - dd.MM.y',
                                                'y': 'dd.MM.y - dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd.MM.y - E, dd.MM.y',
                                                'M': 'E, dd.MM.y - E, dd.MM.y',
                                                'y': 'E, dd.MM.y - E, dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.-d. MMM y',
                                                'M': 'd. MMM - d. MMM y',
                                                'y': 'd. MMM y - d. MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d. - E, d. MMM y',
                                                'M': 'E, d. MMM - E, d. MMM y',
                                                'y': 'E, d. MMM y - E, d. MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM-MMMM y',
                                                'y': 'MMMM y - MMMM y'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL-LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH \'Uhr\''
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd.-d.'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate el}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('el', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '[{1} ({0})]',
                                'regionFormat-type-standard': '\u03A7\u03B5\u03B9\u03BC\u03B5\u03C1\u03B9\u03BD\u03AE \u03CE\u03C1\u03B1 ({0})',
                                'regionFormat-type-daylight': '\u0398\u03B5\u03C1\u03B9\u03BD\u03AE \u03CE\u03C1\u03B1 ({0})',
                                'regionFormat': '\u038F\u03C1\u03B1 ({0})',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0391\u03C5\u03B3',
                                                '7': '\u0399\u03BF\u03C5\u03BB',
                                                '6': '\u0399\u03BF\u03C5\u03BD',
                                                '5': '\u039C\u03B1\u0390',
                                                '12': '\u0394\u03B5\u03BA',
                                                '11': '\u039D\u03BF\u03B5',
                                                '10': '\u039F\u03BA\u03C4',
                                                '9': '\u03A3\u03B5\u03C0',
                                                '1': '\u0399\u03B1\u03BD',
                                                '2': '\u03A6\u03B5\u03B2',
                                                '3': '\u039C\u03B1\u03C1',
                                                '4': '\u0391\u03C0\u03C1'
                                            },
                                            'narrow': {
                                                '8': '\u0391',
                                                '7': '\u0399',
                                                '6': '\u0399',
                                                '5': '\u039C',
                                                '12': '\u0394',
                                                '11': '\u039D',
                                                '10': '\u039F',
                                                '9': '\u03A3',
                                                '1': '\u0399',
                                                '2': '\u03A6',
                                                '3': '\u039C',
                                                '4': '\u0391'
                                            },
                                            'wide': {
                                                '8': '\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5',
                                                '7': '\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5',
                                                '6': '\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5',
                                                '5': '\u039C\u03B1\u0390\u03BF\u03C5',
                                                '12': '\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5',
                                                '11': '\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5',
                                                '10': '\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5',
                                                '9': '\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5',
                                                '1': '\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5',
                                                '2': '\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5',
                                                '3': '\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5',
                                                '4': '\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0391\u03CD\u03B3',
                                                '7': '\u0399\u03BF\u03CD\u03BB',
                                                '6': '\u0399\u03BF\u03CD\u03BD',
                                                '5': '\u039C\u03AC\u03B9',
                                                '12': '\u0394\u03B5\u03BA',
                                                '11': '\u039D\u03BF\u03AD',
                                                '10': '\u039F\u03BA\u03C4',
                                                '9': '\u03A3\u03B5\u03C0',
                                                '1': '\u0399\u03B1\u03BD',
                                                '2': '\u03A6\u03B5\u03B2',
                                                '3': '\u039C\u03AC\u03C1',
                                                '4': '\u0391\u03C0\u03C1'
                                            },
                                            'narrow': {
                                                '8': '\u0391',
                                                '7': '\u0399',
                                                '6': '\u0399',
                                                '5': '\u039C',
                                                '12': '\u0394',
                                                '11': '\u039D',
                                                '10': '\u039F',
                                                '9': '\u03A3',
                                                '1': '\u0399',
                                                '2': '\u03A6',
                                                '3': '\u039C',
                                                '4': '\u0391'
                                            },
                                            'wide': {
                                                '8': '\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2',
                                                '7': '\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2',
                                                '6': '\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2',
                                                '5': '\u039C\u03AC\u03B9\u03BF\u03C2',
                                                '12': '\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2',
                                                '11': '\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2',
                                                '10': '\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2',
                                                '9': '\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2',
                                                '1': '\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2',
                                                '2': '\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2',
                                                '3': '\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2',
                                                '4': '\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u039A\u03C5\u03C1',
                                                'mon': '\u0394\u03B5\u03C5',
                                                'tue': '\u03A4\u03C1\u03AF',
                                                'wed': '\u03A4\u03B5\u03C4',
                                                'thu': '\u03A0\u03AD\u03BC',
                                                'fri': '\u03A0\u03B1\u03C1',
                                                'sat': '\u03A3\u03AC\u03B2'
                                            },
                                            'narrow': {
                                                'sun': '\u039A',
                                                'mon': '\u0394',
                                                'tue': '\u03A4',
                                                'wed': '\u03A4',
                                                'thu': '\u03A0',
                                                'fri': '\u03A0',
                                                'sat': '\u03A3'
                                            },
                                            'short': {
                                                'sun': '\u039A\u03C5',
                                                'mon': '\u0394\u03B5',
                                                'tue': '\u03A4\u03C1',
                                                'wed': '\u03A4\u03B5',
                                                'thu': '\u03A0\u03AD',
                                                'fri': '\u03A0\u03B1',
                                                'sat': '\u03A3\u03AC'
                                            },
                                            'wide': {
                                                'sun': '\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE',
                                                'mon': '\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1',
                                                'tue': '\u03A4\u03C1\u03AF\u03C4\u03B7',
                                                'wed': '\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7',
                                                'thu': '\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7',
                                                'fri': '\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE',
                                                'sat': '\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u039A\u03C5\u03C1',
                                                'mon': '\u0394\u03B5\u03C5',
                                                'tue': '\u03A4\u03C1\u03AF',
                                                'wed': '\u03A4\u03B5\u03C4',
                                                'thu': '\u03A0\u03AD\u03BC',
                                                'fri': '\u03A0\u03B1\u03C1',
                                                'sat': '\u03A3\u03AC\u03B2'
                                            },
                                            'narrow': {
                                                'sun': '\u039A',
                                                'mon': '\u0394',
                                                'tue': '\u03A4',
                                                'wed': '\u03A4',
                                                'thu': '\u03A0',
                                                'fri': '\u03A0',
                                                'sat': '\u03A3'
                                            },
                                            'short': {
                                                'sun': '\u039A\u03C5',
                                                'mon': '\u0394\u03B5',
                                                'tue': '\u03A4\u03C1',
                                                'wed': '\u03A4\u03B5',
                                                'thu': '\u03A0\u03AD',
                                                'fri': '\u03A0\u03B1',
                                                'sat': '\u03A3\u03AC'
                                            },
                                            'wide': {
                                                'sun': '\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE',
                                                'mon': '\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1',
                                                'tue': '\u03A4\u03C1\u03AF\u03C4\u03B7',
                                                'wed': '\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7',
                                                'thu': '\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7',
                                                'fri': '\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE',
                                                'sat': '\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u03A41',
                                                '2': '\u03A42',
                                                '3': '\u03A43',
                                                '4': '\u03A44'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '2': '2\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '3': '3\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '4': '4\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u03A41',
                                                '2': '\u03A42',
                                                '3': '\u03A43',
                                                '4': '\u03A44'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '2': '2\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '3': '3\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF',
                                                '4': '4\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            },
                                            'narrow': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            },
                                            'wide': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            },
                                            'narrow': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            },
                                            'wide': {
                                                'am': '\u03C0.\u03BC.',
                                                'pm': '\u03BC.\u03BC.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u03C0.\u03A7.',
                                            '0-alt-variant': '\u03C0.\u039A.\u03A7.',
                                            '1': '\u03BC.\u03A7.',
                                            '1-alt-variant': '\u039A\u03A7'
                                        },
                                        'eraAbbr': {
                                            '0': '\u03C0.\u03A7.',
                                            '0-alt-variant': '\u03C0.\u039A.\u03A7.',
                                            '1': '\u03BC.\u03A7.',
                                            '1-alt-variant': '\u039A\u03A7'
                                        },
                                        'eraNarrow': {
                                            '0': '\u03C0.\u03A7.',
                                            '0-alt-variant': '\u03C0.\u039A.\u03A7.',
                                            '1': '\u03BC.\u03A7.',
                                            '1-alt-variant': '\u039A\u03A7'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'd/M/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'h:mm:ss a zzzz',
                                        'long': 'h:mm:ss a z',
                                        'medium': 'h:mm:ss a',
                                        'short': 'h:mm a'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} - {0}',
                                        'long': '{1} - {0}',
                                        'medium': '{1} - {0}',
                                        'short': '{1} - {0}',
                                        'availableFormats': {
                                            'yMMM': 'LLL y',
                                            'yMEd': 'E, d/M/y',
                                            'yMd': 'd/M/y',
                                            'yM': 'M/y',
                                            'y': 'y',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E, d MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'HHmm': 'HH:mm',
                                            'yQQQQ': 'y QQQQ',
                                            'yQQQ': 'y QQQ',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E, d MMM y',
                                            'yMMMd': 'd MMM y',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'HHmmss': 'HH:mm:ss',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLL y G',
                                            'hms': 'h:mm:ss a',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E, d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E, d MMMM',
                                            'ms': 'mm:ss'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, dd - E, dd MMM',
                                                'M': 'E, dd MMM - E, dd MMM'
                                            },
                                            'MMMd': {
                                                'd': 'dd-dd MMM',
                                                'M': 'dd MMM - dd MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL-LLL'
                                            },
                                            'MEd': {
                                                'd': 'E, dd/MM - E, dd/MM',
                                                'M': 'E, dd/MM - E, dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd/MM/y - E, dd/MM/y',
                                                'M': 'E, dd/MM/y - E, dd/MM/y',
                                                'y': 'E, dd/MM/y - E, dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL-LLL y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'dd-dd MMM y',
                                                'M': 'dd MMM - dd MMM y',
                                                'y': 'dd MMM y - dd MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, dd MMM - E, dd MMM y',
                                                'M': 'E, dd MMM - E, dd MMM y',
                                                'y': 'E, dd MMM y - E, dd MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL-LLLL y',
                                                'y': 'LLLL y - LLLL y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate es}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('es', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'horario est\u00E1ndar de {0}',
                                'regionFormat-type-daylight': 'horario de verano de {0}',
                                'regionFormat': 'Hora de {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'ago.',
                                                '7': 'jul.',
                                                '6': 'jun.',
                                                '5': 'may.',
                                                '12': 'dic.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'sept.',
                                                '1': 'ene.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'abr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'E',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'agosto',
                                                '7': 'julio',
                                                '6': 'junio',
                                                '5': 'mayo',
                                                '12': 'diciembre',
                                                '11': 'noviembre',
                                                '10': 'octubre',
                                                '9': 'septiembre',
                                                '1': 'enero',
                                                '2': 'febrero',
                                                '3': 'marzo',
                                                '4': 'abril'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Ago.',
                                                '7': 'Jul.',
                                                '6': 'Jun.',
                                                '5': 'May.',
                                                '12': 'Dic.',
                                                '11': 'Nov.',
                                                '10': 'Oct.',
                                                '9': 'Sept.',
                                                '1': 'Ene.',
                                                '2': 'Feb.',
                                                '3': 'Mar.',
                                                '4': 'Abr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'E',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'Agosto',
                                                '7': 'Julio',
                                                '6': 'Junio',
                                                '5': 'Mayo',
                                                '12': 'Diciembre',
                                                '11': 'Noviembre',
                                                '10': 'Octubre',
                                                '9': 'Septiembre',
                                                '1': 'Enero',
                                                '2': 'Febrero',
                                                '3': 'Marzo',
                                                '4': 'Abril'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dom.',
                                                'mon': 'lun.',
                                                'tue': 'mar.',
                                                'wed': 'mi\u00E9.',
                                                'thu': 'jue.',
                                                'fri': 'vie.',
                                                'sat': 's\u00E1b.'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'X',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'DO',
                                                'mon': 'LU',
                                                'tue': 'MA',
                                                'wed': 'MI',
                                                'thu': 'JU',
                                                'fri': 'VI',
                                                'sat': 'SA'
                                            },
                                            'wide': {
                                                'sun': 'domingo',
                                                'mon': 'lunes',
                                                'tue': 'martes',
                                                'wed': 'mi\u00E9rcoles',
                                                'thu': 'jueves',
                                                'fri': 'viernes',
                                                'sat': 's\u00E1bado'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'Dom.',
                                                'mon': 'Lun.',
                                                'tue': 'Mar.',
                                                'wed': 'Mi\u00E9.',
                                                'thu': 'Jue.',
                                                'fri': 'Vie.',
                                                'sat': 'S\u00E1b.'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'DO',
                                                'mon': 'LU',
                                                'tue': 'MA',
                                                'wed': 'MI',
                                                'thu': 'JU',
                                                'fri': 'VI',
                                                'sat': 'SA'
                                            },
                                            'wide': {
                                                'sun': 'Domingo',
                                                'mon': 'Lunes',
                                                'tue': 'Martes',
                                                'wed': 'Mi\u00E9rcoles',
                                                'thu': 'Jueves',
                                                'fri': 'Viernes',
                                                'sat': 'S\u00E1bado'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1T',
                                                '2': '2T',
                                                '3': '3T',
                                                '4': '4T'
                                            },
                                            'wide': {
                                                '1': '1.er trimestre',
                                                '2': '2.\u00BA trimestre',
                                                '3': '3.er trimestre',
                                                '4': '4.\u00BA trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1T',
                                                '2': '2T',
                                                '3': '3T',
                                                '4': '4T'
                                            },
                                            'wide': {
                                                '1': '1.er trimestre',
                                                '2': '2.\u00BA trimestre',
                                                '3': '3.er trimestre',
                                                '4': '4.\u00BA trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a. m.',
                                                'pm': 'p. m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'antes de Cristo',
                                            '0-alt-variant': 'a. e. c.',
                                            '1': 'anno D\u00F3mini',
                                            '1-alt-variant': 'e. c.'
                                        },
                                        'eraAbbr': {
                                            '0': 'a. C.',
                                            '0-alt-variant': 'a. e. c.',
                                            '1': 'd. C.',
                                            '1-alt-variant': 'e. c.'
                                        },
                                        'eraNarrow': {
                                            '0': 'a. C.',
                                            '0-alt-variant': 'a. e. c.',
                                            '1': 'd. C.',
                                            '1-alt-variant': 'e. c.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d \'de\' MMMM \'de\' y',
                                        'long': 'd \'de\' MMMM \'de\' y',
                                        'medium': 'd/M/y',
                                        'short': 'd/M/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'H:mm:ss (zzzz)',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1}, {0}',
                                        'long': '{1}, {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMM': 'M/y',
                                            'yMEd': 'EEE, d/M/y',
                                            'yMd': 'd/M/y',
                                            'yM': 'M/y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM \'de\' y G',
                                            'GyMMMEd': 'E, d \'de\' MMMM \'de\' y G',
                                            'h': 'h a',
                                            'H': 'H',
                                            'hm': 'h:mm a',
                                            'Hm': 'H:mm',
                                            'yQQQQ': 'QQQQ \'de\' y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM \'de\' y',
                                            'yMMMEd': 'EEE, d \'de\' MMMM \'de\' y',
                                            'yMMMd': 'd \'de\' MMM \'de\' y',
                                            'yMMM': 'MMM \'de\' y',
                                            'Hms': 'H:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Ehm': 'E, h:mm a',
                                            'EHm': 'E, H:mm',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, H:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM \'de\' y G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, d/M',
                                            'MMd': 'd/M',
                                            'MMdd': 'd/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd \'de\' MMM',
                                            'MMMdd': 'dd-MMM',
                                            'MMMEd': 'E d \'de\' MMM',
                                            'MMMMd': 'd \'de\' MMMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d MMM\u2013E, d MMM',
                                                'M': 'E, d MMM\u2013E, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM\u2013d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, d/M\u2013E, d/M',
                                                'M': 'E, d/M\u2013E, d/M'
                                            },
                                            'Md': {
                                                'd': 'd/M\u2013d/M',
                                                'M': 'd/M\u2013d/M'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'H\u2013H v'
                                            },
                                            'hv': {
                                                'a': 'h a\u2013h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M/y\u2013M/y',
                                                'y': 'M/y\u2013M/y'
                                            },
                                            'yMd': {
                                                'd': 'd/M/y\u2013d/M/y',
                                                'M': 'd/M/y\u2013d/M/y',
                                                'y': 'd/M/y\u2013d/M/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, d/M/y\u2013E, d/M/y',
                                                'M': 'E, d/M/y\u2013E, d/M/y',
                                                'y': 'E, d/M/y\u2013E, d/M/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y\u2013MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM\u2013d MMM \'de\' y',
                                                'y': 'd MMM \'de\' y\u2013d MMM \'de\' y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d MMM\u2013E, d MMM \'de\' y',
                                                'M': 'E, d MMM\u2013E, d MMM \'de\' y',
                                                'y': 'E, d MMM \'de\' y\u2013E, d MMM \'de\' y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM \'de\' y',
                                                'y': 'MMMM \'de\' y\u2013MMMM \'de\' y'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm\u2013H:mm v',
                                                'm': 'H:mm\u2013H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a\u2013h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm\u2013H:mm',
                                                'm': 'H:mm\u2013H:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm \u2013 h:mm a',
                                                'm': 'h:mm \u2013 h:mm a'
                                            },
                                            'H': {
                                                'H': 'H\u2013H'
                                            },
                                            'h': {
                                                'a': 'h a\u2013h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0}\u2013{1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate fi}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('fi', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (normaaliaika)',
                                'regionFormat-type-daylight': '{0} (kes\u00E4aika)',
                                'regionFormat': 'aikavy\u00F6hyke: {0}',
                                'gmtZeroFormat': 'UTC',
                                'gmtFormat': 'UTC{0}',
                                'hourFormat': '+H.mm;-H.mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'elokuuta',
                                                '7': 'hein\u00E4kuuta',
                                                '6': 'kes\u00E4kuuta',
                                                '5': 'toukokuuta',
                                                '12': 'joulukuuta',
                                                '11': 'marraskuuta',
                                                '10': 'lokakuuta',
                                                '9': 'syyskuuta',
                                                '1': 'tammikuuta',
                                                '2': 'helmikuuta',
                                                '3': 'maaliskuuta',
                                                '4': 'huhtikuuta'
                                            },
                                            'narrow': {
                                                '8': 'E',
                                                '7': 'H',
                                                '6': 'K',
                                                '5': 'T',
                                                '12': 'J',
                                                '11': 'M',
                                                '10': 'L',
                                                '9': 'S',
                                                '1': 'T',
                                                '2': 'H',
                                                '3': 'M',
                                                '4': 'H'
                                            },
                                            'wide': {
                                                '8': 'elokuuta',
                                                '7': 'hein\u00E4kuuta',
                                                '6': 'kes\u00E4kuuta',
                                                '5': 'toukokuuta',
                                                '12': 'joulukuuta',
                                                '11': 'marraskuuta',
                                                '10': 'lokakuuta',
                                                '9': 'syyskuuta',
                                                '1': 'tammikuuta',
                                                '2': 'helmikuuta',
                                                '3': 'maaliskuuta',
                                                '4': 'huhtikuuta'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'elo',
                                                '7': 'hein\u00E4',
                                                '6': 'kes\u00E4',
                                                '5': 'touko',
                                                '12': 'joulu',
                                                '11': 'marras',
                                                '10': 'loka',
                                                '9': 'syys',
                                                '1': 'tammi',
                                                '2': 'helmi',
                                                '3': 'maalis',
                                                '4': 'huhti'
                                            },
                                            'narrow': {
                                                '8': 'E',
                                                '7': 'H',
                                                '6': 'K',
                                                '5': 'T',
                                                '12': 'J',
                                                '11': 'M',
                                                '10': 'L',
                                                '9': 'S',
                                                '1': 'T',
                                                '2': 'H',
                                                '3': 'M',
                                                '4': 'H'
                                            },
                                            'wide': {
                                                '8': 'elokuu',
                                                '7': 'hein\u00E4kuu',
                                                '6': 'kes\u00E4kuu',
                                                '5': 'toukokuu',
                                                '12': 'joulukuu',
                                                '11': 'marraskuu',
                                                '10': 'lokakuu',
                                                '9': 'syyskuu',
                                                '1': 'tammikuu',
                                                '2': 'helmikuu',
                                                '3': 'maaliskuu',
                                                '4': 'huhtikuu'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'su',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'ke',
                                                'thu': 'to',
                                                'fri': 'pe',
                                                'sat': 'la'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'K',
                                                'thu': 'T',
                                                'fri': 'P',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 'su',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'ke',
                                                'thu': 'to',
                                                'fri': 'pe',
                                                'sat': 'la'
                                            },
                                            'wide': {
                                                'sun': 'sunnuntaina',
                                                'mon': 'maanantaina',
                                                'tue': 'tiistaina',
                                                'wed': 'keskiviikkona',
                                                'thu': 'torstaina',
                                                'fri': 'perjantaina',
                                                'sat': 'lauantaina'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'su',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'ke',
                                                'thu': 'to',
                                                'fri': 'pe',
                                                'sat': 'la'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'K',
                                                'thu': 'T',
                                                'fri': 'P',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 'su',
                                                'mon': 'ma',
                                                'tue': 'ti',
                                                'wed': 'ke',
                                                'thu': 'to',
                                                'fri': 'pe',
                                                'sat': 'la'
                                            },
                                            'wide': {
                                                'sun': 'sunnuntai',
                                                'mon': 'maanantai',
                                                'tue': 'tiistai',
                                                'wed': 'keskiviikko',
                                                'thu': 'torstai',
                                                'fri': 'perjantai',
                                                'sat': 'lauantai'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1. nelj.',
                                                '2': '2. nelj.',
                                                '3': '3. nelj.',
                                                '4': '4. nelj.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. nelj\u00E4nnes',
                                                '2': '2. nelj\u00E4nnes',
                                                '3': '3. nelj\u00E4nnes',
                                                '4': '4. nelj\u00E4nnes'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1. nelj.',
                                                '2': '2. nelj.',
                                                '3': '3. nelj.',
                                                '4': '4. nelj.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. nelj\u00E4nnes',
                                                '2': '2. nelj\u00E4nnes',
                                                '3': '3. nelj\u00E4nnes',
                                                '4': '4. nelj\u00E4nnes'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            },
                                            'narrow': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            },
                                            'wide': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            },
                                            'narrow': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            },
                                            'wide': {
                                                'am': 'ap.',
                                                'pm': 'ip.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'ennen Kristuksen syntym\u00E4\u00E4',
                                            '0-alt-variant': 'ennen ajanlaskun alkua',
                                            '1': 'j\u00E4lkeen Kristuksen syntym\u00E4n',
                                            '1-alt-variant': 'j\u00E4lkeen ajanlaskun alun'
                                        },
                                        'eraAbbr': {
                                            '0': 'eKr.',
                                            '0-alt-variant': 'eaa.',
                                            '1': 'jKr.',
                                            '1-alt-variant': 'jaa.'
                                        },
                                        'eraNarrow': {
                                            '0': 'eK',
                                            '0-alt-variant': 'eaa',
                                            '1': 'jK',
                                            '1-alt-variant': 'jaa'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'cccc d. MMMM y',
                                        'long': 'd. MMMM y',
                                        'medium': 'd.M.y',
                                        'short': 'd.M.y'
                                    },
                                    'timeFormats': {
                                        'full': 'H.mm.ss zzzz',
                                        'long': 'H.mm.ss z',
                                        'medium': 'H.mm.ss',
                                        'short': 'H.mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E d. MMM y',
                                            'yMMMd': 'd. MMM y',
                                            'Ehms': 'E h.mm.ss a',
                                            'EHm': 'E H.mm',
                                            'Ehm': 'E h.mm a',
                                            'Ed': 'E d.',
                                            'd': 'd',
                                            'GyMMMd': 'd. MMM y G',
                                            'GyMMMEd': 'E d. MMM y G',
                                            'h': 'h a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMMccccd': 'cccc d. MMMM y',
                                            'Hms': 'H.mm.ss',
                                            'hms': 'h.mm.ss a',
                                            'Hm': 'H.mm',
                                            'hm': 'h.mm a',
                                            'H': 'H',
                                            'EHms': 'E H.mm.ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLL y G',
                                            'M': 'L',
                                            'Md': 'd.M.',
                                            'MEd': 'E d.M.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'ccc d. MMM',
                                            'ms': 'm.ss',
                                            'y': 'y',
                                            'yM': 'L.y',
                                            'yMd': 'd.M.y',
                                            'yMEd': 'E d.M.y',
                                            'yMM': 'M.y',
                                            'yMMM': 'LLL y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d. \u2013 E d. MMMM',
                                                'M': 'E d. MMMM \u2013 E d. MMMM'
                                            },
                                            'MMMd': {
                                                'd': 'd.\u2013d. MMMM',
                                                'M': 'd. MMMM \u2013 d. MMMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u2013LLLL'
                                            },
                                            'MEd': {
                                                'd': 'E d. \u2013 E d.M.',
                                                'M': 'E d.M. \u2013 E d.M.'
                                            },
                                            'Md': {
                                                'd': 'd.\u2013d.M.',
                                                'M': 'd.M.\u2013d.M.'
                                            },
                                            'M': {
                                                'M': 'L.\u2013L.'
                                            },
                                            'Hv': {
                                                'H': 'H\u2013H v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'intervalFormatFallback': '{0}\u2013{1}',
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'LLL\u2013LLLL y',
                                                'y': 'LLLL y \u2013 LLLL y'
                                            },
                                            'yMd': {
                                                'd': 'd.\u2013d.M.y',
                                                'M': 'd.M.\u2013d.M.y',
                                                'y': 'd.M.y\u2013d.M.y'
                                            },
                                            'yMEd': {
                                                'd': 'E d.M.y \u2013 E d.M.y',
                                                'M': 'E d.M.y \u2013 E d.M.y',
                                                'y': 'E d.M.y \u2013 E d.M.y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL\u2013LLLL y',
                                                'y': 'LLLL y \u2013 LLLL y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.\u2013d. MMMM y',
                                                'M': 'd. MMMM \u2013 d. MMMM y',
                                                'y': 'd. MMMM y \u2013 d. MMMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d. \u2013 E d. MMMM y',
                                                'M': 'E d. MMMM \u2013 E d. MMMM y',
                                                'y': 'E d. MMMM y \u2013 E d. MMMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLL\u2013LLLL y',
                                                'y': 'LLLL y \u2013 LLLL y'
                                            },
                                            'MMMM': {
                                                'M': 'LLL\u2013LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'H.mm\u2013H.mm v',
                                                'm': 'H.mm\u2013H.mm v'
                                            },
                                            'hmv': {
                                                'a': 'h.mm a \u2013 h.mm a v',
                                                'h': 'h.mm\u2013h.mm a v',
                                                'm': 'h.mm\u2013h.mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H.mm\u2013H.mm',
                                                'm': 'H.mm\u2013H.mm'
                                            },
                                            'hm': {
                                                'a': 'h.mm a \u2013 h.mm a',
                                                'h': 'h.mm\u2013h.mm a',
                                                'm': 'h.mm\u2013h.mm a'
                                            },
                                            'H': {
                                                'H': 'H\u2013H'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd.\u2013d.'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate fr}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9310
             * timeZoneNames: 24r9310
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('fr', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (heure standard)',
                                'regionFormat-type-daylight': '{0} (heure d\u2019\u00E9t\u00E9)',
                                'regionFormat': 'heure : {0}',
                                'gmtZeroFormat': 'UTC',
                                'gmtFormat': 'UTC{0}',
                                'hourFormat': '+HH:mm;\u2212HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'ao\u00FBt',
                                                '7': 'juil.',
                                                '6': 'juin',
                                                '5': 'mai',
                                                '12': 'd\u00E9c.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'sept.',
                                                '1': 'janv.',
                                                '2': 'f\u00E9vr.',
                                                '3': 'mars',
                                                '4': 'avr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'ao\u00FBt',
                                                '7': 'juillet',
                                                '6': 'juin',
                                                '5': 'mai',
                                                '12': 'd\u00E9cembre',
                                                '11': 'novembre',
                                                '10': 'octobre',
                                                '9': 'septembre',
                                                '1': 'janvier',
                                                '2': 'f\u00E9vrier',
                                                '3': 'mars',
                                                '4': 'avril'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'ao\u00FBt',
                                                '7': 'juil.',
                                                '6': 'juin',
                                                '5': 'mai',
                                                '12': 'd\u00E9c.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'sept.',
                                                '1': 'janv.',
                                                '2': 'f\u00E9vr.',
                                                '3': 'mars',
                                                '4': 'avr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'ao\u00FBt',
                                                '7': 'juillet',
                                                '6': 'juin',
                                                '5': 'mai',
                                                '12': 'd\u00E9cembre',
                                                '11': 'novembre',
                                                '10': 'octobre',
                                                '9': 'septembre',
                                                '1': 'janvier',
                                                '2': 'f\u00E9vrier',
                                                '3': 'mars',
                                                '4': 'avril'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dim.',
                                                'mon': 'lun.',
                                                'tue': 'mar.',
                                                'wed': 'mer.',
                                                'thu': 'jeu.',
                                                'fri': 'ven.',
                                                'sat': 'sam.'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'di',
                                                'mon': 'lu',
                                                'tue': 'ma',
                                                'wed': 'me',
                                                'thu': 'je',
                                                'fri': 've',
                                                'sat': 'sa'
                                            },
                                            'wide': {
                                                'sun': 'dimanche',
                                                'mon': 'lundi',
                                                'tue': 'mardi',
                                                'wed': 'mercredi',
                                                'thu': 'jeudi',
                                                'fri': 'vendredi',
                                                'sat': 'samedi'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'dim.',
                                                'mon': 'lun.',
                                                'tue': 'mar.',
                                                'wed': 'mer.',
                                                'thu': 'jeu.',
                                                'fri': 'ven.',
                                                'sat': 'sam.'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'dim.',
                                                'mon': 'lun.',
                                                'tue': 'mar.',
                                                'wed': 'mer.',
                                                'thu': 'jeu.',
                                                'fri': 'ven.',
                                                'sat': 'sam.'
                                            },
                                            'wide': {
                                                'sun': 'dimanche',
                                                'mon': 'lundi',
                                                'tue': 'mardi',
                                                'wed': 'mercredi',
                                                'thu': 'jeudi',
                                                'fri': 'vendredi',
                                                'sat': 'samedi'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1er trimestre',
                                                '2': '2e trimestre',
                                                '3': '3e trimestre',
                                                '4': '4e trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1er trimestre',
                                                '2': '2e trimestre',
                                                '3': '3e trimestre',
                                                '4': '4e trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': 'ap.m.',
                                                'am': 'AM',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'afternoon': 'ap.-m.',
                                                'am': 'a',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'afternoon': 'apr\u00E8s-midi',
                                                'am': 'AM',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': 'ap.m.',
                                                'am': 'av.m.',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'ap.m.'
                                            },
                                            'narrow': {
                                                'afternoon': 'ap.-m.',
                                                'am': 'a',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'afternoon': 'apr\u00E8s-midi',
                                                'am': 'avant-midi',
                                                'morning': 'matin',
                                                'night': 'soir',
                                                'noon': 'midi',
                                                'pm': 'apr\u00E8s-midi'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'avant J\u00E9sus-Christ',
                                            '0-alt-variant': 'AEC',
                                            '1': 'apr\u00E8s J\u00E9sus-Christ',
                                            '1-alt-variant': 'EC'
                                        },
                                        'eraAbbr': {
                                            '0': 'av. J.-C.',
                                            '0-alt-variant': 'AEC',
                                            '1': 'ap. J.-C.',
                                            '1-alt-variant': 'EC'
                                        },
                                        'eraNarrow': {
                                            '0': 'av. J.-C.',
                                            '0-alt-variant': 'AEC',
                                            '1': 'ap. J.-C.',
                                            '1-alt-variant': 'EC'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'dd/MM/y'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yQQQ': 'QQQ y',
                                            'Gy': 'y G',
                                            'EHms': 'E HH:mm:ss',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHm': 'E HH:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'yQQQQ': 'QQQQ y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH \'h\'',
                                            'h': 'h a',
                                            'GyMMMEd': 'E d MMM y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M/y',
                                            'yMd': 'd/M/y',
                                            'yMEd': 'E d/M/y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'd MMM y',
                                            'yMMMEd': 'E d MMM y',
                                            'yMMMM': 'MMMM y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d \u2013 E d MMM',
                                                'M': 'E d MMM \u2013 E d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E dd/MM - E dd/MM',
                                                'M': 'E dd/MM - E dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM \u2013 dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH \u2013 HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h \u2013 h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM/y \u2013 MM/y',
                                                'y': 'M/y \u2013 M/y'
                                            },
                                            'yMd': {
                                                'd': 'd/M/y \u2013 d/M/y',
                                                'M': 'd/M/y \u2013 d/M/y',
                                                'y': 'dd/MM/y \u2013 dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd/MM/y \u2013 E dd/MM/y',
                                                'M': 'E dd/MM/y \u2013 E dd/MM/y',
                                                'y': 'E dd/MM/y \u2013 E dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM \u2013 d MMM y',
                                                'y': 'd MMM y \u2013 d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d \u2013 E d MMM y',
                                                'M': 'E d MMM \u2013 E d MMM y',
                                                'y': 'E d MMM y \u2013 E d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM \u2013 MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm \u2013 HH:mm v',
                                                'm': 'HH:mm \u2013 HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm \u2013 h:mm a v',
                                                'm': 'h:mm \u2013 h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm \u2013 HH:mm',
                                                'm': 'HH:mm \u2013 HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm \u2013 h:mm a',
                                                'm': 'h:mm \u2013 h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH \u2013 HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h \u2013 h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate he}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('he', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '\u05E9\u05E2\u05D5\u05DF {0} (\u05D7\u05D5\u05E8\u05E3)',
                                'regionFormat-type-daylight': '\u05E9\u05E2\u05D5\u05DF {0} (\u05E7\u05D9\u05E5)',
                                'regionFormat': '\u05E9\u05E2\u05D5\u05DF {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u05D0\u05D5\u05D2',
                                                '7': '\u05D9\u05D5\u05DC',
                                                '6': '\u05D9\u05D5\u05E0',
                                                '5': '\u05DE\u05D0\u05D9',
                                                '12': '\u05D3\u05E6\u05DE',
                                                '11': '\u05E0\u05D5\u05D1',
                                                '10': '\u05D0\u05D5\u05E7',
                                                '9': '\u05E1\u05E4\u05D8',
                                                '1': '\u05D9\u05E0\u05D5',
                                                '2': '\u05E4\u05D1\u05E8',
                                                '3': '\u05DE\u05E8\u05E5',
                                                '4': '\u05D0\u05E4\u05E8'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8',
                                                '7': '\u05D9\u05D5\u05DC\u05D9',
                                                '6': '\u05D9\u05D5\u05E0\u05D9',
                                                '5': '\u05DE\u05D0\u05D9',
                                                '12': '\u05D3\u05E6\u05DE\u05D1\u05E8',
                                                '11': '\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8',
                                                '10': '\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8',
                                                '9': '\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8',
                                                '1': '\u05D9\u05E0\u05D5\u05D0\u05E8',
                                                '2': '\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8',
                                                '3': '\u05DE\u05E8\u05E5',
                                                '4': '\u05D0\u05E4\u05E8\u05D9\u05DC'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u05D0\u05D5\u05D2\u05F3',
                                                '7': '\u05D9\u05D5\u05DC\u05F3',
                                                '6': '\u05D9\u05D5\u05E0\u05F3',
                                                '5': '\u05DE\u05D0\u05D9',
                                                '12': '\u05D3\u05E6\u05DE\u05F3',
                                                '11': '\u05E0\u05D5\u05D1\u05F3',
                                                '10': '\u05D0\u05D5\u05E7\u05F3',
                                                '9': '\u05E1\u05E4\u05D8\u05F3',
                                                '1': '\u05D9\u05E0\u05D5\u05F3',
                                                '2': '\u05E4\u05D1\u05E8\u05F3',
                                                '3': '\u05DE\u05E8\u05E5',
                                                '4': '\u05D0\u05E4\u05E8\u05F3'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8',
                                                '7': '\u05D9\u05D5\u05DC\u05D9',
                                                '6': '\u05D9\u05D5\u05E0\u05D9',
                                                '5': '\u05DE\u05D0\u05D9',
                                                '12': '\u05D3\u05E6\u05DE\u05D1\u05E8',
                                                '11': '\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8',
                                                '10': '\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8',
                                                '9': '\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8',
                                                '1': '\u05D9\u05E0\u05D5\u05D0\u05E8',
                                                '2': '\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8',
                                                '3': '\u05DE\u05E8\u05E5',
                                                '4': '\u05D0\u05E4\u05E8\u05D9\u05DC'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u05D9\u05D5\u05DD \u05D0\u05F3',
                                                'mon': '\u05D9\u05D5\u05DD \u05D1\u05F3',
                                                'tue': '\u05D9\u05D5\u05DD \u05D2\u05F3',
                                                'wed': '\u05D9\u05D5\u05DD \u05D3\u05F3',
                                                'thu': '\u05D9\u05D5\u05DD \u05D4\u05F3',
                                                'fri': '\u05D9\u05D5\u05DD \u05D5\u05F3',
                                                'sat': '\u05E9\u05D1\u05EA'
                                            },
                                            'narrow': {
                                                'sun': '\u05D0\u05F3',
                                                'mon': '\u05D1\u05F3',
                                                'tue': '\u05D2\u05F3',
                                                'wed': '\u05D3\u05F3',
                                                'thu': '\u05D4\u05F3',
                                                'fri': '\u05D5\u05F3',
                                                'sat': '\u05E9\u05F3'
                                            },
                                            'short': {
                                                'sun': '\u05D0\u05F3',
                                                'mon': '\u05D1\u05F3',
                                                'tue': '\u05D2\u05F3',
                                                'wed': '\u05D3\u05F3',
                                                'thu': '\u05D4\u05F3',
                                                'fri': '\u05D5\u05F3',
                                                'sat': '\u05E9\u05F3'
                                            },
                                            'wide': {
                                                'sun': '\u05D9\u05D5\u05DD \u05E8\u05D0\u05E9\u05D5\u05DF',
                                                'mon': '\u05D9\u05D5\u05DD \u05E9\u05E0\u05D9',
                                                'tue': '\u05D9\u05D5\u05DD \u05E9\u05DC\u05D9\u05E9\u05D9',
                                                'wed': '\u05D9\u05D5\u05DD \u05E8\u05D1\u05D9\u05E2\u05D9',
                                                'thu': '\u05D9\u05D5\u05DD \u05D7\u05DE\u05D9\u05E9\u05D9',
                                                'fri': '\u05D9\u05D5\u05DD \u05E9\u05D9\u05E9\u05D9',
                                                'sat': '\u05D9\u05D5\u05DD \u05E9\u05D1\u05EA'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u05D9\u05D5\u05DD \u05D0\u05F3',
                                                'mon': '\u05D9\u05D5\u05DD \u05D1\u05F3',
                                                'tue': '\u05D9\u05D5\u05DD \u05D2\u05F3',
                                                'wed': '\u05D9\u05D5\u05DD \u05D3\u05F3',
                                                'thu': '\u05D9\u05D5\u05DD \u05D4\u05F3',
                                                'fri': '\u05D9\u05D5\u05DD \u05D5\u05F3',
                                                'sat': '\u05E9\u05D1\u05EA'
                                            },
                                            'narrow': {
                                                'sun': '\u05D0\u05F3',
                                                'mon': '\u05D1\u05F3',
                                                'tue': '\u05D2\u05F3',
                                                'wed': '\u05D3\u05F3',
                                                'thu': '\u05D4\u05F3',
                                                'fri': '\u05D5\u05F3',
                                                'sat': '\u05E9\u05F3'
                                            },
                                            'short': {
                                                'sun': '\u05D0\u05F3',
                                                'mon': '\u05D1\u05F3',
                                                'tue': '\u05D2\u05F3',
                                                'wed': '\u05D3\u05F3',
                                                'thu': '\u05D4\u05F3',
                                                'fri': '\u05D5\u05F3',
                                                'sat': '\u05E9\u05F3'
                                            },
                                            'wide': {
                                                'sun': '\u05D9\u05D5\u05DD \u05E8\u05D0\u05E9\u05D5\u05DF',
                                                'mon': '\u05D9\u05D5\u05DD \u05E9\u05E0\u05D9',
                                                'tue': '\u05D9\u05D5\u05DD \u05E9\u05DC\u05D9\u05E9\u05D9',
                                                'wed': '\u05D9\u05D5\u05DD \u05E8\u05D1\u05D9\u05E2\u05D9',
                                                'thu': '\u05D9\u05D5\u05DD \u05D7\u05DE\u05D9\u05E9\u05D9',
                                                'fri': '\u05D9\u05D5\u05DD \u05E9\u05D9\u05E9\u05D9',
                                                'sat': '\u05D9\u05D5\u05DD \u05E9\u05D1\u05EA'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u05E8\u05D1\u05E2\u05D5\u05DF 1',
                                                '2': '\u05E8\u05D1\u05E2\u05D5\u05DF 2',
                                                '3': '\u05E8\u05D1\u05E2\u05D5\u05DF 3',
                                                '4': '\u05E8\u05D1\u05E2\u05D5\u05DF 4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u05E8\u05D1\u05E2\u05D5\u05DF 1',
                                                '2': '\u05E8\u05D1\u05E2\u05D5\u05DF 2',
                                                '3': '\u05E8\u05D1\u05E2\u05D5\u05DF 3',
                                                '4': '\u05E8\u05D1\u05E2\u05D5\u05DF 4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u05E8\u05D1\u05E2\u05D5\u05DF 1',
                                                '2': '\u05E8\u05D1\u05E2\u05D5\u05DF 2',
                                                '3': '\u05E8\u05D1\u05E2\u05D5\u05DF 3',
                                                '4': '\u05E8\u05D1\u05E2\u05D5\u05DF 4'
                                            },
                                            'narrow': {
                                                '1': '\u05E81',
                                                '2': '\u05E82',
                                                '3': '\u05E83',
                                                '4': '\u05E84'
                                            },
                                            'wide': {
                                                '1': '\u05E8\u05D1\u05E2\u05D5\u05DF 1',
                                                '2': '\u05E8\u05D1\u05E2\u05D5\u05DF 2',
                                                '3': '\u05E8\u05D1\u05E2\u05D5\u05DF 3',
                                                '4': '\u05E8\u05D1\u05E2\u05D5\u05DF 4'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            },
                                            'narrow': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            },
                                            'wide': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            },
                                            'narrow': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            },
                                            'wide': {
                                                'am': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6',
                                                'pm': '\u05D0\u05D7\u05D4\u05F4\u05E6'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u05DC\u05E4\u05E0\u05D9 \u05D4\u05E1\u05E4\u05D9\u05E8\u05D4',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u05DC\u05E1\u05D4\u05F4\u05E0',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u05DC\u05E1\u05D4\u05F4\u05E0',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d \u05D1MMMM y',
                                        'long': 'd \u05D1MMMM y',
                                        'medium': 'd \u05D1MMM y',
                                        'short': 'dd/MM/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \u05D1\u05E9\u05E2\u05D4 {0}',
                                        'long': '{1} \u05D1\u05E9\u05E2\u05D4 {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, d \u05D1MMM y',
                                            'EHms': 'E H:mm:ss',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHm': 'E H:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E \u05D4-d',
                                            'd': 'd',
                                            'GyMMMd': 'd \u05D1MMM y G',
                                            'GyMMMEd': 'E, d \u05D1MMM y G',
                                            'yQQQQ': 'y QQQQ',
                                            'yQQQ': 'y QQQ',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH',
                                            'h': '\u200Fh a',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd \u05D1MMM',
                                            'MMMEd': 'E, d \u05D1MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M.y',
                                            'yMd': 'd.M.y',
                                            'yMEd': 'E, d/M/y',
                                            'yMM': 'MM/y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'd \u05D1MMM y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'EEEE d MMM \u2013 EEEE d MMM',
                                                'M': 'EEEE d MMM \u2013 EEEE d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM\u2013d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'EEEE d.M\u2013EEEE d.M',
                                                'M': 'EEEE d.M \u2013 EEEE d.M'
                                            },
                                            'Md': {
                                                'd': 'd.M\u2013d.M',
                                                'M': 'd.M\u2013d.M'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'H\u2013H v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}',
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M.y\u2013M.y',
                                                'y': 'M.y\u200F-M.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.M.y \u2013 dd.M.y',
                                                'M': 'd.M.y \u2013 d.M.y',
                                                'y': 'd.M.y \u2013 d.M.y'
                                            },
                                            'yMEd': {
                                                'd': 'EEEE d.M.y \u2013 EEEE d.M.y',
                                                'M': 'EEEE d.M.y \u2013 EEEE d.M.y',
                                                'y': 'EEEE d.M.y \u2013 EEEE d.M.y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM \u2013 d MMM y',
                                                'y': 'd MMM y \u2013 d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'EEEE d MMM \u2013 EEEE d MMM y',
                                                'M': 'EEEE d MMM \u2013 EEEE d MMM y',
                                                'y': 'EEEE d MMM y \u2013 EEEE d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y\u2013MMMM y'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL\u2013LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm\u2013H:mm v',
                                                'm': 'H:mm\u2013H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm\u2013H:mm',
                                                'm': 'H:mm\u2013H:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'H\u2013H'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate hi}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9296
             * timeZoneNames: 24r9296
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('hi', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} \u092E\u093E\u0928\u0915 \u0938\u092E\u092F',
                                'regionFormat-type-daylight': '{0} \u0921\u0947\u0932\u093E\u0907\u091F \u0938\u092E\u092F',
                                'regionFormat': '{0} \u0938\u092E\u092F',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0905\u0917',
                                                '7': '\u091C\u0941\u0932\u093E',
                                                '6': '\u091C\u0942\u0928',
                                                '5': '\u092E\u0908',
                                                '12': '\u0926\u093F\u0938\u0902',
                                                '11': '\u0928\u0935\u0902',
                                                '10': '\u0905\u0915\u094D\u091F\u0942',
                                                '9': '\u0938\u093F\u0924\u0902',
                                                '1': '\u091C\u0928',
                                                '2': '\u092B\u093C\u0930',
                                                '3': '\u092E\u093E\u0930\u094D\u091A',
                                                '4': '\u0905\u092A\u094D\u0930\u0948'
                                            },
                                            'narrow': {
                                                '8': '\u0905',
                                                '7': '\u091C\u0941',
                                                '6': '\u091C\u0942',
                                                '5': '\u092E',
                                                '12': '\u0926\u093F',
                                                '11': '\u0928',
                                                '10': '\u0905',
                                                '9': '\u0938\u093F',
                                                '1': '\u091C',
                                                '2': '\u092B\u093C',
                                                '3': '\u092E\u093E',
                                                '4': '\u0905'
                                            },
                                            'wide': {
                                                '8': '\u0905\u0917\u0938\u094D\u0924',
                                                '7': '\u091C\u0941\u0932\u093E\u0908',
                                                '6': '\u091C\u0942\u0928',
                                                '5': '\u092E\u0908',
                                                '12': '\u0926\u093F\u0938\u0902\u092C\u0930',
                                                '11': '\u0928\u0935\u0902\u092C\u0930',
                                                '10': '\u0905\u0915\u094D\u091F\u0942\u092C\u0930',
                                                '9': '\u0938\u093F\u0924\u0902\u092C\u0930',
                                                '1': '\u091C\u0928\u0935\u0930\u0940',
                                                '2': '\u092B\u093C\u0930\u0935\u0930\u0940',
                                                '3': '\u092E\u093E\u0930\u094D\u091A',
                                                '4': '\u0905\u092A\u094D\u0930\u0948\u0932'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0905\u0917',
                                                '7': '\u091C\u0941\u0932\u093E',
                                                '6': '\u091C\u0942\u0928',
                                                '5': '\u092E\u0908',
                                                '12': '\u0926\u093F\u0938\u0902',
                                                '11': '\u0928\u0935\u0902',
                                                '10': '\u0905\u0915\u094D\u091F\u0942',
                                                '9': '\u0938\u093F\u0924\u0902',
                                                '1': '\u091C\u0928',
                                                '2': '\u092B\u093C\u0930',
                                                '3': '\u092E\u093E\u0930\u094D\u091A',
                                                '4': '\u0905\u092A\u094D\u0930\u0948'
                                            },
                                            'narrow': {
                                                '8': '\u0905',
                                                '7': '\u091C\u0941',
                                                '6': '\u091C\u0942',
                                                '5': '\u092E',
                                                '12': '\u0926\u093F',
                                                '11': '\u0928',
                                                '10': '\u0905',
                                                '9': '\u0938\u093F',
                                                '1': '\u091C',
                                                '2': '\u092B\u093C',
                                                '3': '\u092E\u093E',
                                                '4': '\u0905'
                                            },
                                            'wide': {
                                                '8': '\u0905\u0917\u0938\u094D\u0924',
                                                '7': '\u091C\u0941\u0932\u093E\u0908',
                                                '6': '\u091C\u0942\u0928',
                                                '5': '\u092E\u0908',
                                                '12': '\u0926\u093F\u0938\u0902\u092C\u0930',
                                                '11': '\u0928\u0935\u0902\u092C\u0930',
                                                '10': '\u0905\u0915\u094D\u091F\u0942\u092C\u0930',
                                                '9': '\u0938\u093F\u0924\u0902\u092C\u0930',
                                                '1': '\u091C\u0928\u0935\u0930\u0940',
                                                '2': '\u092B\u093C\u0930\u0935\u0930\u0940',
                                                '3': '\u092E\u093E\u0930\u094D\u091A',
                                                '4': '\u0905\u092A\u094D\u0930\u0948\u0932'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u0930\u0935\u093F',
                                                'mon': '\u0938\u094B\u092E',
                                                'tue': '\u092E\u0902\u0917\u0932',
                                                'wed': '\u092C\u0941\u0927',
                                                'thu': '\u0917\u0941\u0930\u0941',
                                                'fri': '\u0936\u0941\u0915\u094D\u0930',
                                                'sat': '\u0936\u0928\u093F'
                                            },
                                            'narrow': {
                                                'sun': '\u0930',
                                                'mon': '\u0938\u094B',
                                                'tue': '\u092E\u0902',
                                                'wed': '\u092C\u0941',
                                                'thu': '\u0917\u0941',
                                                'fri': '\u0936\u0941',
                                                'sat': '\u0936'
                                            },
                                            'short': {
                                                'sun': '\u0930',
                                                'mon': '\u0938\u094B',
                                                'tue': '\u092E\u0902',
                                                'wed': '\u092C\u0941',
                                                'thu': '\u0917\u0941',
                                                'fri': '\u0936\u0941',
                                                'sat': '\u0936'
                                            },
                                            'wide': {
                                                'sun': '\u0930\u0935\u093F\u0935\u093E\u0930',
                                                'mon': '\u0938\u094B\u092E\u0935\u093E\u0930',
                                                'tue': '\u092E\u0902\u0917\u0932\u0935\u093E\u0930',
                                                'wed': '\u092C\u0941\u0927\u0935\u093E\u0930',
                                                'thu': '\u0917\u0941\u0930\u0941\u0935\u093E\u0930',
                                                'fri': '\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930',
                                                'sat': '\u0936\u0928\u093F\u0935\u093E\u0930'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u0930\u0935\u093F',
                                                'mon': '\u0938\u094B\u092E',
                                                'tue': '\u092E\u0902\u0917\u0932',
                                                'wed': '\u092C\u0941\u0927',
                                                'thu': '\u0917\u0941\u0930\u0941',
                                                'fri': '\u0936\u0941\u0915\u094D\u0930',
                                                'sat': '\u0936\u0928\u093F'
                                            },
                                            'narrow': {
                                                'sun': '\u0930',
                                                'mon': '\u0938\u094B',
                                                'tue': '\u092E\u0902',
                                                'wed': '\u092C\u0941',
                                                'thu': '\u0917\u0941',
                                                'fri': '\u0936\u0941',
                                                'sat': '\u0936'
                                            },
                                            'short': {
                                                'sun': '\u0930',
                                                'mon': '\u0938\u094B',
                                                'tue': '\u092E\u0902',
                                                'wed': '\u092C\u0941',
                                                'thu': '\u0917\u0941',
                                                'fri': '\u0936\u0941',
                                                'sat': '\u0936'
                                            },
                                            'wide': {
                                                'sun': '\u0930\u0935\u093F\u0935\u093E\u0930',
                                                'mon': '\u0938\u094B\u092E\u0935\u093E\u0930',
                                                'tue': '\u092E\u0902\u0917\u0932\u0935\u093E\u0930',
                                                'wed': '\u092C\u0941\u0927\u0935\u093E\u0930',
                                                'thu': '\u0917\u0941\u0930\u0941\u0935\u093E\u0930',
                                                'fri': '\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930',
                                                'sat': '\u0936\u0928\u093F\u0935\u093E\u0930'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u0924\u093F1',
                                                '2': '\u0924\u093F2',
                                                '3': '\u0924\u093F3',
                                                '4': '\u0924\u093F4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u092A\u0939\u0932\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '2': '\u0926\u0942\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '3': '\u0924\u0940\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '4': '\u091A\u094C\u0925\u0940 \u0924\u093F\u092E\u093E\u0939\u0940'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u0924\u093F1',
                                                '2': '\u0924\u093F2',
                                                '3': '\u0924\u093F3',
                                                '4': '\u0924\u093F4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u092A\u0939\u0932\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '2': '\u0926\u0942\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '3': '\u0924\u0940\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940',
                                                '4': '\u091A\u094C\u0925\u0940 \u0924\u093F\u092E\u093E\u0939\u0940'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u092A\u0942\u0930\u094D\u0935',
                                                'pm': '\u0905\u092A\u0930'
                                            },
                                            'narrow': {
                                                'am': '\u092A\u0942',
                                                'pm': '\u0905'
                                            },
                                            'wide': {
                                                'am': '\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928',
                                                'pm': '\u0905\u092A\u0930\u093E\u0939\u094D\u0928'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u092A\u0942\u0930\u094D\u0935',
                                                'pm': '\u0905\u092A\u0930'
                                            },
                                            'narrow': {
                                                'am': '\u092A\u0942',
                                                'pm': '\u0905'
                                            },
                                            'wide': {
                                                'am': '\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928',
                                                'pm': '\u0905\u092A\u0930\u093E\u0939\u094D\u0928'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0908\u0938\u094D\u0935\u0940',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0908\u0938\u094D\u0935\u0940',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u0908\u0938\u094D\u0935\u0940',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'dd-MM-y',
                                        'short': 'd-M-yy'
                                    },
                                    'timeFormats': {
                                        'full': 'h:mm:ss a zzzz',
                                        'long': 'h:mm:ss a z',
                                        'medium': 'h:mm:ss a',
                                        'short': 'h:mm a'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \u0915\u094B {0}',
                                        'long': '{1} \u0915\u094B {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMM': 'MM-y',
                                            'yMEd': 'E, d/M/y',
                                            'yMd': 'd/M/y',
                                            'yM': 'M/y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMMEd': 'E, d MMMM',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM, G y',
                                            'GyMMMEd': 'E, d MMM, G y',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'h:mm a',
                                            'Hm': 'HH:mm',
                                            'hms': 'h:mm:ss a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, d MMM y',
                                            'yMMMd': 'd MMM, y',
                                            'yMMM': 'MMM y',
                                            'yMMdd': 'dd-MM-y',
                                            'Hms': 'HH:mm:ss',
                                            'Ed': 'E d',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM G y',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, d/M',
                                            'MMdd': 'dd-MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMdd': 'dd MMM',
                                            'MMMEd': 'E, d MMM',
                                            'MMMMd': 'd MMMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d MMM \u2013 E, d MMM',
                                                'M': 'E, d MMM \u2013 E, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd MMM\u2013d',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, d/M \u2013 E, d/M',
                                                'M': 'E, d/M \u2013 E, d/M'
                                            },
                                            'Md': {
                                                'd': 'd/M \u2013 d/M',
                                                'M': 'd/M \u2013 d/M'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M/y \u2013 M/y',
                                                'y': 'M/y \u2013 M/y'
                                            },
                                            'yMd': {
                                                'd': 'd/M/y \u2013 d/M/y',
                                                'M': 'd/M/y \u2013 d/M/y',
                                                'y': 'd/M/y \u2013 d/M/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, d/M/y \u2013 E, d/M/y',
                                                'M': 'E, d/M/y \u2013 E, d/M/y',
                                                'y': 'E, d/M/y \u2013 E, d/M/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd MMM\u2013d, y',
                                                'M': 'd MMM \u2013 d MMM, y',
                                                'y': 'd MMM, y \u2013 d MMM, y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d MMM \u2013 E, d MMM, y',
                                                'M': 'E, d MMM \u2013 E, d MMM, y',
                                                'y': 'E, d MMM, y \u2013 E, d MMM, y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM \u2013 MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate hr}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('hr', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0}, standardno vrijeme',
                                'regionFormat-type-daylight': '{0}, ljetno vrijeme',
                                'regionFormat': '{0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm; -HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'kol',
                                                '7': 'srp',
                                                '6': 'lip',
                                                '5': 'svi',
                                                '12': 'pro',
                                                '11': 'stu',
                                                '10': 'lis',
                                                '9': 'ruj',
                                                '1': 'sij',
                                                '2': 'velj',
                                                '3': 'o\u017Eu',
                                                '4': 'tra'
                                            },
                                            'narrow': {
                                                '8': '8.',
                                                '7': '7.',
                                                '6': '6.',
                                                '5': '5.',
                                                '12': '12.',
                                                '11': '11.',
                                                '10': '10.',
                                                '9': '9.',
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '8': 'kolovoza',
                                                '7': 'srpnja',
                                                '6': 'lipnja',
                                                '5': 'svibnja',
                                                '12': 'prosinca',
                                                '11': 'studenoga',
                                                '10': 'listopada',
                                                '9': 'rujna',
                                                '1': 'sije\u010Dnja',
                                                '2': 'velja\u010De',
                                                '3': 'o\u017Eujka',
                                                '4': 'travnja'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'kol',
                                                '7': 'srp',
                                                '6': 'lip',
                                                '5': 'svi',
                                                '12': 'pro',
                                                '11': 'stu',
                                                '10': 'lis',
                                                '9': 'ruj',
                                                '1': 'sij',
                                                '2': 'velj',
                                                '3': 'o\u017Eu',
                                                '4': 'tra'
                                            },
                                            'narrow': {
                                                '8': '8.',
                                                '7': '7.',
                                                '6': '6.',
                                                '5': '5.',
                                                '12': '12.',
                                                '11': '11.',
                                                '10': '10.',
                                                '9': '9.',
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '8': 'kolovoz',
                                                '7': 'srpanj',
                                                '6': 'lipanj',
                                                '5': 'svibanj',
                                                '12': 'prosinac',
                                                '11': 'studeni',
                                                '10': 'listopad',
                                                '9': 'rujan',
                                                '1': 'sije\u010Danj',
                                                '2': 'velja\u010Da',
                                                '3': 'o\u017Eujak',
                                                '4': 'travanj'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'ned',
                                                'mon': 'pon',
                                                'tue': 'uto',
                                                'wed': 'sri',
                                                'thu': '\u010Det',
                                                'fri': 'pet',
                                                'sat': 'sub'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': 'U',
                                                'wed': 'S',
                                                'thu': '\u010C',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'ned',
                                                'mon': 'pon',
                                                'tue': 'uto',
                                                'wed': 'sri',
                                                'thu': '\u010Det',
                                                'fri': 'pet',
                                                'sat': 'sub'
                                            },
                                            'wide': {
                                                'sun': 'nedjelja',
                                                'mon': 'ponedjeljak',
                                                'tue': 'utorak',
                                                'wed': 'srijeda',
                                                'thu': '\u010Detvrtak',
                                                'fri': 'petak',
                                                'sat': 'subota'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'ned',
                                                'mon': 'pon',
                                                'tue': 'uto',
                                                'wed': 'sri',
                                                'thu': '\u010Det',
                                                'fri': 'pet',
                                                'sat': 'sub'
                                            },
                                            'narrow': {
                                                'sun': 'n',
                                                'mon': 'p',
                                                'tue': 'u',
                                                'wed': 's',
                                                'thu': '\u010D',
                                                'fri': 'p',
                                                'sat': 's'
                                            },
                                            'short': {
                                                'sun': 'ned',
                                                'mon': 'pon',
                                                'tue': 'uto',
                                                'wed': 'sri',
                                                'thu': '\u010Det',
                                                'fri': 'pet',
                                                'sat': 'sub'
                                            },
                                            'wide': {
                                                'sun': 'nedjelja',
                                                'mon': 'ponedjeljak',
                                                'tue': 'utorak',
                                                'wed': 'srijeda',
                                                'thu': '\u010Detvrtak',
                                                'fri': 'petak',
                                                'sat': 'subota'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1kv',
                                                '2': '2kv',
                                                '3': '3kv',
                                                '4': '4kv'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1kv',
                                                '2': '2kv',
                                                '3': '3kv',
                                                '4': '4kv'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': 'popodne',
                                                'am': 'AM',
                                                'earlyMorning': 'ujutro',
                                                'evening': 'nave\u010Der',
                                                'morning': 'prijepodne',
                                                'night': 'no\u0107u',
                                                'noon': 'podne',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'afternoon': 'popodne',
                                                'am': 'AM',
                                                'earlyMorning': 'ujutro',
                                                'evening': 'nave\u010Der',
                                                'morning': 'prijepodne',
                                                'night': 'no\u0107u',
                                                'noon': 'n',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'noon': 'podne',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': 'popodne',
                                                'am': 'AM',
                                                'earlyMorning': 'ujutro',
                                                'evening': 'nave\u010Der',
                                                'morning': 'prijepodne',
                                                'night': 'no\u0107u',
                                                'noon': 'podne',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'afternoon': 'popodne',
                                                'am': 'AM',
                                                'earlyMorning': 'ujutro',
                                                'evening': 'nave\u010Der',
                                                'morning': 'prijepodne',
                                                'night': 'no\u0107u',
                                                'noon': 'n',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'noon': 'podne',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Prije Krista',
                                            '0-alt-variant': 'pr. n. e.',
                                            '1': 'Poslije Krista',
                                            '1-alt-variant': 'n.e.'
                                        },
                                        'eraAbbr': {
                                            '0': 'pr. Kr.',
                                            '0-alt-variant': 'pr. n. e.',
                                            '1': 'p. Kr.',
                                            '1-alt-variant': 'n.e.'
                                        },
                                        'eraNarrow': {
                                            '0': 'pr.n.e.',
                                            '0-alt-variant': 'pr. n. e.',
                                            '1': 'AD',
                                            '1-alt-variant': 'n.e.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d. MMMM y.',
                                        'long': 'd. MMMM y.',
                                        'medium': 'd. MMM y.',
                                        'short': 'd.M.yy.'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \'u\' {0}',
                                        'long': '{1} \'u\' {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMM': 'MM. y.',
                                            'yMEd': 'E, d. M. y.',
                                            'yMd': 'd. M. y.',
                                            'yM': 'M. y.',
                                            'y': 'y.',
                                            'ms': 'mm:ss',
                                            'Ed': 'E, d.',
                                            'd': 'd.',
                                            'GyMMMd': 'd. MMM y. G',
                                            'GyMMMEd': 'E, d. MMM y. G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'hh:mm a',
                                            'Hm': 'HH:mm',
                                            'yQQQQ': 'QQQQ y.',
                                            'yQQQ': 'QQQ y.',
                                            'yMMMM': 'LLLL y.',
                                            'yMMMEd': 'E, d. MMM y.',
                                            'yMMMd': 'd. MMM y.',
                                            'yMMM': 'LLL y.',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'hh:mm:ss a',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y. G',
                                            'GyMMM': 'LLL y. G',
                                            'M': 'L.',
                                            'Md': 'd. M.',
                                            'MEd': 'E, d. M.',
                                            'MMdd': 'dd. MM.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'E, d. MMM',
                                            'MMMMd': 'd. MMMM',
                                            'MMMMdd': 'dd. MMMM',
                                            'MMMMEd': 'E, d. MMMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, dd. - E, dd. MMM',
                                                'M': 'E, dd. MMM - E, dd. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'dd. - dd. MMM',
                                                'M': 'dd. MMM - dd. MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL-LLL'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM. - E, dd.MM.',
                                                'M': 'E, dd.MM. - E, dd.MM.'
                                            },
                                            'Md': {
                                                'd': 'dd.MM. - dd.MM.',
                                                'M': 'dd.MM. - dd.MM.'
                                            },
                                            'M': {
                                                'M': 'MM. - MM.'
                                            },
                                            'Hv': {
                                                'H': 'HH - HH \'h\' v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h - h \'h\' a v'
                                            },
                                            'y': {
                                                'y': 'y. - y.'
                                            },
                                            'yM': {
                                                'M': 'MM.y. - MM.y.',
                                                'y': 'MM.y. - MM.y.'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y. - dd.MM.y.',
                                                'M': 'dd.MM.y. - dd.MM.y.',
                                                'y': 'dd.MM.y. - dd.MM.y.'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd.MM.y. - E, dd.MM.y.',
                                                'M': 'E, dd.MM.y. - E, dd.MM.y.',
                                                'y': 'E, dd.MM.y. - E, dd.MM.y.'
                                            },
                                            'yMMM': {
                                                'M': 'LLL-LLL y.',
                                                'y': 'LLL y. - LLL y.'
                                            },
                                            'yMMMd': {
                                                'd': 'dd. - dd. MMM y.',
                                                'M': 'dd. MMM - dd. MMM y.',
                                                'y': 'dd. MMM y. - dd. MMM y.'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, dd. - E, dd. MMM y.',
                                                'M': 'E, dd. MMM - E, dd. MMM y.',
                                                'y': 'E, dd. MMM y. - E, dd. MMM y.'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL \u2013 LLLL y.',
                                                'y': 'LLLL y. - LLLL y.'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH\'h\''
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h - h\'h\' a'
                                            },
                                            'd': {
                                                'd': 'dd. - dd.'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate hu}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9317
             * timeZoneNames: 24r9317
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('hu', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} z\u00F3naid\u0151',
                                'regionFormat-type-daylight': '{0} ny\u00E1ri id\u0151',
                                'regionFormat': '{0} id\u0151',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'j\u00FAl.',
                                                '6': 'j\u00FAn.',
                                                '5': 'm\u00E1j.',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'szept.',
                                                '1': 'jan.',
                                                '2': 'febr.',
                                                '3': 'm\u00E1rc.',
                                                '4': '\u00E1pr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'Sz',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': '\u00C1'
                                            },
                                            'wide': {
                                                '8': 'augusztus',
                                                '7': 'j\u00FAlius',
                                                '6': 'j\u00FAnius',
                                                '5': 'm\u00E1jus',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'okt\u00F3ber',
                                                '9': 'szeptember',
                                                '1': 'janu\u00E1r',
                                                '2': 'febru\u00E1r',
                                                '3': 'm\u00E1rcius',
                                                '4': '\u00E1prilis'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'j\u00FAl.',
                                                '6': 'j\u00FAn.',
                                                '5': 'm\u00E1j.',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'szept.',
                                                '1': 'jan.',
                                                '2': 'febr.',
                                                '3': 'm\u00E1rc.',
                                                '4': '\u00E1pr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'Sz',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': '\u00C1'
                                            },
                                            'wide': {
                                                '8': 'augusztus',
                                                '7': 'j\u00FAlius',
                                                '6': 'j\u00FAnius',
                                                '5': 'm\u00E1jus',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'okt\u00F3ber',
                                                '9': 'szeptember',
                                                '1': 'janu\u00E1r',
                                                '2': 'febru\u00E1r',
                                                '3': 'm\u00E1rcius',
                                                '4': '\u00E1prilis'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sze',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Szo'
                                            },
                                            'narrow': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sz',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Sz'
                                            },
                                            'short': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sze',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Szo'
                                            },
                                            'wide': {
                                                'sun': 'vas\u00E1rnap',
                                                'mon': 'h\u00E9tf\u0151',
                                                'tue': 'kedd',
                                                'wed': 'szerda',
                                                'thu': 'cs\u00FCt\u00F6rt\u00F6k',
                                                'fri': 'p\u00E9ntek',
                                                'sat': 'szombat'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sze',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Szo'
                                            },
                                            'narrow': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sz',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Sz'
                                            },
                                            'short': {
                                                'sun': 'V',
                                                'mon': 'H',
                                                'tue': 'K',
                                                'wed': 'Sze',
                                                'thu': 'Cs',
                                                'fri': 'P',
                                                'sat': 'Szo'
                                            },
                                            'wide': {
                                                'sun': 'vas\u00E1rnap',
                                                'mon': 'h\u00E9tf\u0151',
                                                'tue': 'kedd',
                                                'wed': 'szerda',
                                                'thu': 'cs\u00FCt\u00F6rt\u00F6k',
                                                'fri': 'p\u00E9ntek',
                                                'sat': 'szombat'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'N1',
                                                '2': 'N2',
                                                '3': 'N3',
                                                '4': 'N4'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': 'I. negyed\u00E9v',
                                                '2': 'II. negyed\u00E9v',
                                                '3': 'III. negyed\u00E9v',
                                                '4': 'IV. negyed\u00E9v'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'N1',
                                                '2': 'N2',
                                                '3': 'N3',
                                                '4': 'N4'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '1. negyed\u00E9v',
                                                '2': '2. negyed\u00E9v',
                                                '3': '3. negyed\u00E9v',
                                                '4': '4. negyed\u00E9v'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            },
                                            'narrow': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            },
                                            'wide': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            },
                                            'narrow': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            },
                                            'wide': {
                                                'am': 'de.',
                                                'pm': 'du.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'id\u0151sz\u00E1m\u00EDt\u00E1sunk el\u0151tt',
                                            '0-alt-variant': 'Kr. e.',
                                            '1': 'id\u0151sz\u00E1m\u00EDt\u00E1sunk szerint',
                                            '1-alt-variant': 'Kr. u.'
                                        },
                                        'eraAbbr': {
                                            '0': 'i. e.',
                                            '0-alt-variant': 'Kr. e.',
                                            '1': 'i. sz.',
                                            '1-alt-variant': 'Kr. u.'
                                        },
                                        'eraNarrow': {
                                            '0': 'ie.',
                                            '0-alt-variant': 'Kr. e.',
                                            '1': 'isz.',
                                            '1-alt-variant': 'Kr. u.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y. MMMM d., EEEE',
                                        'long': 'y. MMMM d.',
                                        'medium': 'y MMM d',
                                        'short': 'y. MM. dd.'
                                    },
                                    'timeFormats': {
                                        'full': 'H:mm:ss zzzz',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMEd': 'y. MMM d., E',
                                            'yMMMd': 'y. MMM d.',
                                            'yMMM': 'y. MMM',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHm': 'E HH:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'd., E',
                                            'd': 'd',
                                            'GyMMMd': 'G y. MMM d.',
                                            'GyMMMEd': 'G y. MMM d., E',
                                            'h': 'a h',
                                            'yQQQQ': 'y. QQQQ',
                                            'yQQQ': 'y. QQQ',
                                            'yMMMM': 'y. MMMM',
                                            'Hms': 'H:mm:ss',
                                            'hms': 'a h:mm:ss',
                                            'Hm': 'H:mm',
                                            'hm': 'a h:mm',
                                            'H': 'H',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'G y.',
                                            'GyMMM': 'G y. MMM',
                                            'M': 'L',
                                            'Md': 'M. d.',
                                            'MEd': 'M. d., E',
                                            'MMM': 'LLL',
                                            'MMMd': 'MMM d.',
                                            'MMMEd': 'MMM d., E',
                                            'MMMMd': 'MMMM d.',
                                            'mmss': 'mm:ss',
                                            'ms': 'mm:ss',
                                            'y': 'y.',
                                            'yM': 'y. M.',
                                            'yMd': 'y. MM. dd.',
                                            'yMEd': 'y. MM. dd., E'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'MMM d., E \u2013 d., E',
                                                'M': 'MMM d., E \u2013 MMM d., E'
                                            },
                                            'MMMd': {
                                                'd': 'MMM d\u2013d.',
                                                'M': 'MMM d. \u2013 MMM d.'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'M. dd., E \u2013 M. d., E',
                                                'M': 'M. d., E \u2013 M. d., E'
                                            },
                                            'Md': {
                                                'd': 'M. d\u2013d.',
                                                'M': 'M. d. \u2013 M. d.'
                                            },
                                            'M': {
                                                'M': 'M\u2013M.'
                                            },
                                            'Hv': {
                                                'H': 'H\u2013H v'
                                            },
                                            'hv': {
                                                'a': 'a h \u2013 a h v',
                                                'h': 'a h\u2013h v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'y. MM\u2013MM.',
                                                'y': 'y. MM. \u2013 y. MM.'
                                            },
                                            'yMd': {
                                                'd': 'y. MM. dd\u2013dd.',
                                                'M': 'y. MM. dd. \u2013 MM. dd.',
                                                'y': 'y. MM. dd. \u2013 y. MM. dd.'
                                            },
                                            'yMEd': {
                                                'd': 'y. MM. dd., E \u2013 dd., E',
                                                'M': 'y. MM. dd., E \u2013 MM. dd., E',
                                                'y': 'y. MM. dd., E \u2013 y. MM. dd., E'
                                            },
                                            'yMMM': {
                                                'M': 'y. MMM\u2013MMM',
                                                'y': 'y. MMM \u2013 y. MMM'
                                            },
                                            'yMMMd': {
                                                'd': 'y. MMM d\u2013d.',
                                                'M': 'y. MMM d. \u2013 MMM d.',
                                                'y': 'y. MMM d. \u2013 y. MMM d.'
                                            },
                                            'yMMMEd': {
                                                'd': 'y. MMM d., E \u2013 d., E',
                                                'M': 'y. MMM d., E \u2013 MMM d., E',
                                                'y': 'y. MMM d., E \u2013 y. MMM d., E'
                                            },
                                            'yMMMM': {
                                                'M': 'y. MMMM\u2013MMMM',
                                                'y': 'y. MMMM \u2013 y. MMMM'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm\u2013H:mm v',
                                                'm': 'H:mm\u2013H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'a h:mm \u2013 a h:mm v',
                                                'h': 'a h:mm\u2013h:mm v',
                                                'm': 'a h:mm\u2013h:mm v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm\u2013H:mm',
                                                'm': 'H:mm\u2013H:mm'
                                            },
                                            'hm': {
                                                'a': 'a h:mm \u2013 a h:mm',
                                                'h': 'a h:mm\u2013h:mm',
                                                'm': 'a h:mm\u2013h:mm'
                                            },
                                            'H': {
                                                'H': 'H-H'
                                            },
                                            'h': {
                                                'a': 'a h \u2013 a h',
                                                'h': 'a h\u2013h'
                                            },
                                            'd': {
                                                'd': 'd\u2013d.'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate it}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('it', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Ora standard: {0}',
                                'regionFormat-type-daylight': 'Ora legale: {0}',
                                'regionFormat': 'Ora {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'ago',
                                                '7': 'lug',
                                                '6': 'giu',
                                                '5': 'mag',
                                                '12': 'dic',
                                                '11': 'nov',
                                                '10': 'ott',
                                                '9': 'set',
                                                '1': 'gen',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'L',
                                                '6': 'G',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'G',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'agosto',
                                                '7': 'luglio',
                                                '6': 'giugno',
                                                '5': 'maggio',
                                                '12': 'dicembre',
                                                '11': 'novembre',
                                                '10': 'ottobre',
                                                '9': 'settembre',
                                                '1': 'gennaio',
                                                '2': 'febbraio',
                                                '3': 'marzo',
                                                '4': 'aprile'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'ago',
                                                '7': 'lug',
                                                '6': 'giu',
                                                '5': 'mag',
                                                '12': 'dic',
                                                '11': 'nov',
                                                '10': 'ott',
                                                '9': 'set',
                                                '1': 'gen',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'L',
                                                '6': 'G',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'G',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'Agosto',
                                                '7': 'Luglio',
                                                '6': 'Giugno',
                                                '5': 'Maggio',
                                                '12': 'Dicembre',
                                                '11': 'Novembre',
                                                '10': 'Ottobre',
                                                '9': 'Settembre',
                                                '1': 'Gennaio',
                                                '2': 'Febbraio',
                                                '3': 'Marzo',
                                                '4': 'Aprile'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'lun',
                                                'tue': 'mar',
                                                'wed': 'mer',
                                                'thu': 'gio',
                                                'fri': 'ven',
                                                'sat': 'sab'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'G',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'dom',
                                                'mon': 'lun',
                                                'tue': 'mar',
                                                'wed': 'mer',
                                                'thu': 'gio',
                                                'fri': 'ven',
                                                'sat': 'sab'
                                            },
                                            'wide': {
                                                'sun': 'domenica',
                                                'mon': 'luned\u00EC',
                                                'tue': 'marted\u00EC',
                                                'wed': 'mercoled\u00EC',
                                                'thu': 'gioved\u00EC',
                                                'fri': 'venerd\u00EC',
                                                'sat': 'sabato'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'lun',
                                                'tue': 'mar',
                                                'wed': 'mer',
                                                'thu': 'gio',
                                                'fri': 'ven',
                                                'sat': 'sab'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'G',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'dom',
                                                'mon': 'lun',
                                                'tue': 'mar',
                                                'wed': 'mer',
                                                'thu': 'gio',
                                                'fri': 'ven',
                                                'sat': 'sab'
                                            },
                                            'wide': {
                                                'sun': 'Domenica',
                                                'mon': 'Luned\u00EC',
                                                'tue': 'Marted\u00EC',
                                                'wed': 'Mercoled\u00EC',
                                                'thu': 'Gioved\u00EC',
                                                'fri': 'Venerd\u00EC',
                                                'sat': 'Sabato'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1\u00BA trimestre',
                                                '2': '2\u00BA trimestre',
                                                '3': '3\u00BA trimestre',
                                                '4': '4\u00BA trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'Primo trimestre',
                                                '2': 'Secondo trimestre',
                                                '3': 'Terzo trimestre',
                                                '4': 'Quarto trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'm.',
                                                'pm': 'p.'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'm.',
                                                'pm': 'p.'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'a.C.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'd.C.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'aC',
                                            '0-alt-variant': 'BCE',
                                            '1': 'dC',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'aC',
                                            '0-alt-variant': 'BCE',
                                            '1': 'dC',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE d MMMM y',
                                        'long': 'dd MMMM y',
                                        'medium': 'dd/MMM/y',
                                        'short': 'dd/MM/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yQQQ': 'QQQ y',
                                            'Gy': 'y G',
                                            'EHms': 'E HH:mm:ss',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHm': 'E HH.mm',
                                            'Ehm': 'E h.mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'yQQQQ': 'QQQQ y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'hh:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'hh:mm a',
                                            'H': 'HH',
                                            'h': 'hh a',
                                            'GyMMMEd': 'E d MMM y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M/y',
                                            'yMd': 'd/M/y',
                                            'yMEd': 'E d/M/y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'd MMM y',
                                            'yMMMEd': 'E d MMM y',
                                            'yMMMM': 'MMMM y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E dd - E dd MMM',
                                                'M': 'E dd MMM - E dd MMM'
                                            },
                                            'MMMd': {
                                                'd': 'dd-dd MMM',
                                                'M': 'dd MMM - dd MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E dd/MM - E dd/MM',
                                                'M': 'E dd/MM - E dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH-HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd/MM/y - E dd/MM/y',
                                                'M': 'E dd/MM/y - E dd/MM/y',
                                                'y': 'E dd/MM/y - E dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'dd-dd MMM y',
                                                'M': 'dd MMM - dd MMM y',
                                                'y': 'dd MMM y - dd MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d - E d MMM y',
                                                'M': 'E d MMM - E d MMM y',
                                                'y': 'E d MMM y - E d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM-MMMM y',
                                                'y': 'MMMM y - MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ja}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ja', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1}\uFF08{0}\uFF09',
                                'regionFormat-type-standard': '{0}\u6A19\u6E96\u6642',
                                'regionFormat-type-daylight': '{0}\u590F\u6642\u9593',
                                'regionFormat': '{0}\u6642\u9593',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'short': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'wide': {
                                                'sun': '\u65E5\u66DC\u65E5',
                                                'mon': '\u6708\u66DC\u65E5',
                                                'tue': '\u706B\u66DC\u65E5',
                                                'wed': '\u6C34\u66DC\u65E5',
                                                'thu': '\u6728\u66DC\u65E5',
                                                'fri': '\u91D1\u66DC\u65E5',
                                                'sat': '\u571F\u66DC\u65E5'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'short': {
                                                'sun': '\u65E5',
                                                'mon': '\u6708',
                                                'tue': '\u706B',
                                                'wed': '\u6C34',
                                                'thu': '\u6728',
                                                'fri': '\u91D1',
                                                'sat': '\u571F'
                                            },
                                            'wide': {
                                                'sun': '\u65E5\u66DC\u65E5',
                                                'mon': '\u6708\u66DC\u65E5',
                                                'tue': '\u706B\u66DC\u65E5',
                                                'wed': '\u6C34\u66DC\u65E5',
                                                'thu': '\u6728\u66DC\u65E5',
                                                'fri': '\u91D1\u66DC\u65E5',
                                                'sat': '\u571F\u66DC\u65E5'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C1\u56DB\u534A\u671F',
                                                '2': '\u7B2C2\u56DB\u534A\u671F',
                                                '3': '\u7B2C3\u56DB\u534A\u671F',
                                                '4': '\u7B2C4\u56DB\u534A\u671F'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C1\u56DB\u534A\u671F',
                                                '2': '\u7B2C2\u56DB\u534A\u671F',
                                                '3': '\u7B2C3\u56DB\u534A\u671F',
                                                '4': '\u7B2C4\u56DB\u534A\u671F'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            },
                                            'narrow': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            },
                                            'wide': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            },
                                            'narrow': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            },
                                            'wide': {
                                                'am': '\u5348\u524D',
                                                'noon': '\u6B63\u5348',
                                                'pm': '\u5348\u5F8C'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u7D00\u5143\u524D',
                                            '0-alt-variant': '\u897F\u66A6\u7D00\u5143\u524D',
                                            '1': '\u897F\u66A6',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u7D00\u5143\u524D',
                                            '0-alt-variant': '\u897F\u66A6\u7D00\u5143\u524D',
                                            '1': '\u897F\u66A6',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'BC',
                                            '0-alt-variant': 'BCE',
                                            '1': 'AD',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y\u5E74M\u6708d\u65E5EEEE',
                                        'long': 'y\u5E74M\u6708d\u65E5',
                                        'medium': 'y/MM/dd',
                                        'short': 'y/MM/dd'
                                    },
                                    'timeFormats': {
                                        'full': 'H\u6642mm\u5206ss\u79D2 zzzz',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMEEEEd': 'y/M/dEEEE',
                                            'yMEd': 'y/M/d(E)',
                                            'yMd': 'y/M/d',
                                            'yM': 'y/M',
                                            'y': 'y\u5E74',
                                            'ms': 'mm:ss',
                                            'MMMEEEEd': 'M\u6708d\u65E5EEEE',
                                            'd': 'd\u65E5',
                                            'GyMMM': 'Gy\u5E74M\u6708',
                                            'GyMMMd': 'Gy\u5E74M\u6708d\u65E5',
                                            'GyMMMEd': 'Gy\u5E74M\u6708d\u65E5(E)',
                                            'GyMMMEEEEd': 'Gy\u5E74M\u6708d\u65E5EEEE',
                                            'h': 'aK\u6642',
                                            'H': 'H\u6642',
                                            'hm': 'aK:mm',
                                            'yQQQQ': 'yQQQQ',
                                            'yQQQ': 'y/QQQ',
                                            'yMMMEEEEd': 'y\u5E74M\u6708d\u65E5EEEE',
                                            'yMMMEd': 'y\u5E74M\u6708d\u65E5(E)',
                                            'yMMMd': 'y\u5E74M\u6708d\u65E5',
                                            'yMMM': 'y\u5E74M\u6708',
                                            'yMM': 'y/MM',
                                            'Hm': 'H:mm',
                                            'Ed': 'd\u65E5(E)',
                                            'EEEEd': 'd\u65E5EEEE',
                                            'Ehm': 'a K \u6642 mm \u5206 (E)',
                                            'EHm': 'HH \u6642 mm \u5206 (E)',
                                            'Ehms': 'a K \u6642 mm \u5206 ss \u79D2 (E)',
                                            'EHms': 'HH \u6642 mm \u5206 ss \u79D2 (E)',
                                            'Gy': 'Gy\u5E74',
                                            'hms': 'aK:mm:ss',
                                            'Hms': 'H:mm:ss',
                                            'M': 'M\u6708',
                                            'Md': 'M/d',
                                            'MEd': 'M/d(E)',
                                            'MEEEEd': 'M/dEEEE',
                                            'MMM': 'M\u6708',
                                            'MMMd': 'M\u6708d\u65E5',
                                            'MMMEd': 'M\u6708d\u65E5(E)'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'M\u6708d\u65E5(E)\uFF5Ed\u65E5(E)',
                                                'M': 'M\u6708d\u65E5(E)\uFF5EM\u6708d\u65E5(E)'
                                            },
                                            'MMMd': {
                                                'd': 'M\u6708d\u65E5\uFF5Ed\u65E5',
                                                'M': 'M\u6708d\u65E5\uFF5EM\u6708d\u65E5'
                                            },
                                            'MMM': {
                                                'M': 'M\u6708\uFF5EM\u6708'
                                            },
                                            'MEd': {
                                                'd': 'MM/dd(E)\uFF5EMM/dd(E)',
                                                'M': 'MM/dd(E)\uFF5EMM/dd(E)'
                                            },
                                            'Md': {
                                                'd': 'MM/dd\uFF5EMM/dd',
                                                'M': 'MM/dd\uFF5EMM/dd'
                                            },
                                            'M': {
                                                'M': 'M\u6708\uFF5EM\u6708'
                                            },
                                            'Hv': {
                                                'H': 'H\u6642\uFF5EH\u6642(v)'
                                            },
                                            'hv': {
                                                'a': 'aK\u6642\uFF5EaK\u6642(v)',
                                                'h': 'aK\u6642\uFF5EK\u6642(v)'
                                            },
                                            'intervalFormatFallback': '{0}\uFF5E{1}',
                                            'y': {
                                                'y': 'y\u5E74\uFF5Ey\u5E74'
                                            },
                                            'yM': {
                                                'M': 'y/MM\uFF5Ey/MM',
                                                'y': 'y/MM\uFF5Ey/MM'
                                            },
                                            'yMd': {
                                                'd': 'y/MM/dd\uFF5Ey/MM/dd',
                                                'M': 'y/MM/dd\uFF5Ey/MM/dd',
                                                'y': 'y/MM/dd\uFF5Ey/MM/dd'
                                            },
                                            'yMEd': {
                                                'd': 'y/MM/dd(E)\uFF5Ey/MM/dd(E)',
                                                'M': 'y/MM/dd(E)\uFF5Ey/MM/dd(E)',
                                                'y': 'y/MM/dd(E)\uFF5Ey/MM/dd(E)'
                                            },
                                            'yMMM': {
                                                'M': 'y\u5E74M\u6708\uFF5EM\u6708',
                                                'y': 'y\u5E74M\u6708\uFF5Ey\u5E74M\u6708'
                                            },
                                            'yMMMd': {
                                                'd': 'y\u5E74M\u6708d\u65E5\uFF5Ed\u65E5',
                                                'M': 'y\u5E74M\u6708d\u65E5\uFF5EM\u6708d\u65E5',
                                                'y': 'y\u5E74M\u6708d\u65E5\uFF5Ey\u5E74M\u6708d\u65E5'
                                            },
                                            'yMMMEd': {
                                                'd': 'y\u5E74M\u6708d\u65E5(E)\uFF5Ed\u65E5(E)',
                                                'M': 'y\u5E74M\u6708d\u65E5(E)\uFF5EM\u6708d\u65E5(E)',
                                                'y': 'y\u5E74M\u6708d\u65E5(E)\uFF5Ey\u5E74M\u6708d\u65E5(E)'
                                            },
                                            'yMMMM': {
                                                'M': 'y\u5E74M\u6708\uFF5EM\u6708',
                                                'y': 'y\u5E74M\u6708\uFF5Ey\u5E74M\u6708'
                                            },
                                            'MMMM': {
                                                'M': 'M\u6708\uFF5EM\u6708'
                                            },
                                            'Hmv': {
                                                'H': 'H\u6642mm\u5206\uFF5EH\u6642mm\u5206(v)',
                                                'm': 'H\u6642mm\u5206\uFF5EH\u6642mm\u5206(v)'
                                            },
                                            'hmv': {
                                                'a': 'aK\u6642mm\u5206\uFF5EaK\u6642mm\u5206(v)',
                                                'h': 'aK\u6642mm\u5206\uFF5EK\u6642mm\u5206(v)',
                                                'm': 'aK\u6642mm\u5206\uFF5EK\u6642mm\u5206(v)'
                                            },
                                            'Hm': {
                                                'H': 'H\u6642mm\u5206\uFF5EH\u6642mm\u5206',
                                                'm': 'H\u6642mm\u5206\uFF5EH\u6642mm\u5206'
                                            },
                                            'hm': {
                                                'a': 'aK\u6642mm\u5206\uFF5EaK\u6642mm\u5206',
                                                'h': 'aK\u6642mm\u5206\uFF5EK\u6642mm\u5206',
                                                'm': 'aK\u6642mm\u5206\uFF5EK\u6642mm\u5206'
                                            },
                                            'H': {
                                                'H': 'H\u6642\uFF5EH\u6642'
                                            },
                                            'h': {
                                                'a': 'aK\u6642\uFF5EaK\u6642',
                                                'h': 'aK\u6642\uFF5EK\u6642'
                                            },
                                            'd': {
                                                'd': 'd\u65E5\uFF5Ed\u65E5'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ko}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ko', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} \uD45C\uC900\uC2DC',
                                'regionFormat-type-daylight': '{0} \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04',
                                'regionFormat': '{0} \uC2DC\uAC04',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            },
                                            'narrow': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            },
                                            'wide': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            },
                                            'narrow': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            },
                                            'wide': {
                                                '8': '8\uC6D4',
                                                '7': '7\uC6D4',
                                                '6': '6\uC6D4',
                                                '5': '5\uC6D4',
                                                '12': '12\uC6D4',
                                                '11': '11\uC6D4',
                                                '10': '10\uC6D4',
                                                '9': '9\uC6D4',
                                                '1': '1\uC6D4',
                                                '2': '2\uC6D4',
                                                '3': '3\uC6D4',
                                                '4': '4\uC6D4'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'narrow': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'short': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'wide': {
                                                'sun': '\uC77C\uC694\uC77C',
                                                'mon': '\uC6D4\uC694\uC77C',
                                                'tue': '\uD654\uC694\uC77C',
                                                'wed': '\uC218\uC694\uC77C',
                                                'thu': '\uBAA9\uC694\uC77C',
                                                'fri': '\uAE08\uC694\uC77C',
                                                'sat': '\uD1A0\uC694\uC77C'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'narrow': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'short': {
                                                'sun': '\uC77C',
                                                'mon': '\uC6D4',
                                                'tue': '\uD654',
                                                'wed': '\uC218',
                                                'thu': '\uBAA9',
                                                'fri': '\uAE08',
                                                'sat': '\uD1A0'
                                            },
                                            'wide': {
                                                'sun': '\uC77C\uC694\uC77C',
                                                'mon': '\uC6D4\uC694\uC77C',
                                                'tue': '\uD654\uC694\uC77C',
                                                'wed': '\uC218\uC694\uC77C',
                                                'thu': '\uBAA9\uC694\uC77C',
                                                'fri': '\uAE08\uC694\uC77C',
                                                'sat': '\uD1A0\uC694\uC77C'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1\uBD84\uAE30',
                                                '2': '2\uBD84\uAE30',
                                                '3': '3\uBD84\uAE30',
                                                '4': '4\uBD84\uAE30'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\uC81C 1/4\uBD84\uAE30',
                                                '2': '\uC81C 2/4\uBD84\uAE30',
                                                '3': '\uC81C 3/4\uBD84\uAE30',
                                                '4': '\uC81C 4/4\uBD84\uAE30'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1\uBD84\uAE30',
                                                '2': '2\uBD84\uAE30',
                                                '3': '3\uBD84\uAE30',
                                                '4': '4\uBD84\uAE30'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\uC81C 1/4\uBD84\uAE30',
                                                '2': '\uC81C 2/4\uBD84\uAE30',
                                                '3': '\uC81C 3/4\uBD84\uAE30',
                                                '4': '\uC81C 4/4\uBD84\uAE30'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            },
                                            'narrow': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            },
                                            'wide': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            },
                                            'narrow': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            },
                                            'wide': {
                                                'am': '\uC624\uC804',
                                                'pm': '\uC624\uD6C4'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\uC11C\uB825\uAE30\uC6D0\uC804',
                                            '0-alt-variant': 'BCE',
                                            '1': '\uC11C\uB825\uAE30\uC6D0',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\uAE30\uC6D0\uC804',
                                            '0-alt-variant': 'BCE',
                                            '1': '\uC11C\uAE30',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\uAE30\uC6D0\uC804',
                                            '0-alt-variant': 'BCE',
                                            '1': '\uC11C\uAE30',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y\uB144 M\uC6D4 d\uC77C EEEE',
                                        'long': 'y\uB144 M\uC6D4 d\uC77C',
                                        'medium': 'y. M. d.',
                                        'short': 'yy. M. d.'
                                    },
                                    'timeFormats': {
                                        'full': 'a h\uC2DC m\uBD84 s\uCD08 zzzz',
                                        'long': 'a h\uC2DC m\uBD84 s\uCD08 z',
                                        'medium': 'a h:mm:ss',
                                        'short': 'a h:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMd': 'y. M. d.',
                                            'yM': 'y. M.',
                                            'y': 'y\uB144',
                                            'ms': 'mm:ss',
                                            'mmss': 'mm:ss',
                                            'MMMEEEEd': 'MMM d\uC77C EEEE',
                                            'MMMEd': 'MMM d\uC77C (E)',
                                            'MMMd': 'MMM d\uC77C',
                                            'MMM': 'LLL',
                                            'GyMMMd': 'G y\uB144 MMM d\uC77C',
                                            'GyMMMEd': 'G y\uB144 MMM d\uC77C (E)',
                                            'GyMMMEEEEd': 'G y\uB144 MMM d\uC77C EEEE',
                                            'h': 'a h\uC2DC',
                                            'H': 'H\uC2DC',
                                            'HHmmss': 'HH:mm:ss',
                                            'hm': 'a h:mm',
                                            'yMEd': 'y. M. d. (E)',
                                            'yQQQQ': 'y\uB144 QQQQ',
                                            'yQQQ': 'y\uB144 QQQ',
                                            'yMMMEEEEd': 'y\uB144 MMM d\uC77C EEEE',
                                            'yMMMEd': 'y\uB144 MMM d\uC77C (E)',
                                            'yMMMd': 'y\uB144 MMM d\uC77C',
                                            'yMMM': 'y\uB144 MMM',
                                            'yMM': 'y. M.',
                                            'yMEEEEd': 'y. M. d. EEEE',
                                            'GyMMM': 'G y\uB144 MMM',
                                            'd': 'd\uC77C',
                                            'Ed': 'd\uC77C (E)',
                                            'EEEEd': 'd\uC77C EEEE',
                                            'Ehm': '(E) a h:mm',
                                            'EHm': '(E) HH:mm',
                                            'Ehms': '(E) a h:mm:ss',
                                            'EHms': '(E) HH:mm:ss',
                                            'Gy': 'G y\uB144',
                                            'Hm': 'HH:mm',
                                            'hms': 'a h:mm:ss',
                                            'Hms': 'H\uC2DC m\uBD84 s\uCD08',
                                            'M': 'M\uC6D4',
                                            'Md': 'M. d.',
                                            'MEd': 'M. d. (E)',
                                            'MEEEEd': 'M. d. EEEE'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'M\uC6D4 d\uC77C (E) ~ d\uC77C (E)',
                                                'M': 'M\uC6D4 d\uC77C (E) ~ M\uC6D4 d\uC77C (E)'
                                            },
                                            'MMMd': {
                                                'd': 'M\uC6D4 d\uC77C ~ d\uC77C',
                                                'M': 'M\uC6D4 d\uC77C ~ M\uC6D4 d\uC77C'
                                            },
                                            'MMM': {
                                                'M': 'MMM ~ MMM'
                                            },
                                            'MEd': {
                                                'd': 'M. d (E) ~ M. d (E)',
                                                'M': 'M. d (E) ~ M. d (E)'
                                            },
                                            'Md': {
                                                'd': 'M. d ~ M. d',
                                                'M': 'M. d ~ M. d'
                                            },
                                            'M': {
                                                'M': 'M\uC6D4 ~ M\uC6D4'
                                            },
                                            'Hv': {
                                                'H': 'HH ~ HH\uC2DC v'
                                            },
                                            'hv': {
                                                'a': 'a h\uC2DC ~ a h\uC2DC(v)',
                                                'h': 'a h\uC2DC ~ h\uC2DC(v)'
                                            },
                                            'intervalFormatFallback': '{0} ~ {1}',
                                            'd': {
                                                'd': 'd\uC77C ~ d\uC77C'
                                            },
                                            'yM': {
                                                'M': 'y. M ~ y. M',
                                                'y': 'y. M ~ y. M'
                                            },
                                            'yMd': {
                                                'd': 'y. M. d. ~ y. M. d.',
                                                'M': 'y. M. d. ~ y. M. d.',
                                                'y': 'y. M. d. ~ y. M. d.'
                                            },
                                            'yMEd': {
                                                'd': 'y. M. d. (E) ~ y. M. d. (E)',
                                                'M': 'y. M. d. (E) ~ y. M. d. (E)',
                                                'y': 'y. M. d. (E) ~ y. M. d. (E)'
                                            },
                                            'yMMM': {
                                                'M': 'y\uB144 M\uC6D4~M\uC6D4',
                                                'y': 'y\uB144 M\uC6D4 ~ y\uB144 M\uC6D4'
                                            },
                                            'yMMMd': {
                                                'd': 'y\uB144 M\uC6D4 d\uC77C~d\uC77C',
                                                'M': 'y\uB144 M\uC6D4 d\uC77C ~ M\uC6D4 d\uC77C',
                                                'y': 'y\uB144 M\uC6D4 d\uC77C ~ y\uB144 M\uC6D4 d\uC77C'
                                            },
                                            'yMMMEd': {
                                                'd': 'y\uB144 M\uC6D4 d\uC77C (E) ~ d\uC77C (E)',
                                                'M': 'y\uB144 M\uC6D4 d\uC77C (E) ~ M\uC6D4 d\uC77C (E)',
                                                'y': 'y\uB144 M\uC6D4 d\uC77C (E) ~ y\uB144 M\uC6D4 d\uC77C (E)'
                                            },
                                            'yMMMEEEEd': {
                                                'd': 'y\uB144 M\uC6D4 d\uC77C EEEE ~ d\uC77C EEEE',
                                                'M': 'y\uB144 M\uC6D4 d\uC77C EEEE ~ M\uC6D4 d\uC77C EEEE',
                                                'y': 'y\uB144 M\uC6D4 d\uC77C EEEE ~ y\uB144 M\uC6D4 d\uC77C EEEE'
                                            },
                                            'yMMMM': {
                                                'M': 'y\uB144 MM\uC6D4 ~ MM\uC6D4',
                                                'y': 'y\uB144 MM\uC6D4 ~ y\uB144 MM\uC6D4'
                                            },
                                            'y': {
                                                'y': 'y\uB144 ~ y\uB144'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL-LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm ~ HH:mm v',
                                                'm': 'HH:mm ~ HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'a h:mm ~ a h:mm v',
                                                'h': 'a h:mm~h:mm v',
                                                'm': 'a h:mm~h:mm v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm ~ HH:mm',
                                                'm': 'HH:mm ~ HH:mm'
                                            },
                                            'hm': {
                                                'a': 'a h:mm ~ a h:mm',
                                                'h': 'a h:mm~h:mm',
                                                'm': 'a h:mm~h:mm'
                                            },
                                            'H': {
                                                'H': 'HH ~ HH\uC2DC'
                                            },
                                            'h': {
                                                'a': 'a h\uC2DC ~ a h\uC2DC',
                                                'h': 'a h\uC2DC ~ h\uC2DC'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate nb}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('nb', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'normaltid \u2013 {0}',
                                'regionFormat-type-daylight': 'sommertid \u2013 {0}',
                                'regionFormat': 'tidssone for {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH.mm;-HH.mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'jul.',
                                                '6': 'jun.',
                                                '5': 'mai',
                                                '12': 'des.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'sep.',
                                                '1': 'jan.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'mai',
                                                '12': 'desember',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'mars',
                                                '4': 'april'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'mai',
                                                '12': 'des',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'mai',
                                                '12': 'desember',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'mars',
                                                '4': 'april'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 's\u00F8n.',
                                                'mon': 'man.',
                                                'tue': 'tir.',
                                                'wed': 'ons.',
                                                'thu': 'tor.',
                                                'fri': 'fre.',
                                                'sat': 'l\u00F8r.'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 's\u00F8.',
                                                'mon': 'ma.',
                                                'tue': 'ti.',
                                                'wed': 'on.',
                                                'thu': 'to.',
                                                'fri': 'fr.',
                                                'sat': 'l\u00F8.'
                                            },
                                            'wide': {
                                                'sun': 's\u00F8ndag',
                                                'mon': 'mandag',
                                                'tue': 'tirsdag',
                                                'wed': 'onsdag',
                                                'thu': 'torsdag',
                                                'fri': 'fredag',
                                                'sat': 'l\u00F8rdag'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 's\u00F8.',
                                                'mon': 'ma.',
                                                'tue': 'ti.',
                                                'wed': 'on.',
                                                'thu': 'to.',
                                                'fri': 'fr.',
                                                'sat': 'l\u00F8.'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 's\u00F8.',
                                                'mon': 'ma.',
                                                'tue': 'ti.',
                                                'wed': 'on.',
                                                'thu': 'to.',
                                                'fri': 'fr.',
                                                'sat': 'l\u00F8.'
                                            },
                                            'wide': {
                                                'sun': 's\u00F8ndag',
                                                'mon': 'mandag',
                                                'tue': 'tirsdag',
                                                'wed': 'onsdag',
                                                'thu': 'torsdag',
                                                'fri': 'fredag',
                                                'sat': 'l\u00F8rdag'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. kvartal',
                                                '2': '2. kvartal',
                                                '3': '3. kvartal',
                                                '4': '4. kvartal'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'f\u00F8r v\u00E5r tidsregning',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'v\u00E5r tidsregning'
                                        },
                                        'eraAbbr': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'fvt.',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'vt.'
                                        },
                                        'eraNarrow': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'fvt.',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'vt'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE d. MMMM y',
                                        'long': 'd. MMMM y',
                                        'medium': 'd. MMM y',
                                        'short': 'dd.MM.yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH.mm.ss zzzz',
                                        'long': 'HH.mm.ss z',
                                        'medium': 'HH.mm.ss',
                                        'short': 'HH.mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} \'kl.\' {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMMMEd': 'E d. MMM y',
                                            'yMMMd': 'd. MMM y',
                                            'yMMM': 'MMM y',
                                            'Ehms': 'E h.mm.ss a',
                                            'EHm': 'E HH.mm',
                                            'Ehm': 'E h.mm a',
                                            'Ed': 'E d.',
                                            'd': 'd.',
                                            'GyMMMd': 'd. MMM y G',
                                            'GyMMMEd': 'E d. MMM y G',
                                            'h': 'h a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'Hms': 'HH.mm.ss',
                                            'hms': 'h.mm.ss a',
                                            'Hm': 'HH.mm',
                                            'hm': 'h.mm a',
                                            'H': 'HH',
                                            'EHms': 'E HH.mm.ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L.',
                                            'Md': 'd.M.',
                                            'MEd': 'E d.M',
                                            'MMdd': 'd.M.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'E d. MMM',
                                            'ms': 'mm.ss',
                                            'y': 'y',
                                            'yM': 'M.y',
                                            'yMd': 'd.M.y',
                                            'yMEd': 'E d.MM.y',
                                            'yMM': 'MM.y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d.\u2013E d. MMM',
                                                'M': 'E d. MMM\u2013E d. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd.\u2013d. MMM',
                                                'M': 'd. MMM\u2013d. MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E dd.MM.\u2013E dd.MM.',
                                                'M': 'E dd.MM.\u2013E dd.MM.'
                                            },
                                            'Md': {
                                                'd': 'dd.MM.\u2013dd.MM.',
                                                'M': 'dd.MM.\u2013dd.MM.'
                                            },
                                            'M': {
                                                'M': 'M.\u2013M.'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'H\u2013H v',
                                                'h': 'H\u2013H v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM.y\u2013MM.y',
                                                'y': 'MM.y\u2013MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y\u2013dd.MM.y',
                                                'M': 'dd.MM.y\u2013dd.MM.y',
                                                'y': 'dd.MM.y\u2013dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd.MM.y\u2013E dd.MM.y',
                                                'M': 'E dd.MM.y\u2013E dd.MM.y',
                                                'y': 'E dd.MM.y\u2013E dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y\u2013MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.\u2013d. MMM y',
                                                'M': 'd. MMM\u2013d. MMM y',
                                                'y': 'd. MMM y\u2013d. MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d.\u2013E d. MMM y',
                                                'M': 'E d. MMM\u2013E d. MMM y',
                                                'y': 'E d. MMM y\u2013E d. MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y\u2013MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH.mm\u2013HH.mm v',
                                                'm': 'HH.mm\u2013HH.mm v'
                                            },
                                            'hmv': {
                                                'a': 'H.mm\u2013H.mm v',
                                                'h': 'H.mm\u2013H.mm v',
                                                'm': 'H.mm\u2013H.mm v'
                                            },
                                            'Hm': {
                                                'H': 'HH.mm\u2013HH.mm',
                                                'm': 'HH.mm\u2013HH.mm'
                                            },
                                            'hm': {
                                                'a': 'H.mm\u2013H.mm',
                                                'h': 'H.mm\u2013H.mm',
                                                'm': 'H.mm\u2013H.mm'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'H\u2013H',
                                                'h': 'H\u2013H'
                                            },
                                            'd': {
                                                'd': 'd.\u2013d.'
                                            },
                                            'intervalFormatFallback': '{0}\u2013{1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate nl}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9308
             * timeZoneNames: 24r9308
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('nl', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Standaardtijd {0}',
                                'regionFormat-type-daylight': 'Zomertijd {0}',
                                'regionFormat': '{0}-tijd',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'jul.',
                                                '6': 'jun.',
                                                '5': 'mei',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'sep.',
                                                '1': 'jan.',
                                                '2': 'feb.',
                                                '3': 'mrt.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'augustus',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'mei',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januari',
                                                '2': 'februari',
                                                '3': 'maart',
                                                '4': 'april'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'mei',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mrt',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'augustus',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'mei',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januari',
                                                '2': 'februari',
                                                '3': 'maart',
                                                '4': 'april'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'zo',
                                                'mon': 'ma',
                                                'tue': 'di',
                                                'wed': 'wo',
                                                'thu': 'do',
                                                'fri': 'vr',
                                                'sat': 'za'
                                            },
                                            'narrow': {
                                                'sun': 'Z',
                                                'mon': 'M',
                                                'tue': 'D',
                                                'wed': 'W',
                                                'thu': 'D',
                                                'fri': 'V',
                                                'sat': 'Z'
                                            },
                                            'short': {
                                                'sun': 'zo',
                                                'mon': 'ma',
                                                'tue': 'di',
                                                'wed': 'wo',
                                                'thu': 'do',
                                                'fri': 'vr',
                                                'sat': 'za'
                                            },
                                            'wide': {
                                                'sun': 'zondag',
                                                'mon': 'maandag',
                                                'tue': 'dinsdag',
                                                'wed': 'woensdag',
                                                'thu': 'donderdag',
                                                'fri': 'vrijdag',
                                                'sat': 'zaterdag'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'zo',
                                                'mon': 'ma',
                                                'tue': 'di',
                                                'wed': 'wo',
                                                'thu': 'do',
                                                'fri': 'vr',
                                                'sat': 'za'
                                            },
                                            'narrow': {
                                                'sun': 'Z',
                                                'mon': 'M',
                                                'tue': 'D',
                                                'wed': 'W',
                                                'thu': 'D',
                                                'fri': 'V',
                                                'sat': 'Z'
                                            },
                                            'short': {
                                                'sun': 'zo',
                                                'mon': 'ma',
                                                'tue': 'di',
                                                'wed': 'wo',
                                                'thu': 'do',
                                                'fri': 'vr',
                                                'sat': 'za'
                                            },
                                            'wide': {
                                                'sun': 'zondag',
                                                'mon': 'maandag',
                                                'tue': 'dinsdag',
                                                'wed': 'woensdag',
                                                'thu': 'donderdag',
                                                'fri': 'vrijdag',
                                                'sat': 'zaterdag'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1e kwartaal',
                                                '2': '2e kwartaal',
                                                '3': '3e kwartaal',
                                                '4': '4e kwartaal'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1e kwartaal',
                                                '2': '2e kwartaal',
                                                '3': '3e kwartaal',
                                                '4': '4e kwartaal'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'noon': '12 uur \'s middags',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'noon': 'n',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'noon': '12 uur \'s middags',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'a.m.',
                                                'noon': '12 uur \'s middags',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'noon': 'n',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'voormiddag',
                                                'noon': '12 uur \'s middags',
                                                'pm': 'p.m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Voor Christus',
                                            '0-alt-variant': 'v\u00F3\u00F3r gewone jaartelling',
                                            '1': 'na Christus',
                                            '1-alt-variant': 'gewone jaartelling'
                                        },
                                        'eraAbbr': {
                                            '0': 'v.Chr.',
                                            '0-alt-variant': 'v.g.j.',
                                            '1': 'n.Chr.',
                                            '1-alt-variant': 'g.j.'
                                        },
                                        'eraNarrow': {
                                            '0': 'v.C.',
                                            '0-alt-variant': 'vgj',
                                            '1': 'n.C.',
                                            '1-alt-variant': 'gj'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'dd-MM-yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E d MMM y',
                                            'EHms': 'E HH:mm:ss',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHm': 'E HH:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E d MMM y G',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH',
                                            'h': 'h a',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd-M',
                                            'MEd': 'E d-M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'MMMMd': 'd MMMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M-y',
                                            'yMd': 'd-M-y',
                                            'yMEd': 'E d-M-y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'd MMM y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d - E d MMM',
                                                'M': 'E d MMM - E d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E dd-MM - E dd-MM',
                                                'M': 'E dd-MM - E dd-MM'
                                            },
                                            'Md': {
                                                'd': 'dd-MM - dd-MM',
                                                'M': 'dd-MM - dd-MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH-HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'intervalFormatFallback': '{0} - {1}',
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM-y - MM-y',
                                                'y': 'MM-y - MM-y'
                                            },
                                            'yMd': {
                                                'd': 'dd-MM-y - dd-MM-y',
                                                'M': 'dd-MM-y - dd-MM-y',
                                                'y': 'dd-MM-y - dd-MM-y'
                                            },
                                            'yMEd': {
                                                'd': 'E dd-MM-y - E dd-MM-y',
                                                'M': 'E dd-MM-y - E dd-MM-y',
                                                'y': 'E dd-MM-y - E dd-MM-y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM y',
                                                'M': 'd MMM - d MMM y',
                                                'y': 'd MMM y - d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d - E d MMM y',
                                                'M': 'E d MMM - E d MMM y',
                                                'y': 'E d MMM y - E d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM-MMMM y',
                                                'y': 'MMMM y - MMMM y'
                                            },
                                            'MMMM': {
                                                'M': 'MMMM\u2013MMMM'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate pl}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('pl', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (czas standardowy)',
                                'regionFormat-type-daylight': '{0} (czas letni)',
                                'regionFormat': 'Czas: {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'sie',
                                                '7': 'lip',
                                                '6': 'cze',
                                                '5': 'maj',
                                                '12': 'gru',
                                                '11': 'lis',
                                                '10': 'pa\u017A',
                                                '9': 'wrz',
                                                '1': 'sty',
                                                '2': 'lut',
                                                '3': 'mar',
                                                '4': 'kwi'
                                            },
                                            'narrow': {
                                                '8': 's',
                                                '7': 'l',
                                                '6': 'c',
                                                '5': 'm',
                                                '12': 'g',
                                                '11': 'l',
                                                '10': 'p',
                                                '9': 'w',
                                                '1': 's',
                                                '2': 'l',
                                                '3': 'm',
                                                '4': 'k'
                                            },
                                            'wide': {
                                                '8': 'sierpnia',
                                                '7': 'lipca',
                                                '6': 'czerwca',
                                                '5': 'maja',
                                                '12': 'grudnia',
                                                '11': 'listopada',
                                                '10': 'pa\u017Adziernika',
                                                '9': 'wrze\u015Bnia',
                                                '1': 'stycznia',
                                                '2': 'lutego',
                                                '3': 'marca',
                                                '4': 'kwietnia'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'sie',
                                                '7': 'lip',
                                                '6': 'cze',
                                                '5': 'maj',
                                                '12': 'gru',
                                                '11': 'lis',
                                                '10': 'pa\u017A',
                                                '9': 'wrz',
                                                '1': 'sty',
                                                '2': 'lut',
                                                '3': 'mar',
                                                '4': 'kwi'
                                            },
                                            'narrow': {
                                                '8': 's',
                                                '7': 'l',
                                                '6': 'c',
                                                '5': 'm',
                                                '12': 'g',
                                                '11': 'l',
                                                '10': 'p',
                                                '9': 'w',
                                                '1': 's',
                                                '2': 'l',
                                                '3': 'm',
                                                '4': 'k'
                                            },
                                            'wide': {
                                                '8': 'sierpie\u0144',
                                                '7': 'lipiec',
                                                '6': 'czerwiec',
                                                '5': 'maj',
                                                '12': 'grudzie\u0144',
                                                '11': 'listopad',
                                                '10': 'pa\u017Adziernik',
                                                '9': 'wrzesie\u0144',
                                                '1': 'stycze\u0144',
                                                '2': 'luty',
                                                '3': 'marzec',
                                                '4': 'kwiecie\u0144'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'niedz.',
                                                'mon': 'pon.',
                                                'tue': 'wt.',
                                                'wed': '\u015Br.',
                                                'thu': 'czw.',
                                                'fri': 'pt.',
                                                'sat': 'sob.'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': 'W',
                                                'wed': '\u015A',
                                                'thu': 'C',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'niedz.',
                                                'mon': 'pon.',
                                                'tue': 'wt.',
                                                'wed': '\u015Br.',
                                                'thu': 'czw.',
                                                'fri': 'pt.',
                                                'sat': 'sob.'
                                            },
                                            'wide': {
                                                'sun': 'niedziela',
                                                'mon': 'poniedzia\u0142ek',
                                                'tue': 'wtorek',
                                                'wed': '\u015Broda',
                                                'thu': 'czwartek',
                                                'fri': 'pi\u0105tek',
                                                'sat': 'sobota'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'niedz.',
                                                'mon': 'pon.',
                                                'tue': 'wt.',
                                                'wed': '\u015Br.',
                                                'thu': 'czw.',
                                                'fri': 'pt.',
                                                'sat': 'sob.'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': 'W',
                                                'wed': '\u015A',
                                                'thu': 'C',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'niedz.',
                                                'mon': 'pon.',
                                                'tue': 'wt.',
                                                'wed': '\u015Br.',
                                                'thu': 'czw.',
                                                'fri': 'pt.',
                                                'sat': 'sob.'
                                            },
                                            'wide': {
                                                'sun': 'niedziela',
                                                'mon': 'poniedzia\u0142ek',
                                                'tue': 'wtorek',
                                                'wed': '\u015Broda',
                                                'thu': 'czwartek',
                                                'fri': 'pi\u0105tek',
                                                'sat': 'sobota'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'I kwarta\u0142',
                                                '2': 'II kwarta\u0142',
                                                '3': 'III kwarta\u0142',
                                                '4': 'IV kwarta\u0142'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1 kw.',
                                                '2': '2 kw.',
                                                '3': '3 kw.',
                                                '4': '4 kw.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'I kwarta\u0142',
                                                '2': 'II kwarta\u0142',
                                                '3': 'III kwarta\u0142',
                                                '4': 'IV kwarta\u0142'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            },
                                            'narrow': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            },
                                            'wide': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            },
                                            'narrow': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            },
                                            'wide': {
                                                'noon': 'w po\u0142udnie',
                                                'pm': 'PM',
                                                'afternoon': 'po po\u0142udniu',
                                                'am': 'AM',
                                                'earlyMorning': 'nad ranem',
                                                'evening': 'wieczorem',
                                                'lateMorning': 'przed po\u0142udniem',
                                                'morning': 'rano',
                                                'night': 'w nocy'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'p.n.e.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.e.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'p.n.e.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.e.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'p.n.e.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.e.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'dd.MM.y'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMMMd': 'd MMM y',
                                            'yMMM': 'LLL y',
                                            'yMM': 'MM.y',
                                            'yMEd': 'E, d.MM.y',
                                            'EHm': 'E, HH:mm',
                                            'Ehm': 'E, h:mm a',
                                            'Ed': 'E, d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E, d MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E, d MMM y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd.MM',
                                            'MEd': 'E, d.MM',
                                            'MMdd': 'd.MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E, d MMM',
                                            'MMMMd': 'd MMMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'MM.y',
                                            'yMd': 'd.MM.y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d MMM \u2013 E, d MMM',
                                                'M': 'E, d MMM - E, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u2013LLL'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM \u2013 E, dd.MM',
                                                'M': 'E, dd.MM \u2013 E, dd.MM'
                                            },
                                            'Md': {
                                                'd': 'dd.MM\u2013dd.MM',
                                                'M': 'dd.MM\u2013dd.MM'
                                            },
                                            'M': {
                                                'M': 'MM-MM'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM.y - MM.y',
                                                'y': 'MM.y - MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd-dd.MM.y',
                                                'M': 'dd.MM-dd.MM.y',
                                                'y': 'dd.MM.y-dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd.MM.y - E, dd.MM.y',
                                                'M': 'E, dd.MM.y - E, dd.MM.y',
                                                'y': 'E, dd.MM.y - E, dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL-LLL y',
                                                'y': 'LLL y - LLL y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM y',
                                                'M': 'd MMM - d MMM y',
                                                'y': 'd MMM y - d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d - E, d MMM y',
                                                'M': 'E, d MMM - E, d MMM y',
                                                'y': 'E, d MMM y - E, d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL-LLLL y',
                                                'y': 'LLLL y - LLLL y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate pt-PT}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('pt-PT', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Hora Padr\u00E3o de {0}',
                                'regionFormat-type-daylight': 'Hora de Ver\u00E3o de {0}',
                                'regionFormat': 'Hora de {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'Ago',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'Mai',
                                                '12': 'Dez',
                                                '11': 'Nov',
                                                '10': 'Out',
                                                '9': 'Set',
                                                '1': 'Jan',
                                                '2': 'Fev',
                                                '3': 'Mar',
                                                '4': 'Abr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'Agosto',
                                                '7': 'Julho',
                                                '6': 'Junho',
                                                '5': 'Maio',
                                                '12': 'Dezembro',
                                                '11': 'Novembro',
                                                '10': 'Outubro',
                                                '9': 'Setembro',
                                                '1': 'Janeiro',
                                                '2': 'Fevereiro',
                                                '3': 'Mar\u00E7o',
                                                '4': 'Abril'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Ago',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'Mai',
                                                '12': 'Dez',
                                                '11': 'Nov',
                                                '10': 'Out',
                                                '9': 'Set',
                                                '1': 'Jan',
                                                '2': 'Fev',
                                                '3': 'Mar',
                                                '4': 'Abr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'Agosto',
                                                '7': 'Julho',
                                                '6': 'Junho',
                                                '5': 'Maio',
                                                '12': 'Dezembro',
                                                '11': 'Novembro',
                                                '10': 'Outubro',
                                                '9': 'Setembro',
                                                '1': 'Janeiro',
                                                '2': 'Fevereiro',
                                                '3': 'Mar\u00E7o',
                                                '4': 'Abril'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'S',
                                                'tue': 'T',
                                                'wed': 'Q',
                                                'thu': 'Q',
                                                'fri': 'S',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'do',
                                                'mon': 'sg',
                                                'tue': 'te',
                                                'wed': 'qu',
                                                'thu': 'qi',
                                                'fri': 'sx',
                                                'sat': 'sb'
                                            },
                                            'wide': {
                                                'sun': 'domingo',
                                                'mon': 'segunda-feira',
                                                'tue': 'ter\u00E7a-feira',
                                                'wed': 'quarta-feira',
                                                'thu': 'quinta-feira',
                                                'fri': 'sexta-feira',
                                                'sat': 's\u00E1bado'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'S',
                                                'tue': 'T',
                                                'wed': 'Q',
                                                'thu': 'Q',
                                                'fri': 'S',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'do',
                                                'mon': 'sg',
                                                'tue': 'te',
                                                'wed': 'qu',
                                                'thu': 'qi',
                                                'fri': 'sx',
                                                'sat': 'sb'
                                            },
                                            'wide': {
                                                'sun': 'domingo',
                                                'mon': 'segunda-feira',
                                                'tue': 'ter\u00E7a-feira',
                                                'wed': 'quarta-feira',
                                                'thu': 'quinta-feira',
                                                'fri': 'sexta-feira',
                                                'sat': 's\u00E1bado'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1.\u00BA trimestre',
                                                '2': '2.\u00BA trimestre',
                                                '3': '3.\u00BA trimestre',
                                                '4': '4.\u00BA trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1.\u00BA trimestre',
                                                '2': '2.\u00BA trimestre',
                                                '3': '3.\u00BA trimestre',
                                                '4': '4.\u00BA trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': 'tarde',
                                                'am': 'a.m.',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'afternoon': 'tarde',
                                                'am': 'a.m.',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'afternoon': 'tarde',
                                                'am': 'da manh\u00E3',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'da tarde'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': 'tarde',
                                                'am': 'a.m.',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meia-noite',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'afternoon': 'tarde',
                                                'am': 'a.m.',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'afternoon': 'tarde',
                                                'am': 'a.m.',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p.m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Antes de Cristo',
                                            '0-alt-variant': 'a.E.C.',
                                            '1': 'Ano do Senhor',
                                            '1-alt-variant': 'E.C.'
                                        },
                                        'eraAbbr': {
                                            '0': 'a.C.',
                                            '0-alt-variant': 'a.E.C.',
                                            '1': 'd.C.',
                                            '1-alt-variant': 'E.C.'
                                        },
                                        'eraNarrow': {
                                            '0': 'a.C.',
                                            '0-alt-variant': 'a.E.C.',
                                            '1': 'd.C.',
                                            '1-alt-variant': 'E.C.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d \'de\' MMMM \'de\' y',
                                        'long': 'd \'de\' MMMM \'de\' y',
                                        'medium': 'dd/MM/y',
                                        'short': 'dd/MM/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \'\u00E0s\' {0}',
                                        'long': '{1} \'\u00E0s\' {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMEd': 'E, dd/MM/y',
                                            'yMd': 'dd/MM/y',
                                            'yM': 'MM/y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMMEd': 'E, d \'de\' MMMM',
                                            'MMMMd': 'd \'de\' MMMM',
                                            'MMMEd': 'E, d/MM',
                                            'MMMd': 'd/MM',
                                            'MMM': 'LLL',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'HHmm': 'HH:mm',
                                            'HHmmss': 'HH:mm:ss',
                                            'hm': 'h:mm a',
                                            'Hm': 'HH:mm',
                                            'yMM': 'MM/y',
                                            'yMMM': 'MM/y',
                                            'yQQQQ': 'QQQQ \'de\' y',
                                            'yQQQ': 'QQQQ \'de\' y',
                                            'yMMMMEd': 'E, d \'de\' MMMM \'de\' y',
                                            'yMMMMd': 'd \'de\' MMMM \'de\' y',
                                            'yMMMM': 'MMMM \'de\' y',
                                            'yMMMEEEEd': 'EEEE, d/MM/y',
                                            'yMMMEd': 'E, d/MM/y',
                                            'yMMMd': 'd/MM/y',
                                            'GyMMMEd': 'E, d \'de\' MMM \'de\' y G',
                                            'GyMMMd': 'd \'de\' MMM \'de\' y G',
                                            'd': 'd',
                                            'Ed': 'E, d',
                                            'Ehm': 'E, h:mm a',
                                            'EHm': 'E, HH:mm',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM \'de\' y G',
                                            'hms': 'h:mm:ss a',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, dd/MM',
                                            'MMdd': 'dd/MM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d \'de\' MMM - E, d \'de\' MMM',
                                                'M': 'E, d \'de\' MMM - E, d \'de\' MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d \'de\' MMM',
                                                'M': 'd \'de\' MMM - d \'de\' MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, dd/MM - E, dd/MM',
                                                'M': 'E, dd/MM - E, dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH - HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h - h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd/MM/y - E, dd/MM/y',
                                                'M': 'E, dd/MM/y - E, dd/MM/y',
                                                'y': 'E, dd/MM/y - E, dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM \'de\' y',
                                                'y': 'MMM \'de\' y - MMM \'de\' y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d \'de\' MMM \'de\' y',
                                                'M': 'd \'de\' MMM - d \'de\' MMM \'de\' y',
                                                'y': 'd \'de\' MMM \'de\' y - d \'de\' MMM \'de\' y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d \'de\' MMM - E, d \'de\' MMM \'de\' y',
                                                'M': 'E, d \'de\' MMM - E, d \'de\' MMM \'de\' y',
                                                'y': 'E, d \'de\' MMM \'de\' y - E, d \'de\' MMM \'de\' y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM - MMMM \'de\' y',
                                                'y': 'MMMM \'de\' y - MMMM \'de\' y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm - HH:mm v',
                                                'm': 'HH:mm - HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm - h:mm a v',
                                                'm': 'h:mm - h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm - HH:mm',
                                                'm': 'HH:mm - HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm - h:mm a',
                                                'm': 'h:mm - h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate pt}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('pt', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': 'Hor\u00E1rio {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'ago',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'mai',
                                                '12': 'dez',
                                                '11': 'nov',
                                                '10': 'out',
                                                '9': 'set',
                                                '1': 'jan',
                                                '2': 'fev',
                                                '3': 'mar',
                                                '4': 'abr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'agosto',
                                                '7': 'julho',
                                                '6': 'junho',
                                                '5': 'maio',
                                                '12': 'dezembro',
                                                '11': 'novembro',
                                                '10': 'outubro',
                                                '9': 'setembro',
                                                '1': 'janeiro',
                                                '2': 'fevereiro',
                                                '3': 'mar\u00E7o',
                                                '4': 'abril'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'ago',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'mai',
                                                '12': 'dez',
                                                '11': 'nov',
                                                '10': 'out',
                                                '9': 'set',
                                                '1': 'jan',
                                                '2': 'fev',
                                                '3': 'mar',
                                                '4': 'abr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'agosto',
                                                '7': 'julho',
                                                '6': 'junho',
                                                '5': 'maio',
                                                '12': 'dezembro',
                                                '11': 'novembro',
                                                '10': 'outubro',
                                                '9': 'setembro',
                                                '1': 'janeiro',
                                                '2': 'fevereiro',
                                                '3': 'mar\u00E7o',
                                                '4': 'abril'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'S',
                                                'tue': 'T',
                                                'wed': 'Q',
                                                'thu': 'Q',
                                                'fri': 'S',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'wide': {
                                                'sun': 'domingo',
                                                'mon': 'segunda-feira',
                                                'tue': 'ter\u00E7a-feira',
                                                'wed': 'quarta-feira',
                                                'thu': 'quinta-feira',
                                                'fri': 'sexta-feira',
                                                'sat': 's\u00E1bado'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'S',
                                                'tue': 'T',
                                                'wed': 'Q',
                                                'thu': 'Q',
                                                'fri': 'S',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'dom',
                                                'mon': 'seg',
                                                'tue': 'ter',
                                                'wed': 'qua',
                                                'thu': 'qui',
                                                'fri': 'sex',
                                                'sat': 's\u00E1b'
                                            },
                                            'wide': {
                                                'sun': 'domingo',
                                                'mon': 'segunda-feira',
                                                'tue': 'ter\u00E7a-feira',
                                                'wed': 'quarta-feira',
                                                'thu': 'quinta-feira',
                                                'fri': 'sexta-feira',
                                                'sat': 's\u00E1bado'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1\u00BA trimestre',
                                                '2': '2\u00BA trimestre',
                                                '3': '3\u00BA trimestre',
                                                '4': '4\u00BA trimestre'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1\u00BA trimestre',
                                                '2': '2\u00BA trimestre',
                                                '3': '3\u00BA trimestre',
                                                '4': '4\u00BA trimestre'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': 'tarde',
                                                'am': 'AM',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'afternoon': 'tarde',
                                                'am': 'a',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'afternoon': 'tarde',
                                                'am': 'AM',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': 'tarde',
                                                'am': 'AM',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meia-noite',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'afternoon': 'tarde',
                                                'am': 'a',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'p'
                                            },
                                            'wide': {
                                                'afternoon': 'tarde',
                                                'am': 'AM',
                                                'morning': 'manh\u00E3',
                                                'night': 'noite',
                                                'noon': 'meio-dia',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Antes de Cristo',
                                            '0-alt-variant': 'BCE',
                                            '1': 'Ano do Senhor',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'a.C.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'd.C.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'a.C.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'd.C.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d \'de\' MMMM \'de\' y',
                                        'long': 'd \'de\' MMMM \'de\' y',
                                        'medium': 'dd/MM/y',
                                        'short': 'dd/MM/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'MMM \'de\' y',
                                            'yMM': 'MM/y',
                                            'yMEd': 'E, dd/MM/y',
                                            'yMd': 'dd/MM/y',
                                            'EHm': 'E, HH:mm',
                                            'Ehm': 'E, h:mm a',
                                            'Ed': 'E, d',
                                            'd': 'd',
                                            'GyMMMd': 'd \'de\' MMM \'de\' y G',
                                            'GyMMMEd': 'E, d \'de\' MMM \'de\' y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'yQQQQ': 'y QQQQ',
                                            'yQQQ': 'y QQQ',
                                            'yMMMEd': 'E, d \'de\' MMM \'de\' y',
                                            'yMMMd': 'd \'de\' MMM \'de\' y',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'HHmmss': 'HH:mm:ss',
                                            'HHmm': 'HH:mm',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM \'de\' y G',
                                            'hms': 'h:mm:ss a',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, dd/MM',
                                            'MMdd': 'dd/MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd \'de\' MMM',
                                            'MMMEd': 'E, d \'de\' MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'MM/y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d - E, d \'de\' MMM',
                                                'M': 'E, d \'de\' MMM - E, d \'de\' MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d \'de\' MMM',
                                                'M': 'd \'de\' MMM - d \'de\' MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM - MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, dd/MM - E, dd/MM',
                                                'M': 'E, dd/MM - E, dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH - HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h - h a v'
                                            },
                                            'y': {
                                                'y': 'y - y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd/MM/y - E, dd/MM/y',
                                                'M': 'E, dd/MM/y - E, dd/MM/y',
                                                'y': 'E, dd/MM/y - E, dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM \'de\' y',
                                                'y': 'MMM \'de\' y - MMM \'de\' y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d \'de\' MMM \'de\' y',
                                                'M': 'd \'de\' MMM - d \'de\' MMM \'de\' y',
                                                'y': 'd \'de\' MMM \'de\' y - d \'de\' MMM \'de\' y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d - E, d \'de\' MMM \'de\' y',
                                                'M': 'E, d \'de\' MMM - E, d \'de\' MMM \'de\' y',
                                                'y': 'E, d \'de\' MMM \'de\' y - E, d \'de\' MMM \'de\' y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM - MMMM \'de\' y',
                                                'y': 'MMMM \'de\' y - MMMM \'de\' y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\'h\' - HH\'h\''
                                            },
                                            'h': {
                                                'a': 'h\'h\' a - h\'h\' a',
                                                'h': 'h\'h\' - h\'h\' a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ro}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ro', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Ora standard din {0}',
                                'regionFormat-type-daylight': 'Ora de var\u0103 din {0}',
                                'regionFormat': 'Ora din {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'iul.',
                                                '6': 'iun.',
                                                '5': 'mai',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'sept.',
                                                '1': 'ian.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'I',
                                                '6': 'I',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'I',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'iulie',
                                                '6': 'iunie',
                                                '5': 'mai',
                                                '12': 'decembrie',
                                                '11': 'noiembrie',
                                                '10': 'octombrie',
                                                '9': 'septembrie',
                                                '1': 'ianuarie',
                                                '2': 'februarie',
                                                '3': 'martie',
                                                '4': 'aprilie'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug.',
                                                '7': 'iul.',
                                                '6': 'iun.',
                                                '5': 'mai',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'oct.',
                                                '9': 'sept.',
                                                '1': 'ian.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'I',
                                                '6': 'I',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'I',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'iulie',
                                                '6': 'iunie',
                                                '5': 'mai',
                                                '12': 'decembrie',
                                                '11': 'noiembrie',
                                                '10': 'octombrie',
                                                '9': 'septembrie',
                                                '1': 'ianuarie',
                                                '2': 'februarie',
                                                '3': 'martie',
                                                '4': 'aprilie'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'Dum',
                                                'mon': 'Lun',
                                                'tue': 'Mar',
                                                'wed': 'Mie',
                                                'thu': 'Joi',
                                                'fri': 'Vin',
                                                'sat': 'S\u00E2m'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Du',
                                                'mon': 'Lu',
                                                'tue': 'Ma',
                                                'wed': 'Mi',
                                                'thu': 'Jo',
                                                'fri': 'Vi',
                                                'sat': 'S\u00E2'
                                            },
                                            'wide': {
                                                'sun': 'duminic\u0103',
                                                'mon': 'luni',
                                                'tue': 'mar\u021Bi',
                                                'wed': 'miercuri',
                                                'thu': 'joi',
                                                'fri': 'vineri',
                                                'sat': 's\u00E2mb\u0103t\u0103'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'Dum',
                                                'mon': 'Lun',
                                                'tue': 'Mar',
                                                'wed': 'Mie',
                                                'thu': 'Joi',
                                                'fri': 'Vin',
                                                'sat': 'S\u00E2m'
                                            },
                                            'narrow': {
                                                'sun': 'D',
                                                'mon': 'L',
                                                'tue': 'M',
                                                'wed': 'M',
                                                'thu': 'J',
                                                'fri': 'V',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Du',
                                                'mon': 'Lu',
                                                'tue': 'Ma',
                                                'wed': 'Mi',
                                                'thu': 'Jo',
                                                'fri': 'Vi',
                                                'sat': 'S\u00E2'
                                            },
                                            'wide': {
                                                'sun': 'duminic\u0103',
                                                'mon': 'luni',
                                                'tue': 'mar\u021Bi',
                                                'wed': 'miercuri',
                                                'thu': 'joi',
                                                'fri': 'vineri',
                                                'sat': 's\u00E2mb\u0103t\u0103'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'trim. I',
                                                '2': 'trim. II',
                                                '3': 'trim. III',
                                                '4': 'trim. IV'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'trimestrul I',
                                                '2': 'trimestrul al II-lea',
                                                '3': 'trimestrul al III-lea',
                                                '4': 'trimestrul al IV-lea'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'T1',
                                                '2': 'T2',
                                                '3': 'T3',
                                                '4': 'T4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'trimestrul I',
                                                '2': 'trimestrul al II-lea',
                                                '3': 'trimestrul al III-lea',
                                                '4': 'trimestrul al IV-lea'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'a.m.',
                                                'pm': 'p.m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u00EEnainte de Hristos',
                                            '0-alt-variant': '\u00EE.e.n',
                                            '1': 'dup\u0103 Hristos',
                                            '1-alt-variant': 'e.n.'
                                        },
                                        'eraAbbr': {
                                            '0': '\u00EE.Hr.',
                                            '0-alt-variant': '\u00EE.e.n',
                                            '1': 'd.Hr.',
                                            '1-alt-variant': 'e.n.'
                                        },
                                        'eraNarrow': {
                                            '0': '\u00EE.Hr.',
                                            '0-alt-variant': '\u00EE.e.n',
                                            '1': 'd.Hr.',
                                            '1-alt-variant': 'e.n.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'dd.MM.y'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1}, {0}',
                                        'long': '{1}, {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMMM': 'MMM y',
                                            'yMM': 'MM.y',
                                            'yMEd': 'E, dd.MM.y',
                                            'yMd': 'dd.MM.y',
                                            'yM': 'MM.y',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E, d MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'h:mm a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, d MMM y',
                                            'yMMMd': 'd MMM y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'dd.MM',
                                            'MEd': 'E, dd.MM',
                                            'MMdd': 'dd.MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E, d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E, d MMMM',
                                            'ms': 'mm:ss',
                                            'y': 'y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d MMM - E, d MMM',
                                                'M': 'E, d MMM - E, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM - E, dd.MM',
                                                'M': 'E, dd.MM - E, dd.MM'
                                            },
                                            'Md': {
                                                'd': 'dd.MM - dd.MM',
                                                'M': 'dd.MM - dd.MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH-HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM.y - MM.y',
                                                'y': 'MM.y - MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y - dd.MM.y',
                                                'M': 'dd.MM.y - dd.MM.y',
                                                'y': 'dd.MM.y - dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd.MM.y - E, dd.MM.y',
                                                'M': 'E, dd.MM.y - E, dd.MM.y',
                                                'y': 'E, dd.MM.y - E, dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM y',
                                                'M': 'd MMM - d MMM y',
                                                'y': 'd MMM y - d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d MMM - E, d MMM y',
                                                'M': 'E, d MMM - E, d MMM y',
                                                'y': 'E, d MMM y - E, d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM - MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate root}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9308
             * timeZoneNames: 24r9308
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('root', {
                        'dates': {
                            'timeZoneNames': {
                                'hourFormat': '+HH:mm;-HH:mm',
                                'gmtFormat': 'GMT{0}',
                                'gmtZeroFormat': 'GMT',
                                'regionFormat': '{0}',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat-type-standard': '{0} (+0)',
                                'fallbackFormat': '{1} ({0})'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'M08',
                                                '7': 'M07',
                                                '6': 'M06',
                                                '5': 'M05',
                                                '12': 'M12',
                                                '11': 'M11',
                                                '10': 'M10',
                                                '9': 'M09',
                                                '1': 'M01',
                                                '2': 'M02',
                                                '3': 'M03',
                                                '4': 'M04'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': 'M08',
                                                '7': 'M07',
                                                '6': 'M06',
                                                '5': 'M05',
                                                '12': 'M12',
                                                '11': 'M11',
                                                '10': 'M10',
                                                '9': 'M09',
                                                '1': 'M01',
                                                '2': 'M02',
                                                '3': 'M03',
                                                '4': 'M04'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'M08',
                                                '7': 'M07',
                                                '6': 'M06',
                                                '5': 'M05',
                                                '12': 'M12',
                                                '11': 'M11',
                                                '10': 'M10',
                                                '9': 'M09',
                                                '1': 'M01',
                                                '2': 'M02',
                                                '3': 'M03',
                                                '4': 'M04'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': 'M08',
                                                '7': 'M07',
                                                '6': 'M06',
                                                '5': 'M05',
                                                '12': 'M12',
                                                '11': 'M11',
                                                '10': 'M10',
                                                '9': 'M09',
                                                '1': 'M01',
                                                '2': 'M02',
                                                '3': 'M03',
                                                '4': 'M04'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'W',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'wide': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'W',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'wide': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'BCE',
                                            '0-alt-variant': 'BCE',
                                            '1': 'CE',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'BCE',
                                            '0-alt-variant': 'BCE',
                                            '1': 'CE',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'BCE',
                                            '0-alt-variant': 'BCE',
                                            '1': 'CE',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y MMMM d, EEEE',
                                        'long': 'y MMMM d',
                                        'medium': 'y MMM d',
                                        'short': 'y-MM-dd'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH',
                                            'h': 'h a',
                                            'GyMMMEd': 'G y MMM d, E',
                                            'GyMMMd': 'G y MMM d',
                                            'd': 'd',
                                            'Ed': 'd, E',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'G y',
                                            'GyMMM': 'G y MMM',
                                            'yM': 'y-MM',
                                            'yMd': 'y-MM-dd',
                                            'yMEd': 'y-MM-dd, E',
                                            'yMMM': 'y MMM',
                                            'yMMMd': 'y MMM d',
                                            'yMMMEd': 'y MMM d, E',
                                            'yQQQ': 'y QQQ',
                                            'yQQQQ': 'y QQQQ',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMEd': 'MMM d, E',
                                            'MMMd': 'MMM d',
                                            'MMM': 'LLL',
                                            'MEd': 'MM-dd, E',
                                            'Md': 'MM-dd',
                                            'M': 'L'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'MMM d, E \u2013 MMM d, E',
                                                'M': 'MMM d, E \u2013 MMM d, E'
                                            },
                                            'MMMd': {
                                                'd': 'MMM d\u2013d',
                                                'M': 'MMM d \u2013 MMM d'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u2013LLL'
                                            },
                                            'MEd': {
                                                'd': 'MM-dd, E \u2013 MM-dd, E',
                                                'M': 'MM-dd, E \u2013 MM-dd, E'
                                            },
                                            'Md': {
                                                'd': 'MM-dd \u2013 MM-dd',
                                                'M': 'MM-dd \u2013 MM-dd'
                                            },
                                            'M': {
                                                'M': 'MM\u2013MM'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'y-MM \u2013 y-MM',
                                                'y': 'y-MM \u2013 y-MM'
                                            },
                                            'yMd': {
                                                'd': 'y-MM-dd \u2013 y-MM-dd',
                                                'M': 'y-MM-dd \u2013 y-MM-dd',
                                                'y': 'y-MM-dd \u2013 y-MM-dd'
                                            },
                                            'yMEd': {
                                                'd': 'y-MM-dd, E \u2013 y-MM-dd, E',
                                                'M': 'y-MM-dd, E \u2013 y-MM-dd, E',
                                                'y': 'y-MM-dd, E \u2013 y-MM-dd, E'
                                            },
                                            'yMMM': {
                                                'M': 'y MMM\u2013MMM',
                                                'y': 'y MMM \u2013 y MMM'
                                            },
                                            'yMMMd': {
                                                'd': 'y MMM d\u2013d',
                                                'M': 'y MMM d \u2013 MMM d',
                                                'y': 'y MMM d \u2013 y MMM d'
                                            },
                                            'yMMMEd': {
                                                'd': 'y MMM d, E \u2013 MMM d, E',
                                                'M': 'y MMM d, E \u2013 MMM d, E',
                                                'y': 'y MMM d, E \u2013 y MMM d, E'
                                            },
                                            'yMMMM': {
                                                'M': 'y MMMM\u2013MMMM',
                                                'y': 'y MMMM \u2013 y MMMM'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate ru}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('ru', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': '{0} \u0432\u0440\u0435\u043C\u044F',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0430\u0432\u0433.',
                                                '7': '\u0438\u044E\u043B\u044F',
                                                '6': '\u0438\u044E\u043D\u044F',
                                                '5': '\u043C\u0430\u044F',
                                                '12': '\u0434\u0435\u043A.',
                                                '11': '\u043D\u043E\u044F\u0431.',
                                                '10': '\u043E\u043A\u0442.',
                                                '9': '\u0441\u0435\u043D\u0442.',
                                                '1': '\u044F\u043D\u0432.',
                                                '2': '\u0444\u0435\u0432\u0440.',
                                                '3': '\u043C\u0430\u0440\u0442\u0430',
                                                '4': '\u0430\u043F\u0440.'
                                            },
                                            'narrow': {
                                                '8': '\u0410',
                                                '7': '\u0418',
                                                '6': '\u0418',
                                                '5': '\u041C',
                                                '12': '\u0414',
                                                '11': '\u041D',
                                                '10': '\u041E',
                                                '9': '\u0421',
                                                '1': '\u042F',
                                                '2': '\u0424',
                                                '3': '\u041C',
                                                '4': '\u0410'
                                            },
                                            'wide': {
                                                '8': '\u0430\u0432\u0433\u0443\u0441\u0442\u0430',
                                                '7': '\u0438\u044E\u043B\u044F',
                                                '6': '\u0438\u044E\u043D\u044F',
                                                '5': '\u043C\u0430\u044F',
                                                '12': '\u0434\u0435\u043A\u0430\u0431\u0440\u044F',
                                                '11': '\u043D\u043E\u044F\u0431\u0440\u044F',
                                                '10': '\u043E\u043A\u0442\u044F\u0431\u0440\u044F',
                                                '9': '\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F',
                                                '1': '\u044F\u043D\u0432\u0430\u0440\u044F',
                                                '2': '\u0444\u0435\u0432\u0440\u0430\u043B\u044F',
                                                '3': '\u043C\u0430\u0440\u0442\u0430',
                                                '4': '\u0430\u043F\u0440\u0435\u043B\u044F'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0410\u0432\u0433.',
                                                '7': '\u0418\u044E\u043B\u044C',
                                                '6': '\u0418\u044E\u043D\u044C',
                                                '5': '\u041C\u0430\u0439',
                                                '12': '\u0414\u0435\u043A.',
                                                '11': '\u041D\u043E\u044F\u0431.',
                                                '10': '\u041E\u043A\u0442.',
                                                '9': '\u0421\u0435\u043D\u0442.',
                                                '1': '\u042F\u043D\u0432.',
                                                '2': '\u0424\u0435\u0432\u0440.',
                                                '3': '\u041C\u0430\u0440\u0442',
                                                '4': '\u0410\u043F\u0440.'
                                            },
                                            'narrow': {
                                                '8': '\u0410',
                                                '7': '\u0418',
                                                '6': '\u0418',
                                                '5': '\u041C',
                                                '12': '\u0414',
                                                '11': '\u041D',
                                                '10': '\u041E',
                                                '9': '\u0421',
                                                '1': '\u042F',
                                                '2': '\u0424',
                                                '3': '\u041C',
                                                '4': '\u0410'
                                            },
                                            'wide': {
                                                '8': '\u0410\u0432\u0433\u0443\u0441\u0442',
                                                '7': '\u0418\u044E\u043B\u044C',
                                                '6': '\u0418\u044E\u043D\u044C',
                                                '5': '\u041C\u0430\u0439',
                                                '12': '\u0414\u0435\u043A\u0430\u0431\u0440\u044C',
                                                '11': '\u041D\u043E\u044F\u0431\u0440\u044C',
                                                '10': '\u041E\u043A\u0442\u044F\u0431\u0440\u044C',
                                                '9': '\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C',
                                                '1': '\u042F\u043D\u0432\u0430\u0440\u044C',
                                                '2': '\u0424\u0435\u0432\u0440\u0430\u043B\u044C',
                                                '3': '\u041C\u0430\u0440\u0442',
                                                '4': '\u0410\u043F\u0440\u0435\u043B\u044C'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u0432\u0441',
                                                'mon': '\u043F\u043D',
                                                'tue': '\u0432\u0442',
                                                'wed': '\u0441\u0440',
                                                'thu': '\u0447\u0442',
                                                'fri': '\u043F\u0442',
                                                'sat': '\u0441\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u0432\u0441',
                                                'mon': '\u043F\u043D',
                                                'tue': '\u0432\u0442',
                                                'wed': '\u0441\u0440',
                                                'thu': '\u0447\u0442',
                                                'fri': '\u043F\u0442',
                                                'sat': '\u0441\u0431'
                                            },
                                            'short': {
                                                'sun': '\u0432\u0441',
                                                'mon': '\u043F\u043D',
                                                'tue': '\u0432\u0442',
                                                'wed': '\u0441\u0440',
                                                'thu': '\u0447\u0442',
                                                'fri': '\u043F\u0442',
                                                'sat': '\u0441\u0431'
                                            },
                                            'wide': {
                                                'sun': '\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435',
                                                'mon': '\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A',
                                                'tue': '\u0432\u0442\u043E\u0440\u043D\u0438\u043A',
                                                'wed': '\u0441\u0440\u0435\u0434\u0430',
                                                'thu': '\u0447\u0435\u0442\u0432\u0435\u0440\u0433',
                                                'fri': '\u043F\u044F\u0442\u043D\u0438\u0446\u0430',
                                                'sat': '\u0441\u0443\u0431\u0431\u043E\u0442\u0430'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u0412\u0441',
                                                'mon': '\u041F\u043D',
                                                'tue': '\u0412\u0442',
                                                'wed': '\u0421\u0440',
                                                'thu': '\u0427\u0442',
                                                'fri': '\u041F\u0442',
                                                'sat': '\u0421\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u0412',
                                                'mon': '\u041F',
                                                'tue': '\u0412',
                                                'wed': '\u0421',
                                                'thu': '\u0427',
                                                'fri': '\u041F',
                                                'sat': '\u0421'
                                            },
                                            'short': {
                                                'sun': '\u0432\u0441',
                                                'mon': '\u043F\u043D',
                                                'tue': '\u0432\u0442',
                                                'wed': '\u0441\u0440',
                                                'thu': '\u0447\u0442',
                                                'fri': '\u043F\u0442',
                                                'sat': '\u0441\u0431'
                                            },
                                            'wide': {
                                                'sun': '\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435',
                                                'mon': '\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A',
                                                'tue': '\u0412\u0442\u043E\u0440\u043D\u0438\u043A',
                                                'wed': '\u0421\u0440\u0435\u0434\u0430',
                                                'thu': '\u0427\u0435\u0442\u0432\u0435\u0440\u0433',
                                                'fri': '\u041F\u044F\u0442\u043D\u0438\u0446\u0430',
                                                'sat': '\u0421\u0443\u0431\u0431\u043E\u0442\u0430'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1-\u0439 \u043A\u0432.',
                                                '2': '2-\u0439 \u043A\u0432.',
                                                '3': '3-\u0439 \u043A\u0432.',
                                                '4': '4-\u0439 \u043A\u0432.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '2': '2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '3': '3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '4': '4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1-\u0439 \u043A\u0432.',
                                                '2': '2-\u0439 \u043A\u0432.',
                                                '3': '3-\u0439 \u043A\u0432.',
                                                '4': '4-\u0439 \u043A\u0432.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '2': '2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '3': '3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '4': '4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u0434\u043E \u043F\u043E\u043B\u0443\u0434\u043D\u044F',
                                                'pm': '\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F'
                                            },
                                            'narrow': {
                                                'am': '\u0434\u043F',
                                                'pm': '\u043F\u043F'
                                            },
                                            'wide': {
                                                'am': '\u0434\u043E \u043F\u043E\u043B\u0443\u0434\u043D\u044F',
                                                'pm': '\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u0434\u043E \u043F\u043E\u043B\u0443\u0434\u043D\u044F',
                                                'pm': '\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F'
                                            },
                                            'narrow': {
                                                'am': '\u0434\u043F',
                                                'pm': '\u043F\u043F'
                                            },
                                            'wide': {
                                                'am': '\u0434\u043E \u043F\u043E\u043B\u0443\u0434\u043D\u044F',
                                                'pm': '\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u043B\u0443\u0434\u043D\u044F'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u0434\u043E \u043D.\u044D.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D.\u044D.',
                                            '1-alt-variant': '\u043D.\u044D.'
                                        },
                                        'eraAbbr': {
                                            '0': '\u0434\u043E \u043D. \u044D.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D. \u044D.',
                                            '1-alt-variant': '\u043D.\u044D.'
                                        },
                                        'eraNarrow': {
                                            '0': '\u0434\u043E \u043D.\u044D.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D.\u044D.',
                                            '1-alt-variant': '\u043D.\u044D.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y \'\u0433\'.',
                                        'long': 'd MMMM y \'\u0433\'.',
                                        'medium': 'dd MMM y \'\u0433\'.',
                                        'short': 'dd.MM.yy'
                                    },
                                    'timeFormats': {
                                        'full': 'H:mm:ss zzzz',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1}, {0}',
                                        'long': '{1}, {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'yMMM': 'LLL y',
                                            'yMM': 'MM.y',
                                            'yMEd': 'ccc, d.MM.y \'\u0433\'.',
                                            'yMd': 'dd.MM.y',
                                            'yM': 'MM.y',
                                            'Ed': 'ccc, d',
                                            'E': 'ccc',
                                            'd': 'd',
                                            'GyMMM': 'LLL y G',
                                            'GyMMMd': 'd MMM y \'\u0433\'. G',
                                            'GyMMMEd': 'E, d MMM y G',
                                            'h': 'h a',
                                            'H': 'H',
                                            'yQQQQ': 'QQQQ y \'\u0433\'.',
                                            'yQQQ': 'QQQ y \'\u0433\'.',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E, d MMM y',
                                            'yMMMd': 'd MMM y \'\u0433\'.',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'H:mm',
                                            'hm': 'h:mm a',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'Hms': 'H:mm:ss',
                                            'M': 'L',
                                            'Md': 'dd.MM',
                                            'MEd': 'E, dd.MM',
                                            'MMdd': 'dd.MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'ccc, d MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yLLLL': 'LLLL y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'ccc, d - E, d MMM',
                                                'M': 'ccc, d MMM - ccc, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd-d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM - E, dd.MM',
                                                'M': 'E, dd.MM - E, dd.MM'
                                            },
                                            'Md': {
                                                'd': 'dd.MM - dd.MM',
                                                'M': 'dd.MM - dd.MM'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'H-H v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'intervalFormatFallback': '{0} - {1}',
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM.y - MM.y',
                                                'y': 'MM.y - MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y - dd.MM.y',
                                                'M': 'dd.MM.y - dd.MM.y',
                                                'y': 'dd.MM.y - dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'ccc, dd.MM.y - ccc, dd.MM.y',
                                                'M': 'ccc, dd.MM.y - ccc, dd.MM.y',
                                                'y': 'ccc, dd.MM.y - ccc, dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL-LLL y \'\u0433\'.',
                                                'y': 'LLL y - LLL y \'\u0433\'.'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM y \'\u0433\'.',
                                                'M': 'd MMM - d MMM y \'\u0433\'.',
                                                'y': 'd MMM y - d MMM y \'\u0433\'.'
                                            },
                                            'yMMMEd': {
                                                'd': 'ccc, d - ccc, d MMM y \'\u0433\'.',
                                                'M': 'ccc, d MMM - ccc, d MMM y \'\u0433\'.',
                                                'y': 'ccc, d MMM y - ccc, d MMM y \'\u0433\'.'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL-LLLL y \'\u0433\'.',
                                                'y': 'LLLL y - LLLL y \'\u0433\'.'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL-LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm-H:mm v',
                                                'm': 'H:mm-H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm-H:mm',
                                                'm': 'H:mm-H:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'H-H'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate sk}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('sk', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': '\u010Casov\u00E9 p\u00E1smo {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'j\u00FAl',
                                                '6': 'j\u00FAn',
                                                '5': 'm\u00E1j',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'a',
                                                '7': 'j',
                                                '6': 'j',
                                                '5': 'm',
                                                '12': 'd',
                                                '11': 'n',
                                                '10': 'o',
                                                '9': 's',
                                                '1': 'j',
                                                '2': 'f',
                                                '3': 'm',
                                                '4': 'a'
                                            },
                                            'wide': {
                                                '8': 'augusta',
                                                '7': 'j\u00FAla',
                                                '6': 'j\u00FAna',
                                                '5': 'm\u00E1ja',
                                                '12': 'decembra',
                                                '11': 'novembra',
                                                '10': 'okt\u00F3bra',
                                                '9': 'septembra',
                                                '1': 'janu\u00E1ra',
                                                '2': 'febru\u00E1ra',
                                                '3': 'marca',
                                                '4': 'apr\u00EDla'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'j\u00FAl',
                                                '6': 'j\u00FAn',
                                                '5': 'm\u00E1j',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'a',
                                                '7': 'j',
                                                '6': 'j',
                                                '5': 'm',
                                                '12': 'd',
                                                '11': 'n',
                                                '10': 'o',
                                                '9': 's',
                                                '1': 'j',
                                                '2': 'f',
                                                '3': 'm',
                                                '4': 'a'
                                            },
                                            'wide': {
                                                '8': 'august',
                                                '7': 'j\u00FAl',
                                                '6': 'j\u00FAn',
                                                '5': 'm\u00E1j',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'okt\u00F3ber',
                                                '9': 'september',
                                                '1': 'janu\u00E1r',
                                                '2': 'febru\u00E1r',
                                                '3': 'marec',
                                                '4': 'apr\u00EDl'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': 'ut',
                                                'wed': 'st',
                                                'thu': '\u0161t',
                                                'fri': 'pi',
                                                'sat': 'so'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': 'U',
                                                'wed': 'S',
                                                'thu': '\u0160',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Ne',
                                                'mon': 'Po',
                                                'tue': 'Ut',
                                                'wed': 'St',
                                                'thu': '\u0160t',
                                                'fri': 'Pi',
                                                'sat': 'So'
                                            },
                                            'wide': {
                                                'sun': 'nede\u013Ea',
                                                'mon': 'pondelok',
                                                'tue': 'utorok',
                                                'wed': 'streda',
                                                'thu': '\u0161tvrtok',
                                                'fri': 'piatok',
                                                'sat': 'sobota'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'ne',
                                                'mon': 'po',
                                                'tue': 'ut',
                                                'wed': 'st',
                                                'thu': '\u0161t',
                                                'fri': 'pi',
                                                'sat': 'so'
                                            },
                                            'narrow': {
                                                'sun': 'N',
                                                'mon': 'P',
                                                'tue': 'U',
                                                'wed': 'S',
                                                'thu': '\u0160',
                                                'fri': 'P',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Ne',
                                                'mon': 'Po',
                                                'tue': 'Ut',
                                                'wed': 'St',
                                                'thu': '\u0160t',
                                                'fri': 'Pi',
                                                'sat': 'So'
                                            },
                                            'wide': {
                                                'sun': 'nede\u013Ea',
                                                'mon': 'pondelok',
                                                'tue': 'utorok',
                                                'wed': 'streda',
                                                'thu': '\u0161tvrtok',
                                                'fri': 'piatok',
                                                'sat': 'sobota'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u0161tvr\u0165rok',
                                                '2': '2. \u0161tvr\u0165rok',
                                                '3': '3. \u0161tvr\u0165rok',
                                                '4': '4. \u0161tvr\u0165rok'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1Q',
                                                '2': '2Q',
                                                '3': '3Q',
                                                '4': '4Q'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u0161tvr\u0165rok',
                                                '2': '2. \u0161tvr\u0165rok',
                                                '3': '3. \u0161tvr\u0165rok',
                                                '4': '4. \u0161tvr\u0165rok'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'narrow': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'pm': 'PM'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'pred n.l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.l.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'pred n.l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.l.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'pred n.l.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'n.l.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d. MMMM y',
                                        'long': 'd. MMMM y',
                                        'medium': 'd.M.y',
                                        'short': 'd.M.y'
                                    },
                                    'timeFormats': {
                                        'full': 'H:mm:ss zzzz',
                                        'long': 'H:mm:ss z',
                                        'medium': 'H:mm:ss',
                                        'short': 'H:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'LLL y',
                                            'yMEd': 'E d. M. y',
                                            'yMd': 'd.M.y',
                                            'yM': 'M.y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'Ed': 'E d.',
                                            'd': 'd.',
                                            'GyMMMd': 'd.M.y G',
                                            'GyMMMEd': 'E, d. MMM y G',
                                            'GyMMMMd': 'd. MMMM y G',
                                            'h': 'h a',
                                            'H': 'H',
                                            'hm': 'h:mm a',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMMd': 'd. MMMM y',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E, d. MMM y',
                                            'yMMMd': 'd.M.y',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'H:mm',
                                            'Ehm': 'E h:mm',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLL y G',
                                            'Hms': 'H:mm:ss',
                                            'M': 'L.',
                                            'Md': 'd.M.',
                                            'MEd': 'E, d.M.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM.',
                                            'MMMEd': 'E, d. MMM.',
                                            'MMMMd': 'd. MMMM',
                                            'MMMMEd': 'E, d. MMMM',
                                            'mmss': 'mm:ss'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d. - E, d. MMM',
                                                'M': 'E, d. MMM - E, d. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd. - d. MMM',
                                                'M': 'd. MMM - d. MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL \u2013 LLL'
                                            },
                                            'MEd': {
                                                'd': 'E, d.M. - E, d.M.',
                                                'M': 'E, d.M. - E, d.M.'
                                            },
                                            'Md': {
                                                'd': 'd.M. - d.M.',
                                                'M': 'd.M. - d.M.'
                                            },
                                            'M': {
                                                'M': 'M. \u2013 M.'
                                            },
                                            'Hv': {
                                                'H': 'HH \u2013 HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h \u2013 h a v'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}',
                                            'y': {
                                                'y': 'y - y'
                                            },
                                            'yM': {
                                                'M': 'M.y - M.y',
                                                'y': 'M.y - M.y'
                                            },
                                            'yMd': {
                                                'd': 'd.M.y - d.M.y',
                                                'M': 'd.M.y - d.M.y',
                                                'y': 'd.M.y - d.M.y'
                                            },
                                            'yMEd': {
                                                'd': 'E, d.M.y - E, d.M.y',
                                                'M': 'E, d.M.y - E, d.M.y',
                                                'y': 'E, d.M.y - E, d.M.y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL - LLL y',
                                                'y': 'LLL y - LLL y'
                                            },
                                            'yMMMd': {
                                                'd': 'd. - d. MMM y',
                                                'M': 'd. MMM - d. MMM y',
                                                'y': 'd. MMM y - d. MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d. - E, d. MMM y',
                                                'M': 'E, d. MMM - E, d. MMM y',
                                                'y': 'E, d. MMM y - E, d. MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL - LLLL y',
                                                'y': 'LLLL y - LLLL y'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL-LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm \u2013 H:mm v',
                                                'm': 'H:mm \u2013 H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm - h:mm a v',
                                                'm': 'h:mm - h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'H:mm \u2013 H:mm',
                                                'm': 'H:mm \u2013 H:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm - h:mm a',
                                                'm': 'h:mm - h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH \u2013 HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h \u2013 h a'
                                            },
                                            'd': {
                                                'd': 'd. \u2013 d.'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate sl}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('sl', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': '{0} \u010Das',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'avg.',
                                                '7': 'jul.',
                                                '6': 'jun.',
                                                '5': 'maj',
                                                '12': 'dec.',
                                                '11': 'nov.',
                                                '10': 'okt.',
                                                '9': 'sep.',
                                                '1': 'jan.',
                                                '2': 'feb.',
                                                '3': 'mar.',
                                                '4': 'apr.'
                                            },
                                            'narrow': {
                                                '8': 'a',
                                                '7': 'j',
                                                '6': 'j',
                                                '5': 'm',
                                                '12': 'd',
                                                '11': 'n',
                                                '10': 'o',
                                                '9': 's',
                                                '1': 'j',
                                                '2': 'f',
                                                '3': 'm',
                                                '4': 'a'
                                            },
                                            'wide': {
                                                '8': 'avgust',
                                                '7': 'julij',
                                                '6': 'junij',
                                                '5': 'maj',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'marec',
                                                '4': 'april'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'avg',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'maj',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'a',
                                                '7': 'j',
                                                '6': 'j',
                                                '5': 'm',
                                                '12': 'd',
                                                '11': 'n',
                                                '10': 'o',
                                                '9': 's',
                                                '1': 'j',
                                                '2': 'f',
                                                '3': 'm',
                                                '4': 'a'
                                            },
                                            'wide': {
                                                '8': 'avgust',
                                                '7': 'julij',
                                                '6': 'junij',
                                                '5': 'maj',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januar',
                                                '2': 'februar',
                                                '3': 'marec',
                                                '4': 'april'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'ned.',
                                                'mon': 'pon.',
                                                'tue': 'tor.',
                                                'wed': 'sre.',
                                                'thu': '\u010Det.',
                                                'fri': 'pet.',
                                                'sat': 'sob.'
                                            },
                                            'narrow': {
                                                'sun': 'n',
                                                'mon': 'p',
                                                'tue': 't',
                                                'wed': 's',
                                                'thu': '\u010D',
                                                'fri': 'p',
                                                'sat': 's'
                                            },
                                            'short': {
                                                'sun': 'ned.',
                                                'mon': 'pon.',
                                                'tue': 'tor.',
                                                'wed': 'sre.',
                                                'thu': '\u010Det.',
                                                'fri': 'pet.',
                                                'sat': 'sob.'
                                            },
                                            'wide': {
                                                'sun': 'nedelja',
                                                'mon': 'ponedeljek',
                                                'tue': 'torek',
                                                'wed': 'sreda',
                                                'thu': '\u010Detrtek',
                                                'fri': 'petek',
                                                'sat': 'sobota'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'ned',
                                                'mon': 'pon',
                                                'tue': 'tor',
                                                'wed': 'sre',
                                                'thu': '\u010Det',
                                                'fri': 'pet',
                                                'sat': 'sob'
                                            },
                                            'narrow': {
                                                'sun': 'n',
                                                'mon': 'p',
                                                'tue': 't',
                                                'wed': 's',
                                                'thu': '\u010D',
                                                'fri': 'p',
                                                'sat': 's'
                                            },
                                            'short': {
                                                'sun': 'ned.',
                                                'mon': 'pon.',
                                                'tue': 'tor.',
                                                'wed': 'sre.',
                                                'thu': '\u010Det.',
                                                'fri': 'pet.',
                                                'sat': 'sob.'
                                            },
                                            'wide': {
                                                'sun': 'nedelja',
                                                'mon': 'ponedeljek',
                                                'tue': 'torek',
                                                'wed': 'sreda',
                                                'thu': '\u010Detrtek',
                                                'fri': 'petek',
                                                'sat': 'sobota'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u010Detrtletje',
                                                '2': '2. \u010Detrtletje',
                                                '3': '3. \u010Detrtletje',
                                                '4': '4. \u010Detrtletje'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1. \u010Detrtletje',
                                                '2': '2. \u010Detrtletje',
                                                '3': '3. \u010Detrtletje',
                                                '4': '4. \u010Detrtletje'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            },
                                            'narrow': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            },
                                            'wide': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            },
                                            'narrow': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            },
                                            'wide': {
                                                'am': 'dop.',
                                                'pm': 'pop.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'pred na\u0161im \u0161tetjem',
                                            '0-alt-variant': 'BCE',
                                            '1': 'na\u0161e \u0161tetje',
                                            '1-alt-variant': 'po n. \u0161t.'
                                        },
                                        'eraAbbr': {
                                            '0': 'pr. n. \u0161t.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'po Kr.',
                                            '1-alt-variant': 'po n. \u0161t.'
                                        },
                                        'eraNarrow': {
                                            '0': 'pr. n. \u0161t.',
                                            '0-alt-variant': 'BCE',
                                            '1': 'po Kr.',
                                            '1-alt-variant': 'po n. \u0161t.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, dd. MMMM y',
                                        'long': 'dd. MMMM y',
                                        'medium': 'd. MMM y',
                                        'short': 'd. MM. yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, d. MMM y',
                                            'EHms': 'E HH.mm.ss',
                                            'Ehms': 'E h.mm.ss a',
                                            'EHm': 'E HH.mm',
                                            'Ehm': 'E h.mm a',
                                            'Ed': 'E, d.',
                                            'd': 'd',
                                            'GyMMM': 'MMM y G',
                                            'GyMMMd': 'd. MMM y G',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH',
                                            'h': 'h a',
                                            'GyMMMEd': 'E, d. MMM y G',
                                            'Gy': 'y G',
                                            'GyM': 'M/y G',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'd. M.',
                                            'MEd': 'E, d. MM.',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMEd': 'E, d. MMM',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M/y',
                                            'yMd': 'd. M. y',
                                            'yMEd': 'E, d. M. y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'd. MMM y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d. \u2013 E, d. MMM',
                                                'M': 'E, d. MMM \u2013 E, d. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd.\u2013d. MMM',
                                                'M': 'd. MMM \u2013 d. MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, d. \u2013 E, d. M.',
                                                'M': 'E, d. M. \u2013 E, d. M.'
                                            },
                                            'Md': {
                                                'd': 'd. \u2013 d. M.',
                                                'M': 'd. M. \u2013 d. M.'
                                            },
                                            'M': {
                                                'M': 'M.\u2013M.'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'M.\u2013M. y',
                                                'y': 'M. y \u2013 M. y'
                                            },
                                            'yMd': {
                                                'd': 'd. M. y \u2013 d. M. y',
                                                'M': 'd. M. \u2013 d. M. y',
                                                'y': 'd. M. y \u2013 d. M. y'
                                            },
                                            'yMEd': {
                                                'd': 'E, d. \u2013 E, d. M. y',
                                                'M': 'E, d. M. \u2013 E, d. M. y',
                                                'y': 'E, d. M. y \u2013 E, d. M. y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM \u2013 MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd.\u2013d. MMM y',
                                                'M': 'd. MMM \u2013 d. MMM y',
                                                'y': 'd. MMM y \u2013 d. MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d. MMM \u2013 E, d. MMM y',
                                                'M': 'E, d. MMM \u2013 E, d. MMM y',
                                                'y': 'E, d. MMM y \u2013 E, d. MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH.mm\u2013HH.mm v',
                                                'm': 'HH.mm\u2013HH.mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH.mm\u2013HH.mm',
                                                'm': 'HH.mm\u2013HH.mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd.\u2013d.'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate sr}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('sr', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0}, \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0434\u043D\u043E \u0432\u0440\u0435\u043C\u0435',
                                'regionFormat-type-daylight': '{0}, \u043B\u0435\u0442\u045A\u0435 \u0432\u0440\u0435\u043C\u0435',
                                'regionFormat': '\u0412\u0440\u0435\u043C\u0435 \u0443 \u0437\u0435\u043C\u0459\u0438: {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HHmm;-HHmm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0430\u0432\u0433',
                                                '7': '\u0458\u0443\u043B',
                                                '6': '\u0458\u0443\u043D',
                                                '5': '\u043C\u0430\u0458',
                                                '12': '\u0434\u0435\u0446',
                                                '11': '\u043D\u043E\u0432',
                                                '10': '\u043E\u043A\u0442',
                                                '9': '\u0441\u0435\u043F',
                                                '1': '\u0458\u0430\u043D',
                                                '2': '\u0444\u0435\u0431',
                                                '3': '\u043C\u0430\u0440',
                                                '4': '\u0430\u043F\u0440'
                                            },
                                            'narrow': {
                                                '8': '\u0430',
                                                '7': '\u0458',
                                                '6': '\u0458',
                                                '5': '\u043C',
                                                '12': '\u0434',
                                                '11': '\u043D',
                                                '10': '\u043E',
                                                '9': '\u0441',
                                                '1': '\u0458',
                                                '2': '\u0444',
                                                '3': '\u043C',
                                                '4': '\u0430'
                                            },
                                            'wide': {
                                                '8': '\u0430\u0432\u0433\u0443\u0441\u0442',
                                                '7': '\u0458\u0443\u043B',
                                                '6': '\u0458\u0443\u043D',
                                                '5': '\u043C\u0430\u0458',
                                                '12': '\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440',
                                                '11': '\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440',
                                                '10': '\u043E\u043A\u0442\u043E\u0431\u0430\u0440',
                                                '9': '\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440',
                                                '1': '\u0458\u0430\u043D\u0443\u0430\u0440',
                                                '2': '\u0444\u0435\u0431\u0440\u0443\u0430\u0440',
                                                '3': '\u043C\u0430\u0440\u0442',
                                                '4': '\u0430\u043F\u0440\u0438\u043B'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0430\u0432\u0433',
                                                '7': '\u0458\u0443\u043B',
                                                '6': '\u0458\u0443\u043D',
                                                '5': '\u043C\u0430\u0458',
                                                '12': '\u0434\u0435\u0446',
                                                '11': '\u043D\u043E\u0432',
                                                '10': '\u043E\u043A\u0442',
                                                '9': '\u0441\u0435\u043F',
                                                '1': '\u0458\u0430\u043D',
                                                '2': '\u0444\u0435\u0431',
                                                '3': '\u043C\u0430\u0440',
                                                '4': '\u0430\u043F\u0440'
                                            },
                                            'narrow': {
                                                '8': '\u0430',
                                                '7': '\u0458',
                                                '6': '\u0458',
                                                '5': '\u043C',
                                                '12': '\u0434',
                                                '11': '\u043D',
                                                '10': '\u043E',
                                                '9': '\u0441',
                                                '1': '\u0458',
                                                '2': '\u0444',
                                                '3': '\u043C',
                                                '4': '\u0430'
                                            },
                                            'wide': {
                                                '8': '\u0430\u0432\u0433\u0443\u0441\u0442',
                                                '7': '\u0458\u0443\u043B',
                                                '6': '\u0458\u0443\u043D',
                                                '5': '\u043C\u0430\u0458',
                                                '12': '\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440',
                                                '11': '\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440',
                                                '10': '\u043E\u043A\u0442\u043E\u0431\u0430\u0440',
                                                '9': '\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440',
                                                '1': '\u0458\u0430\u043D\u0443\u0430\u0440',
                                                '2': '\u0444\u0435\u0431\u0440\u0443\u0430\u0440',
                                                '3': '\u043C\u0430\u0440\u0442',
                                                '4': '\u0430\u043F\u0440\u0438\u043B'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u043D\u0435\u0434',
                                                'mon': '\u043F\u043E\u043D',
                                                'tue': '\u0443\u0442\u043E',
                                                'wed': '\u0441\u0440\u0435',
                                                'thu': '\u0447\u0435\u0442',
                                                'fri': '\u043F\u0435\u0442',
                                                'sat': '\u0441\u0443\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u043D',
                                                'mon': '\u043F',
                                                'tue': '\u0443',
                                                'wed': '\u0441',
                                                'thu': '\u0447',
                                                'fri': '\u043F',
                                                'sat': '\u0441'
                                            },
                                            'short': {
                                                'sun': '\u043D\u0435\u0434',
                                                'mon': '\u043F\u043E\u043D',
                                                'tue': '\u0443\u0442\u043E',
                                                'wed': '\u0441\u0440\u0435',
                                                'thu': '\u0447\u0435\u0442',
                                                'fri': '\u043F\u0435\u0442',
                                                'sat': '\u0441\u0443\u0431'
                                            },
                                            'wide': {
                                                'sun': '\u043D\u0435\u0434\u0435\u0459\u0430',
                                                'mon': '\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A',
                                                'tue': '\u0443\u0442\u043E\u0440\u0430\u043A',
                                                'wed': '\u0441\u0440\u0435\u0434\u0430',
                                                'thu': '\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A',
                                                'fri': '\u043F\u0435\u0442\u0430\u043A',
                                                'sat': '\u0441\u0443\u0431\u043E\u0442\u0430'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u043D\u0435\u0434',
                                                'mon': '\u043F\u043E\u043D',
                                                'tue': '\u0443\u0442\u043E',
                                                'wed': '\u0441\u0440\u0435',
                                                'thu': '\u0447\u0435\u0442',
                                                'fri': '\u043F\u0435\u0442',
                                                'sat': '\u0441\u0443\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u043D',
                                                'mon': '\u043F',
                                                'tue': '\u0443',
                                                'wed': '\u0441',
                                                'thu': '\u0447',
                                                'fri': '\u043F',
                                                'sat': '\u0441'
                                            },
                                            'short': {
                                                'sun': '\u043D\u0435',
                                                'mon': '\u043F\u043E',
                                                'tue': '\u0443\u0442',
                                                'wed': '\u0441\u0440',
                                                'thu': '\u0447\u0435',
                                                'fri': '\u043F\u0435',
                                                'sat': '\u0441\u0443'
                                            },
                                            'wide': {
                                                'sun': '\u043D\u0435\u0434\u0435\u0459\u0430',
                                                'mon': '\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A',
                                                'tue': '\u0443\u0442\u043E\u0440\u0430\u043A',
                                                'wed': '\u0441\u0440\u0435\u0434\u0430',
                                                'thu': '\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A',
                                                'fri': '\u043F\u0435\u0442\u0430\u043A',
                                                'sat': '\u0441\u0443\u0431\u043E\u0442\u0430'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u041A1',
                                                '2': '\u041A2',
                                                '3': '\u041A3',
                                                '4': '\u041A4'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '\u041F\u0440\u0432\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '2': '\u0414\u0440\u0443\u0433\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '3': '\u0422\u0440\u0435\u045B\u0435 \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '4': '\u0427\u0435\u0442\u0432\u0440\u0442\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u041A1',
                                                '2': '\u041A2',
                                                '3': '\u041A3',
                                                '4': '\u041A4'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '\u041F\u0440\u0432\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '2': '\u0414\u0440\u0443\u0433\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '3': '\u0422\u0440\u0435\u045B\u0435 \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435',
                                                '4': '\u0427\u0435\u0442\u0432\u0440\u0442\u043E \u0442\u0440\u043E\u043C\u0435\u0441\u0435\u0447\u0458\u0435'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            },
                                            'narrow': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            },
                                            'wide': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            },
                                            'narrow': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            },
                                            'wide': {
                                                'am': '\u043F\u0440\u0435 \u043F\u043E\u0434\u043D\u0435',
                                                'pm': '\u043F\u043E\u043F\u043E\u0434\u043D\u0435'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u041F\u0440\u0435 \u043D\u043E\u0432\u0435 \u0435\u0440\u0435',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u041D\u043E\u0432\u0435 \u0435\u0440\u0435',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u043F. \u043D. \u0435.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D. \u0435.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u043F.\u043D.\u0435.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D.\u0435.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, dd. MMMM y.',
                                        'long': 'dd. MMMM y.',
                                        'medium': 'dd.MM.y.',
                                        'short': 'd.M.yy.'
                                    },
                                    'timeFormats': {
                                        'full': 'HH.mm.ss zzzz',
                                        'long': 'HH.mm.ss z',
                                        'medium': 'HH.mm.ss',
                                        'short': 'HH.mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMEd': 'E, d. M. y.',
                                            'yMd': 'd. M. y.',
                                            'yM': 'y-M',
                                            'y': 'y.',
                                            'ms': 'mm.ss',
                                            'MMMMEd': 'E d. MMMM',
                                            'MMMMdd': 'dd. MMMM',
                                            'MMMMd': 'd. MMMM',
                                            'GyMMMd': 'd. MMM y. G',
                                            'GyMMMEd': 'E, d. MMM y. G',
                                            'h': 'hh a',
                                            'H': 'HH',
                                            'hm': 'hh.mm a',
                                            'Hm': 'HH.mm',
                                            'hms': 'hh.mm.ss a',
                                            'Hms': 'HH.mm.ss',
                                            'yQQQQ': 'QQQQ. y',
                                            'yQQQ': 'QQQ. y',
                                            'yMMMM': 'MMMM y.',
                                            'yMMMEd': 'E, d. MMM y.',
                                            'yMMMd': 'd. MMM y.',
                                            'yMMM': 'MMM y.',
                                            'yMMdd': 'dd.MM.y',
                                            'yMM': 'MM.y',
                                            'd': 'd',
                                            'Ed': 'E d.',
                                            'Ehm': 'E, h:mm a',
                                            'EHm': 'E, HH:mm',
                                            'Ehms': 'E, h:mm:ss a',
                                            'EHms': 'E, HH:mm:ss',
                                            'Gy': 'y. G',
                                            'GyMMM': 'MMM y. G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E, M-d',
                                            'MMdd': 'MM-dd',
                                            'MMM': 'LLL',
                                            'MMMd': 'd. MMM',
                                            'MMMdd': 'dd.MMM',
                                            'MMMEd': 'E d. MMM'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, dd. - E, dd. MMM',
                                                'M': 'E, dd. MMM - E, dd. MMM'
                                            },
                                            'MMMd': {
                                                'd': 'dd.-dd. MMM',
                                                'M': 'dd. MMM - dd. MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, d.M - E, d.M',
                                                'M': 'E, d.M - E, d.M'
                                            },
                                            'Md': {
                                                'd': 'd.M - d.M',
                                                'M': 'd.M - d.M'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH-HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'y M - M',
                                                'y': 'y M - M'
                                            },
                                            'yMd': {
                                                'd': 'd.M.y. - d.M.y.',
                                                'M': 'd.M.y. - d.M.y.',
                                                'y': 'd.M.y. - d.M.y.'
                                            },
                                            'yMEd': {
                                                'd': 'E, d.M.y. - E, d.M.y.',
                                                'M': 'E, d.M.y. - E, d.M.y.',
                                                'y': 'E, d.M.y. - E, d.M.y.'
                                            },
                                            'yMMM': {
                                                'M': 'MMM-MMM y.',
                                                'y': 'MMM y. - MMM y.'
                                            },
                                            'yMMMd': {
                                                'd': 'dd.-dd. MMM y.',
                                                'M': 'dd. MMM - dd. MMM y.',
                                                'y': 'dd. MMM y. - dd. MMM y.'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, dd. - E, dd. MMM y.',
                                                'M': 'E, dd. MMM - E, dd. MMM y.',
                                                'y': 'E, dd. MMM y. - E, dd. MMM y.'
                                            },
                                            'yMMMM': {
                                                'M': 'y-MM \u2013 MM',
                                                'y': 'y-MM \u2013 y-MM'
                                            },
                                            'Hmv': {
                                                'H': 'HH.mm-HH.mm v',
                                                'm': 'HH.mm-HH.mm v'
                                            },
                                            'hmv': {
                                                'a': 'h.mm a - h.mm a v',
                                                'h': 'h.mm-h.mm a v',
                                                'm': 'h.mm-h.mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH.mm-HH.mm',
                                                'm': 'HH.mm-HH.mm'
                                            },
                                            'hm': {
                                                'a': 'h.mm a - h.mm a',
                                                'h': 'h.mm-h.mm a',
                                                'm': 'h.mm-h.mm a'
                                            },
                                            'H': {
                                                'H': 'HH-HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate sv}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('sv', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} (normaltid)',
                                'regionFormat-type-daylight': '{0} (sommartid)',
                                'regionFormat': '{0}tid',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;\u2212HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'aug',
                                                '7': 'jul',
                                                '6': 'jun',
                                                '5': 'maj',
                                                '12': 'dec',
                                                '11': 'nov',
                                                '10': 'okt',
                                                '9': 'sep',
                                                '1': 'jan',
                                                '2': 'feb',
                                                '3': 'mar',
                                                '4': 'apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'augusti',
                                                '7': 'juli',
                                                '6': 'juni',
                                                '5': 'maj',
                                                '12': 'december',
                                                '11': 'november',
                                                '10': 'oktober',
                                                '9': 'september',
                                                '1': 'januari',
                                                '2': 'februari',
                                                '3': 'mars',
                                                '4': 'april'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Aug',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'Maj',
                                                '12': 'Dec',
                                                '11': 'Nov',
                                                '10': 'Okt',
                                                '9': 'Sep',
                                                '1': 'Jan',
                                                '2': 'Feb',
                                                '3': 'Mar',
                                                '4': 'Apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'Augusti',
                                                '7': 'Juli',
                                                '6': 'Juni',
                                                '5': 'Maj',
                                                '12': 'December',
                                                '11': 'November',
                                                '10': 'Oktober',
                                                '9': 'September',
                                                '1': 'Januari',
                                                '2': 'Februari',
                                                '3': 'Mars',
                                                '4': 'April'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 's\u00F6n',
                                                'mon': 'm\u00E5n',
                                                'tue': 'tis',
                                                'wed': 'ons',
                                                'thu': 'tors',
                                                'fri': 'fre',
                                                'sat': 'l\u00F6r'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 's\u00F6',
                                                'mon': 'm\u00E5',
                                                'tue': 'ti',
                                                'wed': 'on',
                                                'thu': 'to',
                                                'fri': 'fr',
                                                'sat': 'l\u00F6'
                                            },
                                            'wide': {
                                                'sun': 's\u00F6ndag',
                                                'mon': 'm\u00E5ndag',
                                                'tue': 'tisdag',
                                                'wed': 'onsdag',
                                                'thu': 'torsdag',
                                                'fri': 'fredag',
                                                'sat': 'l\u00F6rdag'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'S\u00F6n',
                                                'mon': 'M\u00E5n',
                                                'tue': 'Tis',
                                                'wed': 'Ons',
                                                'thu': 'Tor',
                                                'fri': 'Fre',
                                                'sat': 'L\u00F6r'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'O',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'L'
                                            },
                                            'short': {
                                                'sun': 'S\u00F6',
                                                'mon': 'M\u00E5',
                                                'tue': 'Ti',
                                                'wed': 'On',
                                                'thu': 'To',
                                                'fri': 'Fr',
                                                'sat': 'L\u00F6'
                                            },
                                            'wide': {
                                                'sun': 'S\u00F6ndag',
                                                'mon': 'M\u00E5ndag',
                                                'tue': 'Tisdag',
                                                'wed': 'Onsdag',
                                                'thu': 'Torsdag',
                                                'fri': 'Fredag',
                                                'sat': 'L\u00F6rdag'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1:a kvartalet',
                                                '2': '2:a kvartalet',
                                                '3': '3:e kvartalet',
                                                '4': '4:e kvartalet'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'K1',
                                                '2': 'K2',
                                                '3': 'K3',
                                                '4': 'K4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1:a kvartalet',
                                                '2': '2:a kvartalet',
                                                '3': '3:e kvartalet',
                                                '4': '4:e kvartalet'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'FM',
                                                'pm': 'EM'
                                            },
                                            'narrow': {
                                                'am': 'f',
                                                'pm': 'e'
                                            },
                                            'wide': {
                                                'am': 'fm',
                                                'pm': 'em'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'fm',
                                                'pm': 'em'
                                            },
                                            'narrow': {
                                                'am': 'f.m.',
                                                'pm': 'e.m.'
                                            },
                                            'wide': {
                                                'am': 'f\u00F6rmiddag',
                                                'pm': 'eftermiddag'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'f\u00F6re Kristus',
                                            '0-alt-variant': 'f\u00F6re v\u00E4sterl\u00E4ndsk tider\u00E4kning',
                                            '1': 'efter Kristus',
                                            '1-alt-variant': 'v\u00E4sterl\u00E4ndsk tider\u00E4kning'
                                        },
                                        'eraAbbr': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'f.v.t.',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'v.t.'
                                        },
                                        'eraNarrow': {
                                            '0': 'f.Kr.',
                                            '0-alt-variant': 'fvt',
                                            '1': 'e.Kr.',
                                            '1-alt-variant': 'vt'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE\'en\' \'den\' d:\'e\' MMMM y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'y-MM-dd'
                                    },
                                    'timeFormats': {
                                        'full': '\'kl\'. HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMM': 'y-MM',
                                            'yMEd': 'E, y-MM-dd',
                                            'yMd': 'y-MM-dd',
                                            'yM': 'y-MM',
                                            'y': 'y',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E d MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'h:mm a',
                                            'yQQQQ': 'y QQQQ',
                                            'yQQQ': 'y QQQ',
                                            'yMMMEd': 'E d MMM y',
                                            'yMMMd': 'd MMM y',
                                            'yMMM': 'MMM y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMd': 'd/M',
                                            'MMdd': 'dd/MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'MMMMd': 'd:\'e\' MMMM',
                                            'MMMMEd': 'E d:\'e\' MMMM',
                                            'ms': 'mm:ss'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d \u2013 E d MMM',
                                                'M': 'E d MMM \u2013 E d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'E d/M \u2013 E d/M',
                                                'M': 'E d/M \u2013 E d/M'
                                            },
                                            'Md': {
                                                'd': 'd\u2013d/M',
                                                'M': 'd/M \u2013 d/M'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'y-MM \u2013 MM',
                                                'y': 'y-MM \u2013 y-MM'
                                            },
                                            'yMd': {
                                                'd': 'y-MM-dd \u2013 dd',
                                                'M': 'y-MM-dd \u2013 MM-dd',
                                                'y': 'y-MM-dd \u2013 y-MM-dd'
                                            },
                                            'yMEd': {
                                                'd': 'E, y-MM-dd \u2013 E, y-MM-dd',
                                                'M': 'E, y-MM-dd \u2013 E, y-MM-dd',
                                                'y': 'E, y-MM-dd \u2013 E, y-MM-dd'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM\u2013d MMM y',
                                                'y': 'd MMM y\u2013d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E dd MMM\u2013E dd MMM y',
                                                'M': 'E dd MMM\u2013E dd MMM y',
                                                'y': 'E dd MMM y\u2013E dd MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate th}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9318
             * timeZoneNames: 24r9318
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('th', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '\u0E40\u0E27\u0E25\u0E32\u0E21\u0E32\u0E15\u0E23\u0E10\u0E32\u0E19{0}',
                                'regionFormat-type-daylight': '\u0E40\u0E27\u0E25\u0E32\u0E2D\u0E2D\u0E21\u0E41\u0E2A\u0E07{0}',
                                'regionFormat': '\u0E40\u0E27\u0E25\u0E32{0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0E2A.\u0E04.',
                                                '7': '\u0E01.\u0E04.',
                                                '6': '\u0E21\u0E34.\u0E22.',
                                                '5': '\u0E1E.\u0E04.',
                                                '12': '\u0E18.\u0E04.',
                                                '11': '\u0E1E.\u0E22.',
                                                '10': '\u0E15.\u0E04.',
                                                '9': '\u0E01.\u0E22.',
                                                '1': '\u0E21.\u0E04.',
                                                '2': '\u0E01.\u0E1E.',
                                                '3': '\u0E21\u0E35.\u0E04.',
                                                '4': '\u0E40\u0E21.\u0E22.'
                                            },
                                            'narrow': {
                                                '8': '\u0E2A.\u0E04.',
                                                '7': '\u0E01.\u0E04.',
                                                '6': '\u0E21\u0E34.\u0E22.',
                                                '5': '\u0E1E.\u0E04.',
                                                '12': '\u0E18.\u0E04.',
                                                '11': '\u0E1E.\u0E22.',
                                                '10': '\u0E15.\u0E04.',
                                                '9': '\u0E01.\u0E22.',
                                                '1': '\u0E21.\u0E04.',
                                                '2': '\u0E01.\u0E1E.',
                                                '3': '\u0E21\u0E35.\u0E04.',
                                                '4': '\u0E40\u0E21.\u0E22.'
                                            },
                                            'wide': {
                                                '8': '\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21',
                                                '7': '\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21',
                                                '6': '\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19',
                                                '5': '\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21',
                                                '12': '\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21',
                                                '11': '\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19',
                                                '10': '\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21',
                                                '9': '\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19',
                                                '1': '\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21',
                                                '2': '\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C',
                                                '3': '\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21',
                                                '4': '\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0E2A.\u0E04.',
                                                '7': '\u0E01.\u0E04.',
                                                '6': '\u0E21\u0E34.\u0E22.',
                                                '5': '\u0E1E.\u0E04.',
                                                '12': '\u0E18.\u0E04.',
                                                '11': '\u0E1E.\u0E22.',
                                                '10': '\u0E15.\u0E04.',
                                                '9': '\u0E01.\u0E22.',
                                                '1': '\u0E21.\u0E04.',
                                                '2': '\u0E01.\u0E1E.',
                                                '3': '\u0E21\u0E35.\u0E04.',
                                                '4': '\u0E40\u0E21.\u0E22.'
                                            },
                                            'narrow': {
                                                '8': '\u0E2A.\u0E04.',
                                                '7': '\u0E01.\u0E04.',
                                                '6': '\u0E21\u0E34.\u0E22.',
                                                '5': '\u0E1E.\u0E04.',
                                                '12': '\u0E18.\u0E04.',
                                                '11': '\u0E1E.\u0E22.',
                                                '10': '\u0E15.\u0E04.',
                                                '9': '\u0E01.\u0E22.',
                                                '1': '\u0E21.\u0E04.',
                                                '2': '\u0E01.\u0E1E.',
                                                '3': '\u0E21\u0E35.\u0E04.',
                                                '4': '\u0E40\u0E21.\u0E22.'
                                            },
                                            'wide': {
                                                '8': '\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21',
                                                '7': '\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21',
                                                '6': '\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19',
                                                '5': '\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21',
                                                '12': '\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21',
                                                '11': '\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19',
                                                '10': '\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21',
                                                '9': '\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19',
                                                '1': '\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21',
                                                '2': '\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C',
                                                '3': '\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21',
                                                '4': '\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u0E2D\u0E32.',
                                                'mon': '\u0E08.',
                                                'tue': '\u0E2D.',
                                                'wed': '\u0E1E.',
                                                'thu': '\u0E1E\u0E24.',
                                                'fri': '\u0E28.',
                                                'sat': '\u0E2A.'
                                            },
                                            'narrow': {
                                                'sun': '\u0E2D\u0E32',
                                                'mon': '\u0E08',
                                                'tue': '\u0E2D',
                                                'wed': '\u0E1E',
                                                'thu': '\u0E1E\u0E24',
                                                'fri': '\u0E28',
                                                'sat': '\u0E2A'
                                            },
                                            'short': {
                                                'sun': '\u0E2D\u0E32.',
                                                'mon': '\u0E08.',
                                                'tue': '\u0E2D.',
                                                'wed': '\u0E1E.',
                                                'thu': '\u0E1E\u0E24.',
                                                'fri': '\u0E28.',
                                                'sat': '\u0E2A.'
                                            },
                                            'wide': {
                                                'sun': '\u0E27\u0E31\u0E19\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C',
                                                'mon': '\u0E27\u0E31\u0E19\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C',
                                                'tue': '\u0E27\u0E31\u0E19\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23',
                                                'wed': '\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18',
                                                'thu': '\u0E27\u0E31\u0E19\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35',
                                                'fri': '\u0E27\u0E31\u0E19\u0E28\u0E38\u0E01\u0E23\u0E4C',
                                                'sat': '\u0E27\u0E31\u0E19\u0E40\u0E2A\u0E32\u0E23\u0E4C'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u0E2D\u0E32.',
                                                'mon': '\u0E08.',
                                                'tue': '\u0E2D.',
                                                'wed': '\u0E1E.',
                                                'thu': '\u0E1E\u0E24.',
                                                'fri': '\u0E28.',
                                                'sat': '\u0E2A.'
                                            },
                                            'narrow': {
                                                'sun': '\u0E2D\u0E32',
                                                'mon': '\u0E08',
                                                'tue': '\u0E2D',
                                                'wed': '\u0E1E',
                                                'thu': '\u0E1E\u0E24',
                                                'fri': '\u0E28',
                                                'sat': '\u0E2A'
                                            },
                                            'short': {
                                                'sun': '\u0E2D\u0E32.',
                                                'mon': '\u0E08.',
                                                'tue': '\u0E2D.',
                                                'wed': '\u0E1E.',
                                                'thu': '\u0E1E\u0E24.',
                                                'fri': '\u0E28.',
                                                'sat': '\u0E2A.'
                                            },
                                            'wide': {
                                                'sun': '\u0E27\u0E31\u0E19\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C',
                                                'mon': '\u0E27\u0E31\u0E19\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C',
                                                'tue': '\u0E27\u0E31\u0E19\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23',
                                                'wed': '\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18',
                                                'thu': '\u0E27\u0E31\u0E19\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35',
                                                'fri': '\u0E27\u0E31\u0E19\u0E28\u0E38\u0E01\u0E23\u0E4C',
                                                'sat': '\u0E27\u0E31\u0E19\u0E40\u0E2A\u0E32\u0E23\u0E4C'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 1',
                                                '2': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 2',
                                                '3': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 3',
                                                '4': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 1',
                                                '2': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 2',
                                                '3': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 3',
                                                '4': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 1',
                                                '2': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 2',
                                                '3': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 3',
                                                '4': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 1',
                                                '2': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 2',
                                                '3': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 3',
                                                '4': '\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A 4'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            },
                                            'narrow': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            },
                                            'wide': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            },
                                            'narrow': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            },
                                            'wide': {
                                                'am': '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07',
                                                'pm': '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u0E1B\u0E35\u0E01\u0E48\u0E2D\u0E19\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E4C\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A',
                                            '0-alt-variant': '\u0E01\u0E48\u0E2D\u0E19\u0E2A\u0E32\u0E21\u0E31\u0E0D\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A',
                                            '1': '\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E4C\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A',
                                            '1-alt-variant': '\u0E2A\u0E32\u0E21\u0E31\u0E0D\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A'
                                        },
                                        'eraAbbr': {
                                            '0': '\u0E1B\u0E35\u0E01\u0E48\u0E2D\u0E19 \u0E04.\u0E28.',
                                            '0-alt-variant': '\u0E01.\u0E2A.\u0E28.',
                                            '1': '\u0E04.\u0E28.',
                                            '1-alt-variant': '\u0E2A.\u0E28.'
                                        },
                                        'eraNarrow': {
                                            '0': '\u0E01\u0E48\u0E2D\u0E19 \u0E04.\u0E28.',
                                            '0-alt-variant': '\u0E01.\u0E2A.\u0E28.',
                                            '1': '\u0E04.\u0E28.',
                                            '1-alt-variant': '\u0E2A.\u0E28.'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE\u0E17\u0E35\u0E48 d MMMM G y',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'd/M/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'H \u0E19\u0E32\u0E2C\u0E34\u0E01\u0E32 mm \u0E19\u0E32\u0E17\u0E35 ss \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35 zzzz',
                                        'long': 'H \u0E19\u0E32\u0E2C\u0E34\u0E01\u0E32 mm \u0E19\u0E32\u0E17\u0E35 ss \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35 z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMd': 'd MMM y',
                                            'yMMM': 'MMM y',
                                            'yMEd': 'E d/M/y',
                                            'yMd': 'd/M/y',
                                            'EHm': 'E HH:mm',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM G y',
                                            'GyMMMEd': 'E d MMM G y',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E d MMM y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'G y',
                                            'GyMMM': 'MMM G y',
                                            'M': 'L',
                                            'Md': 'd/M',
                                            'MEd': 'E d/M',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E d MMMM',
                                            'mmss': 'mm:ss',
                                            'ms': 'mm:ss',
                                            'y': 'y',
                                            'yM': 'M/y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E d - E d MMM',
                                                'M': 'E d MMM - E d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd - d MMM',
                                                'M': 'd MMM - d MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL-LLL'
                                            },
                                            'MEd': {
                                                'd': 'E d - E d/M',
                                                'M': 'E d - E d/M'
                                            },
                                            'Md': {
                                                'd': 'd/M - d/M',
                                                'M': 'd/M - d/M'
                                            },
                                            'M': {
                                                'M': 'M-M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a - h a v',
                                                'h': 'h-h a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'M/y - M/y',
                                                'y': 'M/y - M/y'
                                            },
                                            'yMd': {
                                                'd': 'd-d/M/y',
                                                'M': 'd/M/y - d/M/y',
                                                'y': 'd/M/y - d/M/y'
                                            },
                                            'yMEd': {
                                                'd': 'E d - E d/M/y',
                                                'M': 'E d/M/y - E d/M/y',
                                                'y': 'E d/M/y - E d/M/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y - MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd-d MMM y',
                                                'M': 'd MMM - d MMM y',
                                                'y': 'd MMM y - d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E d - E d MMM y',
                                                'M': 'E d MMM - E d MMM y',
                                                'y': 'E d MMM y - E d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM\u2013MMMM y',
                                                'y': 'MMMM y - MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'H:mm-H:mm v',
                                                'm': 'H:mm-H:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a - h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a - h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a - h a',
                                                'h': 'h-h a'
                                            },
                                            'd': {
                                                'd': 'd-d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate tr}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('tr', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} Standart Saati',
                                'regionFormat-type-daylight': '{0} Yaz Saati',
                                'regionFormat': '{0} Saati',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'A\u011Fu',
                                                '7': 'Tem',
                                                '6': 'Haz',
                                                '5': 'May',
                                                '12': 'Ara',
                                                '11': 'Kas',
                                                '10': 'Eki',
                                                '9': 'Eyl',
                                                '1': 'Oca',
                                                '2': '\u015Eub',
                                                '3': 'Mar',
                                                '4': 'Nis'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'T',
                                                '6': 'H',
                                                '5': 'M',
                                                '12': 'A',
                                                '11': 'K',
                                                '10': 'E',
                                                '9': 'E',
                                                '1': 'O',
                                                '2': '\u015E',
                                                '3': 'M',
                                                '4': 'N'
                                            },
                                            'wide': {
                                                '8': 'A\u011Fustos',
                                                '7': 'Temmuz',
                                                '6': 'Haziran',
                                                '5': 'May\u0131s',
                                                '12': 'Aral\u0131k',
                                                '11': 'Kas\u0131m',
                                                '10': 'Ekim',
                                                '9': 'Eyl\u00FCl',
                                                '1': 'Ocak',
                                                '2': '\u015Eubat',
                                                '3': 'Mart',
                                                '4': 'Nisan'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'A\u011Fu',
                                                '7': 'Tem',
                                                '6': 'Haz',
                                                '5': 'May',
                                                '12': 'Ara',
                                                '11': 'Kas',
                                                '10': 'Eki',
                                                '9': 'Eyl',
                                                '1': 'Oca',
                                                '2': '\u015Eub',
                                                '3': 'Mar',
                                                '4': 'Nis'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'T',
                                                '6': 'H',
                                                '5': 'M',
                                                '12': 'A',
                                                '11': 'K',
                                                '10': 'E',
                                                '9': 'E',
                                                '1': 'O',
                                                '2': '\u015E',
                                                '3': 'M',
                                                '4': 'N'
                                            },
                                            'wide': {
                                                '8': 'A\u011Fustos',
                                                '7': 'Temmuz',
                                                '6': 'Haziran',
                                                '5': 'May\u0131s',
                                                '12': 'Aral\u0131k',
                                                '11': 'Kas\u0131m',
                                                '10': 'Ekim',
                                                '9': 'Eyl\u00FCl',
                                                '1': 'Ocak',
                                                '2': '\u015Eubat',
                                                '3': 'Mart',
                                                '4': 'Nisan'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'Paz',
                                                'mon': 'Pzt',
                                                'tue': 'Sal',
                                                'wed': '\u00C7ar',
                                                'thu': 'Per',
                                                'fri': 'Cum',
                                                'sat': 'Cmt'
                                            },
                                            'narrow': {
                                                'sun': 'P',
                                                'mon': 'P',
                                                'tue': 'S',
                                                'wed': '\u00C7',
                                                'thu': 'P',
                                                'fri': 'C',
                                                'sat': 'C'
                                            },
                                            'short': {
                                                'sun': 'Pa',
                                                'mon': 'Pt',
                                                'tue': 'Sa',
                                                'wed': '\u00C7a',
                                                'thu': 'Pe',
                                                'fri': 'Cu',
                                                'sat': 'Ct'
                                            },
                                            'wide': {
                                                'sun': 'Pazar',
                                                'mon': 'Pazartesi',
                                                'tue': 'Sal\u0131',
                                                'wed': '\u00C7ar\u015Famba',
                                                'thu': 'Per\u015Fembe',
                                                'fri': 'Cuma',
                                                'sat': 'Cumartesi'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'Paz',
                                                'mon': 'Pzt',
                                                'tue': 'Sal',
                                                'wed': '\u00C7ar',
                                                'thu': 'Per',
                                                'fri': 'Cum',
                                                'sat': 'Cmt'
                                            },
                                            'narrow': {
                                                'sun': 'P',
                                                'mon': 'P',
                                                'tue': 'S',
                                                'wed': '\u00C7',
                                                'thu': 'P',
                                                'fri': 'C',
                                                'sat': 'C'
                                            },
                                            'short': {
                                                'sun': 'Pa',
                                                'mon': 'Pt',
                                                'tue': 'Sa',
                                                'wed': '\u00C7a',
                                                'thu': 'Pe',
                                                'fri': 'Cu',
                                                'sat': 'Ct'
                                            },
                                            'wide': {
                                                'sun': 'Pazar',
                                                'mon': 'Pazartesi',
                                                'tue': 'Sal\u0131',
                                                'wed': '\u00C7ar\u015Famba',
                                                'thu': 'Per\u015Fembe',
                                                'fri': 'Cuma',
                                                'sat': 'Cumartesi'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '\u00C71',
                                                '2': '\u00C72',
                                                '3': '\u00C73',
                                                '4': '\u00C74'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '1. \u00E7eyrek',
                                                '2': '2. \u00E7eyrek',
                                                '3': '3. \u00E7eyrek',
                                                '4': '4. \u00E7eyrek'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '\u00C71',
                                                '2': '\u00C72',
                                                '3': '\u00C73',
                                                '4': '\u00C74'
                                            },
                                            'narrow': {
                                                '1': '1.',
                                                '2': '2.',
                                                '3': '3.',
                                                '4': '4.'
                                            },
                                            'wide': {
                                                '1': '1. \u00E7eyrek',
                                                '2': '2. \u00E7eyrek',
                                                '3': '3. \u00E7eyrek',
                                                '4': '4. \u00E7eyrek'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            },
                                            'narrow': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            },
                                            'wide': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            },
                                            'narrow': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            },
                                            'wide': {
                                                'am': '\u00D6\u00D6',
                                                'pm': '\u00D6S'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Milattan \u00D6nce',
                                            '0-alt-variant': '\u0130\u00D6',
                                            '1': 'Milattan Sonra',
                                            '1-alt-variant': '\u0130S'
                                        },
                                        'eraAbbr': {
                                            '0': 'M\u00D6',
                                            '0-alt-variant': '\u0130\u00D6',
                                            '1': 'MS',
                                            '1-alt-variant': '\u0130S'
                                        },
                                        'eraNarrow': {
                                            '0': 'M\u00D6',
                                            '0-alt-variant': '\u0130\u00D6',
                                            '1': 'MS',
                                            '1-alt-variant': '\u0130S'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'd MMMM y EEEE',
                                        'long': 'd MMMM y',
                                        'medium': 'd MMM y',
                                        'short': 'd.MM.y'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'MMM y',
                                            'yMM': 'MM.y',
                                            'yMEd': 'dd.MM.y E',
                                            'yMd': 'dd.MM.y',
                                            'yM': 'MM/y',
                                            'Ehm': 'E a h:mm',
                                            'Ed': 'd E',
                                            'd': 'd',
                                            'GyMMMd': 'G dd MMM y',
                                            'GyMMMEd': 'G d MMM y E',
                                            'h': 'a h',
                                            'H': 'HH',
                                            'hm': 'a h:mm',
                                            'yQQQQ': 'y/QQQQ',
                                            'yQQQ': 'y/QQQ',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'd MMM y E',
                                            'yMMMd': 'dd MMM y',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'a h:mm:ss',
                                            'Hm': 'HH:mm',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E a h:mm:ss',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'G y',
                                            'GyMMM': 'G MMM y',
                                            'M': 'L',
                                            'Md': 'dd/MM',
                                            'MEd': 'dd/MM E',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'd MMMM E',
                                            'MMMMd': 'dd MMMM',
                                            'MMMMEd': 'dd MMMM E',
                                            'mmss': 'mm:ss',
                                            'ms': 'mm:ss',
                                            'y': 'y'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'd MMM E \u2013 d MMM E',
                                                'M': 'd MMM E \u2013 d MMM E'
                                            },
                                            'MMMd': {
                                                'd': 'd \u2013 d MMM',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'MMM\u2013MMM'
                                            },
                                            'MEd': {
                                                'd': 'dd/MM E \u2013 dd/MM E',
                                                'M': 'dd/MM E \u2013 dd/MM E'
                                            },
                                            'Md': {
                                                'd': 'dd/MM \u2013 dd/MM',
                                                'M': 'dd/MM \u2013 dd/MM'
                                            },
                                            'M': {
                                                'M': 'MM\u2013MM'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'a h \u2013 a h v',
                                                'h': 'a h\u2013h v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM/y \u2013 MM/y',
                                                'y': 'MM/y \u2013 MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y \u2013 dd.MM.y',
                                                'M': 'dd.MM.y \u2013 dd.MM.y',
                                                'y': 'dd.MM.y \u2013 dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'dd.MM.y E \u2013 dd.MM.y E',
                                                'M': 'dd.MM.y E \u2013 dd.MM.y E',
                                                'y': 'dd.MM.y E \u2013 dd.MM.y E'
                                            },
                                            'yMMM': {
                                                'M': 'MMM\u2013MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM \u2013 d MMM y',
                                                'y': 'd MMM y \u2013 d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'd MMM y E \u2013 d MMM y E',
                                                'M': 'd MMM y E \u2013 d MMM y E',
                                                'y': 'd MMM y E \u2013 d MMM y E'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM \u2013 MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'a h:mm \u2013 a h:mm v',
                                                'h': 'a h:mm\u2013h:mm v',
                                                'm': 'a h:mm\u2013h:mm v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'a h:mm \u2013 a h:mm',
                                                'h': 'a h:mm\u2013h:mm',
                                                'm': 'a h:mm\u2013h:mm'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'a h \u2013 a h',
                                                'h': 'a h\u2013h'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate uk}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('uk', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '\u0427\u0430\u0441: {0}, \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0438\u0439',
                                'regionFormat-type-daylight': '\u0427\u0430\u0441: {0}, \u043B\u0456\u0442\u043D\u0456\u0439',
                                'regionFormat': '\u0427\u0430\u0441: {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '\u0441\u0435\u0440\u043F.',
                                                '7': '\u043B\u0438\u043F.',
                                                '6': '\u0447\u0435\u0440\u0432.',
                                                '5': '\u0442\u0440\u0430\u0432.',
                                                '12': '\u0433\u0440\u0443\u0434.',
                                                '11': '\u043B\u0438\u0441\u0442.',
                                                '10': '\u0436\u043E\u0432\u0442.',
                                                '9': '\u0432\u0435\u0440.',
                                                '1': '\u0441\u0456\u0447.',
                                                '2': '\u043B\u044E\u0442.',
                                                '3': '\u0431\u0435\u0440.',
                                                '4': '\u043A\u0432\u0456\u0442.'
                                            },
                                            'narrow': {
                                                '8': '\u0421',
                                                '7': '\u041B',
                                                '6': '\u0427',
                                                '5': '\u0422',
                                                '12': '\u0413',
                                                '11': '\u041B',
                                                '10': '\u0416',
                                                '9': '\u0412',
                                                '1': '\u0421',
                                                '2': '\u041B',
                                                '3': '\u0411',
                                                '4': '\u041A'
                                            },
                                            'wide': {
                                                '8': '\u0441\u0435\u0440\u043F\u043D\u044F',
                                                '7': '\u043B\u0438\u043F\u043D\u044F',
                                                '6': '\u0447\u0435\u0440\u0432\u043D\u044F',
                                                '5': '\u0442\u0440\u0430\u0432\u043D\u044F',
                                                '12': '\u0433\u0440\u0443\u0434\u043D\u044F',
                                                '11': '\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430',
                                                '10': '\u0436\u043E\u0432\u0442\u043D\u044F',
                                                '9': '\u0432\u0435\u0440\u0435\u0441\u043D\u044F',
                                                '1': '\u0441\u0456\u0447\u043D\u044F',
                                                '2': '\u043B\u044E\u0442\u043E\u0433\u043E',
                                                '3': '\u0431\u0435\u0440\u0435\u0437\u043D\u044F',
                                                '4': '\u043A\u0432\u0456\u0442\u043D\u044F'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '\u0421\u0435\u0440',
                                                '7': '\u041B\u0438\u043F',
                                                '6': '\u0427\u0435\u0440',
                                                '5': '\u0422\u0440\u0430',
                                                '12': '\u0413\u0440\u0443',
                                                '11': '\u041B\u0438\u0441',
                                                '10': '\u0416\u043E\u0432',
                                                '9': '\u0412\u0435\u0440',
                                                '1': '\u0421\u0456\u0447',
                                                '2': '\u041B\u044E\u0442',
                                                '3': '\u0411\u0435\u0440',
                                                '4': '\u041A\u0432\u0456'
                                            },
                                            'narrow': {
                                                '8': '\u0421',
                                                '7': '\u041B',
                                                '6': '\u0427',
                                                '5': '\u0422',
                                                '12': '\u0413',
                                                '11': '\u041B',
                                                '10': '\u0416',
                                                '9': '\u0412',
                                                '1': '\u0421',
                                                '2': '\u041B',
                                                '3': '\u0411',
                                                '4': '\u041A'
                                            },
                                            'wide': {
                                                '8': '\u0421\u0435\u0440\u043F\u0435\u043D\u044C',
                                                '7': '\u041B\u0438\u043F\u0435\u043D\u044C',
                                                '6': '\u0427\u0435\u0440\u0432\u0435\u043D\u044C',
                                                '5': '\u0422\u0440\u0430\u0432\u0435\u043D\u044C',
                                                '12': '\u0413\u0440\u0443\u0434\u0435\u043D\u044C',
                                                '11': '\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434',
                                                '10': '\u0416\u043E\u0432\u0442\u0435\u043D\u044C',
                                                '9': '\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C',
                                                '1': '\u0421\u0456\u0447\u0435\u043D\u044C',
                                                '2': '\u041B\u044E\u0442\u0438\u0439',
                                                '3': '\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C',
                                                '4': '\u041A\u0432\u0456\u0442\u0435\u043D\u044C'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u041D\u0434',
                                                'mon': '\u041F\u043D',
                                                'tue': '\u0412\u0442',
                                                'wed': '\u0421\u0440',
                                                'thu': '\u0427\u0442',
                                                'fri': '\u041F\u0442',
                                                'sat': '\u0421\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u041D',
                                                'mon': '\u041F',
                                                'tue': '\u0412',
                                                'wed': '\u0421',
                                                'thu': '\u0427',
                                                'fri': '\u041F',
                                                'sat': '\u0421'
                                            },
                                            'short': {
                                                'sun': '\u041D\u0434',
                                                'mon': '\u041F\u043D',
                                                'tue': '\u0412\u0442',
                                                'wed': '\u0421\u0440',
                                                'thu': '\u0427\u0442',
                                                'fri': '\u041F\u0442',
                                                'sat': '\u0421\u0431'
                                            },
                                            'wide': {
                                                'sun': '\u043D\u0435\u0434\u0456\u043B\u044F',
                                                'mon': '\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A',
                                                'tue': '\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A',
                                                'wed': '\u0441\u0435\u0440\u0435\u0434\u0430',
                                                'thu': '\u0447\u0435\u0442\u0432\u0435\u0440',
                                                'fri': '\u043F\u02BC\u044F\u0442\u043D\u0438\u0446\u044F',
                                                'sat': '\u0441\u0443\u0431\u043E\u0442\u0430'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u041D\u0434',
                                                'mon': '\u041F\u043D',
                                                'tue': '\u0412\u0442',
                                                'wed': '\u0421\u0440',
                                                'thu': '\u0427\u0442',
                                                'fri': '\u041F\u0442',
                                                'sat': '\u0421\u0431'
                                            },
                                            'narrow': {
                                                'sun': '\u041D',
                                                'mon': '\u041F',
                                                'tue': '\u0412',
                                                'wed': '\u0421',
                                                'thu': '\u0427',
                                                'fri': '\u041F',
                                                'sat': '\u0421'
                                            },
                                            'short': {
                                                'sun': '\u041D\u0434',
                                                'mon': '\u041F\u043D',
                                                'tue': '\u0412\u0442',
                                                'wed': '\u0421\u0440',
                                                'thu': '\u0427\u0442',
                                                'fri': '\u041F\u0442',
                                                'sat': '\u0421\u0431'
                                            },
                                            'wide': {
                                                'sun': '\u041D\u0435\u0434\u0456\u043B\u044F',
                                                'mon': '\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A',
                                                'tue': '\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A',
                                                'wed': '\u0421\u0435\u0440\u0435\u0434\u0430',
                                                'thu': '\u0427\u0435\u0442\u0432\u0435\u0440',
                                                'fri': '\u041F\u02BC\u044F\u0442\u043D\u0438\u0446\u044F',
                                                'sat': '\u0421\u0443\u0431\u043E\u0442\u0430'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'I \u043A\u0432.',
                                                '2': 'II \u043A\u0432.',
                                                '3': 'III \u043A\u0432.',
                                                '4': 'IV \u043A\u0432.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'I \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '2': 'II \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '3': 'III \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '4': 'IV \u043A\u0432\u0430\u0440\u0442\u0430\u043B'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1-\u0439 \u043A\u0432.',
                                                '2': '2-\u0439 \u043A\u0432.',
                                                '3': '3-\u0439 \u043A\u0432.',
                                                '4': '4-\u0439 \u043A\u0432.'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '2': '2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '3': '3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B',
                                                '4': '4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            },
                                            'narrow': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            },
                                            'wide': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            },
                                            'narrow': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            },
                                            'wide': {
                                                'afternoon': '\u0434\u043D\u044F',
                                                'am': '\u0434\u043F',
                                                'evening': '\u0432\u0435\u0447\u043E\u0440\u0430',
                                                'morning': '\u0440\u0430\u043D\u043A\u0443',
                                                'night': '\u043D\u043E\u0447\u0456',
                                                'pm': '\u043F\u043F'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u0434\u043E \u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u0434\u043E \u043D.\u0435.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D.\u0435.',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u0434\u043E \u043D.\u0435.',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u043D.\u0435.',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, d MMMM y \'\u0440\'.',
                                        'long': 'd MMMM y \'\u0440\'.',
                                        'medium': 'd MMM y',
                                        'short': 'dd.MM.yy'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMM': 'LLL y',
                                            'yMEd': 'E, dd.MM.y',
                                            'yMd': 'dd.MM.y',
                                            'yM': 'MM.y',
                                            'y': 'y',
                                            'Ehm': 'E h:mm a',
                                            'Ed': 'E, d',
                                            'd': 'd',
                                            'GyMMMd': 'd MMM y G',
                                            'GyMMMEd': 'E, d MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'HHmm': 'HH:mm',
                                            'yQQQQ': 'QQQQ y \'\u0440\'.',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'LLLL y',
                                            'yMMMEd': 'E, d MMM y',
                                            'yMMMd': 'd MMM y',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'HHmmss': 'HH:mm:ss',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'LLL y G',
                                            'hms': 'h:mm:ss a',
                                            'Hms': 'HH:mm:ss',
                                            'M': 'L',
                                            'Md': 'dd.MM',
                                            'MEd': 'E, dd.MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'd MMM',
                                            'MMMEd': 'E, d MMM',
                                            'MMMMd': 'd MMMM',
                                            'MMMMEd': 'E, d MMMM',
                                            'ms': 'mm:ss'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, d \u2013 E, d MMM',
                                                'M': 'E, d MMM \u2013 E, d MMM'
                                            },
                                            'MMMd': {
                                                'd': 'd\u2013d MMM',
                                                'M': 'd MMM \u2013 d MMM'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u2013LLL'
                                            },
                                            'MEd': {
                                                'd': 'E, dd.MM \u2013 E, dd.MM',
                                                'M': 'E, dd.MM \u2013 E, dd.MM'
                                            },
                                            'Md': {
                                                'd': 'dd.MM \u2013 dd.MM',
                                                'M': 'dd.MM \u2013 dd.MM'
                                            },
                                            'M': {
                                                'M': 'M\u2013M'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h\u2013h a v'
                                            },
                                            'y': {
                                                'y': 'y\u2013y'
                                            },
                                            'yM': {
                                                'M': 'MM.y \u2013 MM.y',
                                                'y': 'MM.y \u2013 MM.y'
                                            },
                                            'yMd': {
                                                'd': 'dd.MM.y \u2013 dd.MM.y',
                                                'M': 'dd.MM.y \u2013 dd.MM.y',
                                                'y': 'dd.MM.y \u2013 dd.MM.y'
                                            },
                                            'yMEd': {
                                                'd': 'E, dd.MM.y \u2013 E, dd.MM.y',
                                                'M': 'E, dd.MM.y \u2013 E, dd.MM.y',
                                                'y': 'E, dd.MM.y \u2013 E, dd.MM.y'
                                            },
                                            'yMMM': {
                                                'M': 'LLL\u2013LLL y',
                                                'y': 'LLL y \u2013 LLL y'
                                            },
                                            'yMMMd': {
                                                'd': 'd\u2013d MMM y',
                                                'M': 'd MMM \u2013 d MMM y',
                                                'y': 'd MMM y \u2013 d MMM y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, d \u2013 E, d MMM y',
                                                'M': 'E, d MMM \u2013 E, d MMM y',
                                                'y': 'E, d MMM y \u2013 E, d MMM y'
                                            },
                                            'yMMMM': {
                                                'M': 'LLLL \u2013 LLLL y',
                                                'y': 'LLLL y \u2013 LLLL y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm v',
                                                'm': 'HH:mm\u2013HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm\u2013h:mm a v',
                                                'm': 'h:mm\u2013h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm\u2013h:mm a',
                                                'm': 'h:mm\u2013h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h\u2013h a'
                                            },
                                            'd': {
                                                'd': 'd\u2013d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate vi}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('vi', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': 'Gi\u1EDD chu\u1EA9n {0}',
                                'regionFormat-type-daylight': 'Gi\u1EDD ban ng\u00E0y {0}',
                                'regionFormat': 'Gi\u1EDD {0}',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'thg 8',
                                                '7': 'thg 7',
                                                '6': 'thg 6',
                                                '5': 'thg 5',
                                                '12': 'thg 12',
                                                '11': 'thg 11',
                                                '10': 'thg 10',
                                                '9': 'thg 9',
                                                '1': 'thg 1',
                                                '2': 'thg 2',
                                                '3': 'thg 3',
                                                '4': 'thg 4'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': 'th\u00E1ng 8',
                                                '7': 'th\u00E1ng 7',
                                                '6': 'th\u00E1ng 6',
                                                '5': 'th\u00E1ng 5',
                                                '12': 'th\u00E1ng 12',
                                                '11': 'th\u00E1ng 11',
                                                '10': 'th\u00E1ng 10',
                                                '9': 'th\u00E1ng 9',
                                                '1': 'th\u00E1ng 1',
                                                '2': 'th\u00E1ng 2',
                                                '3': 'th\u00E1ng 3',
                                                '4': 'th\u00E1ng 4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Thg 8',
                                                '7': 'Thg 7',
                                                '6': 'Thg 6',
                                                '5': 'Thg 5',
                                                '12': 'Thg 12',
                                                '11': 'Thg 11',
                                                '10': 'Thg 10',
                                                '9': 'Thg 9',
                                                '1': 'Thg 1',
                                                '2': 'Thg 2',
                                                '3': 'Thg 3',
                                                '4': 'Thg 4'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': 'Th\u00E1ng 8',
                                                '7': 'Th\u00E1ng 7',
                                                '6': 'Th\u00E1ng 6',
                                                '5': 'Th\u00E1ng 5',
                                                '12': 'Th\u00E1ng 12',
                                                '11': 'Th\u00E1ng 11',
                                                '10': 'Th\u00E1ng 10',
                                                '9': 'Th\u00E1ng 9',
                                                '1': 'Th\u00E1ng 1',
                                                '2': 'Th\u00E1ng 2',
                                                '3': 'Th\u00E1ng 3',
                                                '4': 'Th\u00E1ng 4'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'CN',
                                                'mon': 'Th 2',
                                                'tue': 'Th 3',
                                                'wed': 'Th 4',
                                                'thu': 'Th 5',
                                                'fri': 'Th 6',
                                                'sat': 'Th 7'
                                            },
                                            'narrow': {
                                                'sun': 'CN',
                                                'mon': 'T2',
                                                'tue': 'T3',
                                                'wed': 'T4',
                                                'thu': 'T5',
                                                'fri': 'T6',
                                                'sat': 'T7'
                                            },
                                            'short': {
                                                'sun': 'CN',
                                                'mon': 'T2',
                                                'tue': 'T3',
                                                'wed': 'T4',
                                                'thu': 'T5',
                                                'fri': 'T6',
                                                'sat': 'T7'
                                            },
                                            'wide': {
                                                'sun': 'Ch\u1EE7 Nh\u1EADt',
                                                'mon': 'Th\u1EE9 Hai',
                                                'tue': 'Th\u1EE9 Ba',
                                                'wed': 'Th\u1EE9 T\u01B0',
                                                'thu': 'Th\u1EE9 N\u0103m',
                                                'fri': 'Th\u1EE9 S\u00E1u',
                                                'sat': 'Th\u1EE9 B\u1EA3y'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'CN',
                                                'mon': 'Th 2',
                                                'tue': 'Th 3',
                                                'wed': 'Th 4',
                                                'thu': 'Th 5',
                                                'fri': 'Th 6',
                                                'sat': 'Th 7'
                                            },
                                            'narrow': {
                                                'sun': 'CN',
                                                'mon': 'T2',
                                                'tue': 'T3',
                                                'wed': 'T4',
                                                'thu': 'T5',
                                                'fri': 'T6',
                                                'sat': 'T7'
                                            },
                                            'short': {
                                                'sun': 'CN',
                                                'mon': 'T2',
                                                'tue': 'T3',
                                                'wed': 'T4',
                                                'thu': 'T5',
                                                'fri': 'T6',
                                                'sat': 'T7'
                                            },
                                            'wide': {
                                                'sun': 'Ch\u1EE7 Nh\u1EADt',
                                                'mon': 'Th\u1EE9 Hai',
                                                'tue': 'Th\u1EE9 Ba',
                                                'wed': 'Th\u1EE9 T\u01B0',
                                                'thu': 'Th\u1EE9 N\u0103m',
                                                'fri': 'Th\u1EE9 S\u00E1u',
                                                'sat': 'Th\u1EE9 B\u1EA3y'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'Qu\u00FD 1',
                                                '2': 'Qu\u00FD 2',
                                                '3': 'Qu\u00FD 3',
                                                '4': 'Qu\u00FD 4'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': 'Qu\u00FD 1',
                                                '2': 'Qu\u00FD 2',
                                                '3': 'Qu\u00FD 3',
                                                '4': 'Qu\u00FD 4'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            },
                                            'narrow': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            },
                                            'wide': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            },
                                            'narrow': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            },
                                            'wide': {
                                                'am': 'SA',
                                                'pm': 'CH'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'tr. CN',
                                            '0-alt-variant': 'BCE',
                                            '1': 'sau CN',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': 'tr. CN',
                                            '0-alt-variant': 'BCE',
                                            '1': 'sau CN',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'tr. CN',
                                            '0-alt-variant': 'BCE',
                                            '1': 'sau CN',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, \'ng\u00E0y\' dd MMMM \'n\u0103m\' y',
                                        'long': '\'Ng\u00E0y\' dd \'th\u00E1ng\' MM \'n\u0103m\' y',
                                        'medium': 'dd-MM-y',
                                        'short': 'dd/MM/y'
                                    },
                                    'timeFormats': {
                                        'full': 'HH:mm:ss zzzz',
                                        'long': 'HH:mm:ss z',
                                        'medium': 'HH:mm:ss',
                                        'short': 'HH:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{0} {1}',
                                        'long': '{0} {1}',
                                        'medium': '{0} {1}',
                                        'short': '{0} {1}',
                                        'availableFormats': {
                                            'yMM': 'MM-y',
                                            'yMEd': 'E, dd-M-y',
                                            'yMd': 'd/M/y',
                                            'yM': 'M/y',
                                            'y': '\'N\u0103m\' y',
                                            'ms': 'mm:ss',
                                            'Ed': 'E, dd',
                                            'd': 'd',
                                            'GyMMMd': 'dd MMM, y G',
                                            'GyMMMEd': 'E, dd MMM y G',
                                            'h': 'h a',
                                            'H': 'HH',
                                            'hm': 'h:mm a',
                                            'Hm': 'H:mm',
                                            'yQQQQ': 'QQQQ y',
                                            'yQQQ': 'QQQ y',
                                            'yMMMM': 'MMMM y',
                                            'yMMMEd': 'E, dd MMM y',
                                            'yMMMd': 'dd MMM, y',
                                            'yMMM': 'MMM y',
                                            'Hms': 'H:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': '\'N\u0103m\' y G',
                                            'GyMMM': 'MMM y G',
                                            'M': 'L',
                                            'Md': 'dd-M',
                                            'MEd': 'E, dd-M',
                                            'MMdd': 'dd-MM',
                                            'MMM': 'LLL',
                                            'MMMd': 'dd MMM',
                                            'MMMEd': 'E, dd MMM',
                                            'MMMMd': 'dd MMMM',
                                            'MMMMEd': 'E, dd MMMM',
                                            'mmss': 'mm:ss'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'EEEE, \'ng\u00E0y\' dd - EEEE, \'ng\u00E0y\' dd \'th\u00E1ng\' M',
                                                'M': 'EEEE, \'ng\u00E0y\' dd \'th\u00E1ng\' M - EEEE, \'ng\u00E0y\' dd \'th\u00E1ng\' M'
                                            },
                                            'MMMd': {
                                                'd': '\'Ng\u00E0y\' dd \'th\u00E1ng\' M - \'Ng\u00E0y\' dd \'th\u00E1ng\' M',
                                                'M': '\'Ng\u00E0y\' dd \'th\u00E1ng\' M - \'Ng\u00E0y\' dd \'th\u00E1ng\' M'
                                            },
                                            'MMM': {
                                                'M': 'MMM-MMM'
                                            },
                                            'MEd': {
                                                'd': 'EEEE, dd/MM - EEEE, dd/MM',
                                                'M': 'EEEE, dd/MM - EEEE, dd/MM'
                                            },
                                            'Md': {
                                                'd': 'dd/MM - dd/MM',
                                                'M': 'dd/MM - dd/MM'
                                            },
                                            'M': {
                                                'M': '\'Th\u00E1ng\' M - \'Th\u00E1ng\' M'
                                            },
                                            'Hv': {
                                                'H': 'HH\'h\'-HH\'h\' v'
                                            },
                                            'hv': {
                                                'a': 'h\'h\' a - h\'h\' a v',
                                                'h': 'h\'h\'-h\'h\' a v'
                                            },
                                            'y': {
                                                'y': 'y-y'
                                            },
                                            'yM': {
                                                'M': 'MM/y - MM/y',
                                                'y': 'MM/y - MM/y'
                                            },
                                            'yMd': {
                                                'd': 'dd/MM/y - dd/MM/y',
                                                'M': 'dd/MM/y - dd/MM/y',
                                                'y': 'dd/MM/y - dd/MM/y'
                                            },
                                            'yMEd': {
                                                'd': 'EEEE, dd/MM/y - EEEE, dd/MM/y',
                                                'M': 'EEEE, dd/MM/y - EEEE, dd/MM/y',
                                                'y': 'EEEE, dd/MM/y - EEEE, dd/MM/y'
                                            },
                                            'yMMM': {
                                                'M': '\'Th\u00E1ng\' M - \'Th\u00E1ng\' M \'n\u0103m\' y',
                                                'y': '\'Th\u00E1ng\' M \'n\u0103m\' y - \'Th\u00E1ng\' M \'n\u0103m\' y'
                                            },
                                            'yMMMd': {
                                                'd': '\'Ng\u00E0y\' dd \'th\u00E1ng\' M - \'Ng\u00E0y\' dd \'th\u00E1ng\' M \'n\u0103m\' y',
                                                'M': '\'Ng\u00E0y\' dd \'th\u00E1ng\' M - \'Ng\u00E0y\' dd \'th\u00E1ng\' M \'n\u0103m\' y',
                                                'y': '\'Ng\u00E0y\' dd \'th\u00E1ng\' M \'n\u0103m\' y - \'Ng\u00E0y\' dd \'th\u00E1ng\' M \'n\u0103m\' y'
                                            },
                                            'yMMMEd': {
                                                'd': 'EEEE, \'ng\u00E0y\' dd MMM - EEEE, \'ng\u00E0y\' dd MMM \'n\u0103m\' y',
                                                'M': 'E, dd \'th\u00E1ng\' M - E, dd \'th\u00E1ng\' M, y',
                                                'y': 'E, dd \'th\u00E1ng\' M, y - E, dd \'th\u00E1ng\' M, y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM-MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm-HH:mm v',
                                                'm': 'HH:mm-HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm-h:mm a v',
                                                'm': 'h:mm-h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm-HH:mm',
                                                'm': 'HH:mm-HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm-h:mm a',
                                                'm': 'h:mm-h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH\'h\' - HH\'h\''
                                            },
                                            'h': {
                                                'a': 'h\'h\' a - h\'h\' a',
                                                'h': 'h\'h\' - h\'h\' a'
                                            },
                                            'd': {
                                                'd': '\'Ng\u00E0y\' dd-dd'
                                            },
                                            'intervalFormatFallback': '{0} - {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate zh-Hant}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9308
             * timeZoneNames: 24r9308
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('zh-Hant', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1}\uFF08{0}\uFF09',
                                'regionFormat-type-standard': '{0} (+0)',
                                'regionFormat-type-daylight': '{0} (+1)',
                                'regionFormat': '{0}\u6642\u9593',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u9031\u65E5',
                                                'mon': '\u9031\u4E00',
                                                'tue': '\u9031\u4E8C',
                                                'wed': '\u9031\u4E09',
                                                'thu': '\u9031\u56DB',
                                                'fri': '\u9031\u4E94',
                                                'sat': '\u9031\u516D'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'short': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'wide': {
                                                'sun': '\u661F\u671F\u65E5',
                                                'mon': '\u661F\u671F\u4E00',
                                                'tue': '\u661F\u671F\u4E8C',
                                                'wed': '\u661F\u671F\u4E09',
                                                'thu': '\u661F\u671F\u56DB',
                                                'fri': '\u661F\u671F\u4E94',
                                                'sat': '\u661F\u671F\u516D'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u9031\u65E5',
                                                'mon': '\u9031\u4E00',
                                                'tue': '\u9031\u4E8C',
                                                'wed': '\u9031\u4E09',
                                                'thu': '\u9031\u56DB',
                                                'fri': '\u9031\u4E94',
                                                'sat': '\u9031\u516D'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'short': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'wide': {
                                                'sun': '\u661F\u671F\u65E5',
                                                'mon': '\u661F\u671F\u4E00',
                                                'tue': '\u661F\u671F\u4E8C',
                                                'wed': '\u661F\u671F\u4E09',
                                                'thu': '\u661F\u671F\u56DB',
                                                'fri': '\u661F\u671F\u4E94',
                                                'sat': '\u661F\u671F\u516D'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1\u5B63',
                                                '2': '2\u5B63',
                                                '3': '3\u5B63',
                                                '4': '4\u5B63'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C1\u5B63',
                                                '2': '\u7B2C2\u5B63',
                                                '3': '\u7B2C3\u5B63',
                                                '4': '\u7B2C4\u5B63'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1\u5B63',
                                                '2': '2\u5B63',
                                                '3': '3\u5B63',
                                                '4': '4\u5B63'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C1\u5B63',
                                                '2': '\u7B2C2\u5B63',
                                                '3': '\u7B2C3\u5B63',
                                                '4': '\u7B2C4\u5B63'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'narrow': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'wide': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'narrow': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'wide': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u897F\u5143\u524D',
                                            '0-alt-variant': '\u516C\u5143\u524D',
                                            '1': '\u897F\u5143',
                                            '1-alt-variant': '\u516C\u5143'
                                        },
                                        'eraAbbr': {
                                            '0': '\u897F\u5143\u524D',
                                            '0-alt-variant': '\u516C\u5143\u524D',
                                            '1': '\u897F\u5143',
                                            '1-alt-variant': '\u516C\u5143'
                                        },
                                        'eraNarrow': {
                                            '0': '\u897F\u5143\u524D',
                                            '0-alt-variant': '\u516C\u5143\u524D',
                                            '1': '\u897F\u5143',
                                            '1-alt-variant': '\u516C\u5143'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y\u5E74M\u6708d\u65E5EEEE',
                                        'long': 'y\u5E74M\u6708d\u65E5',
                                        'medium': 'y\u5E74M\u6708d\u65E5',
                                        'short': 'y/M/d'
                                    },
                                    'timeFormats': {
                                        'full': 'zzzzah\u6642mm\u5206ss\u79D2',
                                        'long': 'zah\u6642mm\u5206ss\u79D2',
                                        'medium': 'ah:mm:ss',
                                        'short': 'ah:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1}{0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMd': 'y\u5E74M\u6708d\u65E5',
                                            'yMMM': 'y\u5E74M\u6708',
                                            'yMM': 'y-MM',
                                            'yMEd': 'y/M/d\uFF08E\uFF09',
                                            'EHm': 'E HH:mm',
                                            'Ehm': 'E a h:mm',
                                            'Ed': 'd\u65E5\uFF08E\uFF09',
                                            'd': 'd\u65E5',
                                            'GyMMMd': 'G y \u5E74 M \u6708 d \u65E5',
                                            'GyMMMEd': 'G y \u5E74 M \u6708 d \u65E5E',
                                            'h': 'ah\u6642',
                                            'H': 'H\u6642',
                                            'yQQQQ': 'y\u5E74QQQQ',
                                            'yQQQ': 'y\u5E74QQQ',
                                            'yMMMM': 'y\u5E74M\u6708',
                                            'yMMMEd': 'y\u5E74M\u6708d\u65E5E',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'ah:mm:ss',
                                            'Hm': 'HH:mm',
                                            'hm': 'ah:mm',
                                            'Ehms': 'E a h:mm:ss',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'G y \u5E74',
                                            'GyMMM': 'G y \u5E74 M \u6708',
                                            'M': 'M\u6708',
                                            'Md': 'M/d',
                                            'MEd': 'M/d\uFF08E\uFF09',
                                            'MMdd': 'MM/dd',
                                            'MMM': 'LLL',
                                            'MMMd': 'M\u6708d\u65E5',
                                            'MMMEd': 'M\u6708d\u65E5E',
                                            'MMMMdd': 'M\u6708dd\u65E5',
                                            'ms': 'mm:ss',
                                            'y': 'y\u5E74',
                                            'yM': 'y/M',
                                            'yMd': 'y/M/d'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'M\u6708d\u65E5E\u81F3d\u65E5E',
                                                'M': 'M\u6708d\u65E5E\u81F3M\u6708d\u65E5E'
                                            },
                                            'MMMd': {
                                                'd': 'M\u6708d\u65E5\u81F3d\u65E5',
                                                'M': 'M\u6708d\u65E5\u81F3M\u6708d\u65E5'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u81F3LLL'
                                            },
                                            'MEd': {
                                                'd': 'M/dE\u81F3M/dE',
                                                'M': 'M/dE\u81F3M/dE'
                                            },
                                            'Md': {
                                                'd': 'M/d\u81F3M/d',
                                                'M': 'M/d\u81F3M/d'
                                            },
                                            'M': {
                                                'M': 'M\u6708\u81F3M\u6708'
                                            },
                                            'Hv': {
                                                'H': 'HH\u2013HH [v]'
                                            },
                                            'hv': {
                                                'a': 'a h \u6642\u81F3a h \u6642 [v]',
                                                'h': 'a h \u6642\u81F3 h \u6642 [v]'
                                            },
                                            'intervalFormatFallback': '{0}\u81F3{1}',
                                            'y': {
                                                'y': 'y\u81F3y'
                                            },
                                            'yM': {
                                                'M': 'y/M\u81F3y/M',
                                                'y': 'y/M\u81F3y/M'
                                            },
                                            'yMd': {
                                                'd': 'y/M/d\u81F3y/M/d',
                                                'M': 'y/M/d\u81F3y/M/d',
                                                'y': 'y/M/d\u81F3y/M/d'
                                            },
                                            'yMEd': {
                                                'd': 'y/M/dE\u81F3y/M/dE',
                                                'M': 'y/M/dE\u81F3y/M/dE',
                                                'y': 'y/M/dE\u81F3y/M/dE'
                                            },
                                            'yMMM': {
                                                'M': 'y\u5E74M\u6708\u81F3M\u6708',
                                                'y': 'y\u5E74M\u6708\u81F3y\u5E74M\u6708'
                                            },
                                            'yMMMd': {
                                                'd': 'y\u5E74M\u6708d\u65E5\u81F3d\u65E5',
                                                'M': 'y\u5E74M\u6708d\u65E5\u81F3M\u6708d\u65E5',
                                                'y': 'y\u5E74M\u6708d\u65E5\u81F3y\u5E74M\u6708d\u65E5'
                                            },
                                            'yMMMEd': {
                                                'd': 'y\u5E74M\u6708d\u65E5E\u81F3d\u65E5E',
                                                'M': 'y\u5E74M\u6708d\u65E5E\u81F3M\u6708d\u65E5E',
                                                'y': 'y\u5E74M\u6708d\u65E5E\u81F3y\u5E74M\u6708d\u65E5E'
                                            },
                                            'yMMMM': {
                                                'M': 'y\u5E74M\u6708\u81F3M\u6708',
                                                'y': 'y\u5E74M\u6708\u81F3y\u5E74M\u6708'
                                            },
                                            'MMMM': {
                                                'M': 'LLLL\u81F3 LLLL'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm\u2013HH:mm [v]',
                                                'm': 'HH:mm\u2013HH:mm [v]'
                                            },
                                            'hmv': {
                                                'a': 'a h:mm \u81F3a h:mm [v]',
                                                'h': 'a h:mm \u81F3 h:mm [v]',
                                                'm': 'a h:mm \u81F3 h:mm [v]'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u81F3HH:mm'
                                            },
                                            'hm': {
                                                'a': 'ah:mm\u81F3ah:mm',
                                                'h': 'ah:mm\u81F3h:mm',
                                                'm': 'ah:mm\u81F3h:mm'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'ah\u6642\u81F3ah\u6642',
                                                'h': 'ah\u6642\u81F3h\u6642'
                                            },
                                            'd': {
                                                'd': 'd\u65E5\u81F3d\u65E5'
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate zh}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9308
             * timeZoneNames: 24r9308
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('zh', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1}\uFF08{0}\uFF09',
                                'regionFormat-type-standard': '{0}\u6807\u51C6\u65F6\u95F4',
                                'regionFormat-type-daylight': '{0}\u590F\u4EE4\u65F6\u95F4',
                                'regionFormat': '{0}\u65F6\u95F4',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '\u516B\u6708',
                                                '7': '\u4E03\u6708',
                                                '6': '\u516D\u6708',
                                                '5': '\u4E94\u6708',
                                                '12': '\u5341\u4E8C\u6708',
                                                '11': '\u5341\u4E00\u6708',
                                                '10': '\u5341\u6708',
                                                '9': '\u4E5D\u6708',
                                                '1': '\u4E00\u6708',
                                                '2': '\u4E8C\u6708',
                                                '3': '\u4E09\u6708',
                                                '4': '\u56DB\u6708'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': '8\u6708',
                                                '7': '7\u6708',
                                                '6': '6\u6708',
                                                '5': '5\u6708',
                                                '12': '12\u6708',
                                                '11': '11\u6708',
                                                '10': '10\u6708',
                                                '9': '9\u6708',
                                                '1': '1\u6708',
                                                '2': '2\u6708',
                                                '3': '3\u6708',
                                                '4': '4\u6708'
                                            },
                                            'narrow': {
                                                '8': '8',
                                                '7': '7',
                                                '6': '6',
                                                '5': '5',
                                                '12': '12',
                                                '11': '11',
                                                '10': '10',
                                                '9': '9',
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '8': '\u516B\u6708',
                                                '7': '\u4E03\u6708',
                                                '6': '\u516D\u6708',
                                                '5': '\u4E94\u6708',
                                                '12': '\u5341\u4E8C\u6708',
                                                '11': '\u5341\u4E00\u6708',
                                                '10': '\u5341\u6708',
                                                '9': '\u4E5D\u6708',
                                                '1': '\u4E00\u6708',
                                                '2': '\u4E8C\u6708',
                                                '3': '\u4E09\u6708',
                                                '4': '\u56DB\u6708'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': '\u5468\u65E5',
                                                'mon': '\u5468\u4E00',
                                                'tue': '\u5468\u4E8C',
                                                'wed': '\u5468\u4E09',
                                                'thu': '\u5468\u56DB',
                                                'fri': '\u5468\u4E94',
                                                'sat': '\u5468\u516D'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'short': {
                                                'sun': '\u5468\u65E5',
                                                'mon': '\u5468\u4E00',
                                                'tue': '\u5468\u4E8C',
                                                'wed': '\u5468\u4E09',
                                                'thu': '\u5468\u56DB',
                                                'fri': '\u5468\u4E94',
                                                'sat': '\u5468\u516D'
                                            },
                                            'wide': {
                                                'sun': '\u661F\u671F\u65E5',
                                                'mon': '\u661F\u671F\u4E00',
                                                'tue': '\u661F\u671F\u4E8C',
                                                'wed': '\u661F\u671F\u4E09',
                                                'thu': '\u661F\u671F\u56DB',
                                                'fri': '\u661F\u671F\u4E94',
                                                'sat': '\u661F\u671F\u516D'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': '\u5468\u65E5',
                                                'mon': '\u5468\u4E00',
                                                'tue': '\u5468\u4E8C',
                                                'wed': '\u5468\u4E09',
                                                'thu': '\u5468\u56DB',
                                                'fri': '\u5468\u4E94',
                                                'sat': '\u5468\u516D'
                                            },
                                            'narrow': {
                                                'sun': '\u65E5',
                                                'mon': '\u4E00',
                                                'tue': '\u4E8C',
                                                'wed': '\u4E09',
                                                'thu': '\u56DB',
                                                'fri': '\u4E94',
                                                'sat': '\u516D'
                                            },
                                            'short': {
                                                'sun': '\u5468\u65E5',
                                                'mon': '\u5468\u4E00',
                                                'tue': '\u5468\u4E8C',
                                                'wed': '\u5468\u4E09',
                                                'thu': '\u5468\u56DB',
                                                'fri': '\u5468\u4E94',
                                                'sat': '\u5468\u516D'
                                            },
                                            'wide': {
                                                'sun': '\u661F\u671F\u65E5',
                                                'mon': '\u661F\u671F\u4E00',
                                                'tue': '\u661F\u671F\u4E8C',
                                                'wed': '\u661F\u671F\u4E09',
                                                'thu': '\u661F\u671F\u56DB',
                                                'fri': '\u661F\u671F\u4E94',
                                                'sat': '\u661F\u671F\u516D'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': '1\u5B63\u5EA6',
                                                '2': '2\u5B63\u5EA6',
                                                '3': '3\u5B63\u5EA6',
                                                '4': '4\u5B63\u5EA6'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C\u4E00\u5B63\u5EA6',
                                                '2': '\u7B2C\u4E8C\u5B63\u5EA6',
                                                '3': '\u7B2C\u4E09\u5B63\u5EA6',
                                                '4': '\u7B2C\u56DB\u5B63\u5EA6'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': '1\u5B63\u5EA6',
                                                '2': '2\u5B63\u5EA6',
                                                '3': '3\u5B63\u5EA6',
                                                '4': '4\u5B63\u5EA6'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '\u7B2C\u4E00\u5B63\u5EA6',
                                                '2': '\u7B2C\u4E8C\u5B63\u5EA6',
                                                '3': '\u7B2C\u4E09\u5B63\u5EA6',
                                                '4': '\u7B2C\u56DB\u5B63\u5EA6'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'narrow': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'wide': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'narrow': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            },
                                            'wide': {
                                                'pm': '\u4E0B\u5348',
                                                'weeHours': '\u51CC\u6668',
                                                'afternoon': '\u4E0B\u5348',
                                                'am': '\u4E0A\u5348',
                                                'earlyMorning': '\u6E05\u6668',
                                                'midDay': '\u4E2D\u5348',
                                                'morning': '\u4E0A\u5348',
                                                'night': '\u665A\u4E0A',
                                                'noon': '\u4E2D\u5348'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': '\u516C\u5143\u524D',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u516C\u5143',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraAbbr': {
                                            '0': '\u516C\u5143\u524D',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u516C\u5143',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': '\u516C\u5143\u524D',
                                            '0-alt-variant': 'BCE',
                                            '1': '\u516C\u5143',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'y\u5E74M\u6708d\u65E5EEEE',
                                        'long': 'y\u5E74M\u6708d\u65E5',
                                        'medium': 'y\u5E74M\u6708d\u65E5',
                                        'short': 'yy/M/d'
                                    },
                                    'timeFormats': {
                                        'full': 'zzzzah:mm:ss',
                                        'long': 'zah:mm:ss',
                                        'medium': 'ah:mm:ss',
                                        'short': 'ah:mm'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} {0}',
                                        'long': '{1} {0}',
                                        'medium': '{1} {0}',
                                        'short': '{1} {0}',
                                        'availableFormats': {
                                            'yMMMd': 'y\u5E74M\u6708d\u65E5',
                                            'yMMM': 'y\u5E74M\u6708',
                                            'yMM': 'y\u5E74M\u6708',
                                            'yMEd': 'y/M/dE',
                                            'EHm': 'EHH:mm',
                                            'Ehm': 'Eah:mm',
                                            'Ed': 'd\u65E5E',
                                            'd': 'd\u65E5',
                                            'GyMMMd': 'Gy\u5E74M\u6708d\u65E5',
                                            'GyMMMEd': 'Gy\u5E74M\u6708d\u65E5E',
                                            'h': 'ah\u65F6',
                                            'H': 'H\u65F6',
                                            'yQQQQ': 'y\u5E74\u7B2CQ\u5B63\u5EA6',
                                            'yQQQ': 'y\u5E74\u7B2CQ\u5B63\u5EA6',
                                            'yMMMM': 'y\u5E74M\u6708',
                                            'yMMMEd': 'y\u5E74M\u6708d\u65E5E',
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'ah:mm:ss',
                                            'Hm': 'HH:mm',
                                            'hm': 'ah:mm',
                                            'Ehms': 'Eah:mm:ss',
                                            'EHms': 'EHH:mm:ss',
                                            'Gy': 'Gy\u5E74',
                                            'GyMMM': 'Gy\u5E74M\u6708',
                                            'M': 'M\u6708',
                                            'Md': 'M/d',
                                            'MEd': 'M/dE',
                                            'MMdd': 'MM/dd',
                                            'MMM': 'LLL',
                                            'MMMd': 'M\u6708d\u65E5',
                                            'MMMEd': 'M\u6708d\u65E5E',
                                            'MMMMdd': 'M\u6708dd\u65E5',
                                            'ms': 'mm:ss',
                                            'y': 'y\u5E74',
                                            'yM': 'y/M',
                                            'yMd': 'y/M/d'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{1} {0}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{1}{0}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{1} {0}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'M\u6708d\u65E5E\u81F3d\u65E5E',
                                                'M': 'M\u6708d\u65E5E\u81F3M\u6708d\u65E5E'
                                            },
                                            'MMMd': {
                                                'd': 'M\u6708d\u65E5\u81F3d\u65E5',
                                                'M': 'M\u6708d\u65E5\u81F3M\u6708d\u65E5'
                                            },
                                            'MMM': {
                                                'M': 'LLL\u81F3LLL'
                                            },
                                            'MEd': {
                                                'd': 'M/dE\u81F3M/dE',
                                                'M': 'M/dE\u81F3M/dE'
                                            },
                                            'Md': {
                                                'd': 'M/d \u2013 M/d',
                                                'M': 'M/d \u2013 M/d'
                                            },
                                            'M': {
                                                'M': 'M\u2013M\u6708'
                                            },
                                            'Hv': {
                                                'H': 'v HH\u2013HH'
                                            },
                                            'hv': {
                                                'a': 'vah\u65F6\u81F3ah\u65F6',
                                                'h': 'vah\u65F6\u81F3h\u65F6'
                                            },
                                            'y': {
                                                'y': 'y\u2013y\u5E74'
                                            },
                                            'yM': {
                                                'M': 'y\u5E74M\u6708\u81F3M\u6708',
                                                'y': 'y\u5E74M\u6708\u81F3y\u5E74M\u6708'
                                            },
                                            'yMd': {
                                                'd': 'y/M/d \u2013 y/M/d',
                                                'M': 'y/M/d \u2013 y/M/d',
                                                'y': 'y/M/d \u2013 y/M/d'
                                            },
                                            'yMEd': {
                                                'd': 'y/M/dE\u81F3y/M/dE',
                                                'M': 'y/M/dE\u81F3y/M/dE',
                                                'y': 'y/M/dE\u81F3y/M/dE'
                                            },
                                            'yMMM': {
                                                'M': 'y\u5E74M\u6708\u81F3M\u6708',
                                                'y': 'y\u5E74M\u6708\u81F3y\u5E74M\u6708'
                                            },
                                            'yMMMd': {
                                                'd': 'y\u5E74M\u6708d\u65E5\u81F3d\u65E5',
                                                'M': 'y\u5E74M\u6708d\u65E5\u81F3M\u6708d\u65E5',
                                                'y': 'y\u5E74M\u6708d\u65E5\u81F3y\u5E74M\u6708d\u65E5'
                                            },
                                            'yMMMEd': {
                                                'd': 'y\u5E74M\u6708d\u65E5E\u81F3d\u65E5E',
                                                'M': 'y\u5E74M\u6708d\u65E5E\u81F3M\u6708d\u65E5E',
                                                'y': 'y\u5E74M\u6708d\u65E5E\u81F3y\u5E74M\u6708d\u65E5E'
                                            },
                                            'yMMMM': {
                                                'M': 'y\u5E74M\u6708\u81F3M\u6708',
                                                'y': 'y\u5E74M\u6708\u81F3y\u5E74M\u6708'
                                            },
                                            'Hmv': {
                                                'H': 'v HH:mm\u2013HH:mm',
                                                'm': 'v HH:mm\u2013HH:mm'
                                            },
                                            'hmv': {
                                                'a': 'vah:mm\u81F3ah:mm',
                                                'h': 'vah:mm\u81F3h:mm',
                                                'm': 'vah:mm\u81F3h:mm'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm\u2013HH:mm',
                                                'm': 'HH:mm\u2013HH:mm'
                                            },
                                            'hm': {
                                                'a': 'ah:mm\u81F3ah:mm',
                                                'h': 'ah:mm\u81F3h:mm',
                                                'm': 'ah:mm\u81F3h:mm'
                                            },
                                            'H': {
                                                'H': 'HH\u2013HH'
                                            },
                                            'h': {
                                                'a': 'ah\u65F6\u81F3ah\u65F6',
                                                'h': 'ah\u65F6\u81F3h\u65F6'
                                            },
                                            'd': {
                                                'd': 'd\u2013d\u65E5'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

            /**
             * @file {@link https://github.com/Xotic750/astrodate en}. Language file for AstroDate.
             * @version 0.5.2
             * @author Graham Fairweather a.k.a Xotic750 <xotic750@gmail.com>
             * @copyright Graham Fairweather 2013
             * @license {@link <http://www.gnu.org/licenses/> GPL3}
             * ca-gregorian: 24r9287
             * timeZoneNames: 24r9287
             * units:
             */

            /*
             * This program is free software: you can redistribute it and/or modify
             * it under the terms of the GNU General Public License as published by
             * the Free Software Foundation, either version 3 of the License, or
             * (at your option) any later version.
             *
             * This program is distributed in the hope that it will be useful,
             * but WITHOUT ANY WARRANTY; without even the implied warranty of
             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
             * GNU General Public License for more details.
             *
             * You should have received a copy of the GNU General Public License
             * along with this program.  If not, see <http://www.gnu.org/licenses/>.
             */

            (function (thisContext) {
                if ('object' !== typeof thisContext || null === thisContext) {
                    throw new TypeError('Invalid global context');
                }

                function defineLanguage(AstroDate) {
                    AstroDate.lang('en', {
                        'dates': {
                            'timeZoneNames': {
                                'fallbackFormat': '{1} ({0})',
                                'regionFormat-type-standard': '{0} Standard Time',
                                'regionFormat-type-daylight': '{0} Daylight Time',
                                'regionFormat': '{0} Time',
                                'gmtZeroFormat': 'GMT',
                                'gmtFormat': 'GMT{0}',
                                'hourFormat': '+HH:mm;-HH:mm'
                            },
                            'calendars': {
                                'gregorian': {
                                    'months': {
                                        'format': {
                                            'abbreviated': {
                                                '8': 'Aug',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'May',
                                                '12': 'Dec',
                                                '11': 'Nov',
                                                '10': 'Oct',
                                                '9': 'Sep',
                                                '1': 'Jan',
                                                '2': 'Feb',
                                                '3': 'Mar',
                                                '4': 'Apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'August',
                                                '7': 'July',
                                                '6': 'June',
                                                '5': 'May',
                                                '12': 'December',
                                                '11': 'November',
                                                '10': 'October',
                                                '9': 'September',
                                                '1': 'January',
                                                '2': 'February',
                                                '3': 'March',
                                                '4': 'April'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '8': 'Aug',
                                                '7': 'Jul',
                                                '6': 'Jun',
                                                '5': 'May',
                                                '12': 'Dec',
                                                '11': 'Nov',
                                                '10': 'Oct',
                                                '9': 'Sep',
                                                '1': 'Jan',
                                                '2': 'Feb',
                                                '3': 'Mar',
                                                '4': 'Apr'
                                            },
                                            'narrow': {
                                                '8': 'A',
                                                '7': 'J',
                                                '6': 'J',
                                                '5': 'M',
                                                '12': 'D',
                                                '11': 'N',
                                                '10': 'O',
                                                '9': 'S',
                                                '1': 'J',
                                                '2': 'F',
                                                '3': 'M',
                                                '4': 'A'
                                            },
                                            'wide': {
                                                '8': 'August',
                                                '7': 'July',
                                                '6': 'June',
                                                '5': 'May',
                                                '12': 'December',
                                                '11': 'November',
                                                '10': 'October',
                                                '9': 'September',
                                                '1': 'January',
                                                '2': 'February',
                                                '3': 'March',
                                                '4': 'April'
                                            }
                                        }
                                    },
                                    'days': {
                                        'format': {
                                            'abbreviated': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'W',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Su',
                                                'mon': 'Mo',
                                                'tue': 'Tu',
                                                'wed': 'We',
                                                'thu': 'Th',
                                                'fri': 'Fr',
                                                'sat': 'Sa'
                                            },
                                            'wide': {
                                                'sun': 'Sunday',
                                                'mon': 'Monday',
                                                'tue': 'Tuesday',
                                                'wed': 'Wednesday',
                                                'thu': 'Thursday',
                                                'fri': 'Friday',
                                                'sat': 'Saturday'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'sun': 'Sun',
                                                'mon': 'Mon',
                                                'tue': 'Tue',
                                                'wed': 'Wed',
                                                'thu': 'Thu',
                                                'fri': 'Fri',
                                                'sat': 'Sat'
                                            },
                                            'narrow': {
                                                'sun': 'S',
                                                'mon': 'M',
                                                'tue': 'T',
                                                'wed': 'W',
                                                'thu': 'T',
                                                'fri': 'F',
                                                'sat': 'S'
                                            },
                                            'short': {
                                                'sun': 'Su',
                                                'mon': 'Mo',
                                                'tue': 'Tu',
                                                'wed': 'We',
                                                'thu': 'Th',
                                                'fri': 'Fr',
                                                'sat': 'Sa'
                                            },
                                            'wide': {
                                                'sun': 'Sunday',
                                                'mon': 'Monday',
                                                'tue': 'Tuesday',
                                                'wed': 'Wednesday',
                                                'thu': 'Thursday',
                                                'fri': 'Friday',
                                                'sat': 'Saturday'
                                            }
                                        }
                                    },
                                    'quarters': {
                                        'format': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1st quarter',
                                                '2': '2nd quarter',
                                                '3': '3rd quarter',
                                                '4': '4th quarter'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                '1': 'Q1',
                                                '2': 'Q2',
                                                '3': 'Q3',
                                                '4': 'Q4'
                                            },
                                            'narrow': {
                                                '1': '1',
                                                '2': '2',
                                                '3': '3',
                                                '4': '4'
                                            },
                                            'wide': {
                                                '1': '1st quarter',
                                                '2': '2nd quarter',
                                                '3': '3rd quarter',
                                                '4': '4th quarter'
                                            }
                                        }
                                    },
                                    'dayPeriods': {
                                        'format': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'noon',
                                                'pm': 'PM',
                                                'pm-alt-variant': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'n',
                                                'pm': 'p',
                                                'pm-alt-variant': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'noon',
                                                'pm': 'PM',
                                                'pm-alt-variant': 'p.m.'
                                            }
                                        },
                                        'stand-alone': {
                                            'abbreviated': {
                                                'am': 'AM',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'noon',
                                                'pm': 'PM',
                                                'pm-alt-variant': 'p.m.'
                                            },
                                            'narrow': {
                                                'am': 'a',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'n',
                                                'pm': 'p',
                                                'pm-alt-variant': 'p.m.'
                                            },
                                            'wide': {
                                                'am': 'AM',
                                                'am-alt-variant': 'a.m.',
                                                'noon': 'noon',
                                                'pm': 'PM',
                                                'pm-alt-variant': 'p.m.'
                                            }
                                        }
                                    },
                                    'eras': {
                                        'eraNames': {
                                            '0': 'Before Christ',
                                            '0-alt-variant': 'Before Common Era',
                                            '1': 'Anno Domini',
                                            '1-alt-variant': 'Common Era'
                                        },
                                        'eraAbbr': {
                                            '0': 'BC',
                                            '0-alt-variant': 'BCE',
                                            '1': 'AD',
                                            '1-alt-variant': 'CE'
                                        },
                                        'eraNarrow': {
                                            '0': 'B',
                                            '0-alt-variant': 'BCE',
                                            '1': 'A',
                                            '1-alt-variant': 'CE'
                                        }
                                    },
                                    'dateFormats': {
                                        'full': 'EEEE, MMMM d, y',
                                        'long': 'MMMM d, y',
                                        'medium': 'MMM d, y',
                                        'short': 'M/d/yy'
                                    },
                                    'timeFormats': {
                                        'full': 'h:mm:ss a zzzz',
                                        'long': 'h:mm:ss a z',
                                        'medium': 'h:mm:ss a',
                                        'short': 'h:mm a'
                                    },
                                    'dateTimeFormats': {
                                        'full': '{1} \'at\' {0}',
                                        'long': '{1} \'at\' {0}',
                                        'medium': '{1}, {0}',
                                        'short': '{1}, {0}',
                                        'availableFormats': {
                                            'Hms': 'HH:mm:ss',
                                            'hms': 'h:mm:ss a',
                                            'Hm': 'HH:mm',
                                            'hm': 'h:mm a',
                                            'H': 'HH',
                                            'h': 'h a',
                                            'GyMMMEd': 'E, MMM d, y G',
                                            'GyMMMd': 'MMM d, y G',
                                            'd': 'd',
                                            'Ed': 'd E',
                                            'Ehm': 'E h:mm a',
                                            'EHm': 'E HH:mm',
                                            'Ehms': 'E h:mm:ss a',
                                            'EHms': 'E HH:mm:ss',
                                            'Gy': 'y G',
                                            'GyMMM': 'MMM y G',
                                            'yM': 'M/y',
                                            'yMd': 'M/d/y',
                                            'yMEd': 'E, M/d/y',
                                            'yMMM': 'MMM y',
                                            'yMMMd': 'MMM d, y',
                                            'yMMMEd': 'E, MMM d, y',
                                            'yQQQ': 'QQQ y',
                                            'yQQQQ': 'QQQQ y',
                                            'y': 'y',
                                            'ms': 'mm:ss',
                                            'MMMEd': 'E, MMM d',
                                            'MMMd': 'MMM d',
                                            'MMM': 'LLL',
                                            'MEd': 'E, M/d',
                                            'Md': 'M/d',
                                            'M': 'L'
                                        },
                                        'appendItems': {
                                            'Second': '{0} ({2}: {1})',
                                            'Quarter': '{0} ({2}: {1})',
                                            'Month': '{0} ({2}: {1})',
                                            'Year': '{0} {1}',
                                            'Week': '{0} ({2}: {1})',
                                            'Timezone': '{0} {1}',
                                            'Day': '{0} ({2}: {1})',
                                            'Day-Of-Week': '{0} {1}',
                                            'Era': '{0} {1}',
                                            'Hour': '{0} ({2}: {1})',
                                            'Minute': '{0} ({2}: {1})'
                                        },
                                        'intervalFormats': {
                                            'MMMEd': {
                                                'd': 'E, MMM d \u2013 E, MMM d',
                                                'M': 'E, MMM d \u2013 E, MMM d'
                                            },
                                            'MMMd': {
                                                'd': 'MMM d \u2013 d',
                                                'M': 'MMM d \u2013 MMM d'
                                            },
                                            'MMM': {
                                                'M': 'MMM \u2013 MMM'
                                            },
                                            'MEd': {
                                                'd': 'E, M/d \u2013 E, M/d',
                                                'M': 'E, M/d \u2013 E, M/d'
                                            },
                                            'Md': {
                                                'd': 'M/d \u2013 M/d',
                                                'M': 'M/d \u2013 M/d'
                                            },
                                            'M': {
                                                'M': 'M \u2013 M'
                                            },
                                            'Hv': {
                                                'H': 'HH \u2013 HH v'
                                            },
                                            'hv': {
                                                'a': 'h a \u2013 h a v',
                                                'h': 'h \u2013 h a v'
                                            },
                                            'y': {
                                                'y': 'y \u2013 y'
                                            },
                                            'yM': {
                                                'M': 'M/y \u2013 M/y',
                                                'y': 'M/y \u2013 M/y'
                                            },
                                            'yMd': {
                                                'd': 'M/d/y \u2013 M/d/y',
                                                'M': 'M/d/y \u2013 M/d/y',
                                                'y': 'M/d/y \u2013 M/d/y'
                                            },
                                            'yMEd': {
                                                'd': 'E, M/d/y \u2013 E, M/d/y',
                                                'M': 'E, M/d/y \u2013 E, M/d/y',
                                                'y': 'E, M/d/y \u2013 E, M/d/y'
                                            },
                                            'yMMM': {
                                                'M': 'MMM \u2013 MMM y',
                                                'y': 'MMM y \u2013 MMM y'
                                            },
                                            'yMMMd': {
                                                'd': 'MMM d \u2013 d, y',
                                                'M': 'MMM d \u2013 MMM d, y',
                                                'y': 'MMM d, y \u2013 MMM d, y'
                                            },
                                            'yMMMEd': {
                                                'd': 'E, MMM d \u2013 E, MMM d, y',
                                                'M': 'E, MMM d \u2013 E, MMM d, y',
                                                'y': 'E, MMM d, y \u2013 E, MMM d, y'
                                            },
                                            'yMMMM': {
                                                'M': 'MMMM \u2013 MMMM y',
                                                'y': 'MMMM y \u2013 MMMM y'
                                            },
                                            'Hmv': {
                                                'H': 'HH:mm \u2013 HH:mm v',
                                                'm': 'HH:mm \u2013 HH:mm v'
                                            },
                                            'hmv': {
                                                'a': 'h:mm a \u2013 h:mm a v',
                                                'h': 'h:mm \u2013 h:mm a v',
                                                'm': 'h:mm \u2013 h:mm a v'
                                            },
                                            'Hm': {
                                                'H': 'HH:mm \u2013 HH:mm',
                                                'm': 'HH:mm \u2013 HH:mm'
                                            },
                                            'hm': {
                                                'a': 'h:mm a \u2013 h:mm a',
                                                'h': 'h:mm \u2013 h:mm a',
                                                'm': 'h:mm \u2013 h:mm a'
                                            },
                                            'H': {
                                                'H': 'HH \u2013 HH'
                                            },
                                            'h': {
                                                'a': 'h a \u2013 h a',
                                                'h': 'h \u2013 h a'
                                            },
                                            'd': {
                                                'd': 'd \u2013 d'
                                            },
                                            'intervalFormatFallback': '{0} \u2013 {1}'
                                        }
                                    }
                                }
                            }
                        }
                    }, false);
                }

                /*global module, require, define */
                if ('object' === typeof module && null !== module && 'object' === typeof module.exports && null !== module.exports) {
                    defineLanguage(require('astrodate'));
                } else if ('function' === typeof define && 'object' === typeof define.amd && null !== define.amd) {
                    define(['astrodate'], defineLanguage);
                } else {
                    defineLanguage(thisContext.AstroDate);
                }
            }(this));

        }

        addAstroDateModules.call({
            AstroDate: AstroDate
        });

        return AstroDate;
    }

    /*
     *
     * UMD
     *
     */

    if (!isTypeObject(globalThis)) {
        throw new TypeError('Invalid global context');
    }

    function addBigNumberModule(module, define) {
        if (!isUndefined(module) || !isUndefined(define)) {
            throw new Error();
        }

        /*jshint validthis:true */
        /* bignumber.js v1.3.0 https://github.com/MikeMcl/bignumber.js/LICENCE */
        ;
        (function (global) {
            /*
      bignumber.js v1.3.0
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

            /*********************************** DEFAULTS ************************************/

            /*
             * The default values below must be integers within the stated ranges (inclusive).
             * Most of these values can be changed during run-time using BigNumber.config().
             */

            /*
             * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,
             * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond
             * which an exception is thrown (if ERRORS is true).
             */
            var MAX = 1E9, // 0 to 1e+9

                // Limit of magnitude of exponent argument to toPower.
                MAX_POWER = 1E6, // 1 to 1e+6

                // The maximum number of decimal places for operations involving division.
                DECIMAL_PLACES = 20, // 0 to MAX

                /*
                 * The rounding mode used when rounding to the above decimal places, and when
                 * using toFixed, toPrecision and toExponential, and round (default value).
                 * UP         0 Away from zero.
                 * DOWN       1 Towards zero.
                 * CEIL       2 Towards +Infinity.
                 * FLOOR      3 Towards -Infinity.
                 * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                 * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                 * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                 * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                 * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                 */
                ROUNDING_MODE = 4, // 0 to 8

                // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                // The exponent value at and beneath which toString returns exponential notation.
                // Number type: -7
                TO_EXP_NEG = -7, // 0 to -MAX

                // The exponent value at and above which toString returns exponential notation.
                // Number type: 21
                TO_EXP_POS = 21, // 0 to MAX

                // RANGE : [MIN_EXP, MAX_EXP]

                // The minimum exponent value, beneath which underflow to zero occurs.
                // Number type: -324  (5e-324)
                MIN_EXP = -MAX, // -1 to -MAX

                // The maximum exponent value, above which overflow to Infinity occurs.
                // Number type:  308  (1.7976931348623157e+308)
                MAX_EXP = MAX, // 1 to MAX

                // Whether BigNumber Errors are ever thrown.
                // CHANGE parseInt to parseFloat if changing ERRORS to false.
                ERRORS = true, // true or false
                parse = parseInt, // parseInt or parseFloat

                /***********************************************************************************/

                P = BigNumber.prototype,
                DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
                outOfRange,
                id = 0,
                isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                trim = String.prototype.trim || function () {
                    return this.replace(/^\s+|\s+$/g, '')
                },
                ONE = BigNumber(1);


            // CONSTRUCTOR


            /*
             * The exported function.
             * Create and return a new instance of a BigNumber object.
             *
             * n {number|string|BigNumber} A numeric value.
             * [b] {number} The base of n. Integer, 2 to 64 inclusive.
             */
            function BigNumber(n, b) {
                var e, i, isNum, digits, valid, orig,
                    x = this;

                // Enable constructor usage without new.
                if (!(x instanceof BigNumber)) {
                    return new BigNumber(n, b)
                }

                // Duplicate.
                if (n instanceof BigNumber) {
                    id = 0;

                    // e is undefined.
                    if (b !== e) {
                        n += ''
                    } else {
                        x['s'] = n['s'];
                        x['e'] = n['e'];
                        x['c'] = (n = n['c']) ? n.slice() : n;
                        return
                    }
                }

                // If number, check if minus zero.
                if (typeof n != 'string') {
                    n = (isNum = typeof n == 'number' ||
                        Object.prototype.toString.call(n) == '[object Number]') &&
                        n === 0 && 1 / n < 0 ? '-0' : n + ''
                }

                orig = n;

                if (b === e && isValid.test(n)) {

                    // Determine sign.
                    x['s'] = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1

                    // Either n is not a valid BigNumber or a base has been specified.
                } else {

                    // Enable exponential notation to be used with base 10 argument.
                    // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                    if (b == 10) {

                        return setMode(n, DECIMAL_PLACES, ROUNDING_MODE)
                    }

                    n = trim.call(n).replace(/^\+(?!-)/, '');

                    x['s'] = n.charAt(0) == '-' ? (n = n.replace(/^-(?!-)/, ''), -1) : 1;

                    if (b != null) {

                        if ((b == (b | 0) || !ERRORS) && !(outOfRange = !(b >= 2 && b < 65))) {

                            digits = '[' + DIGITS.slice(0, b = b | 0) + ']+';

                            // Before non-decimal number validity test and base conversion
                            // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
                            n = n.replace(/\.$/, '').replace(/^\./, '0.');

                            // Any number in exponential form will fail due to the e+/-.
                            if (valid = new RegExp(
                                '^' + digits + '(?:\\.' + digits + ')?$', b < 37 ? 'i' : '').test(n)) {

                                if (isNum) {

                                    if (n.replace(/^0\.0*|\./, '').length > 15) {

                                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
                                        ifExceptionsThrow(orig, 0)
                                    }

                                    // Prevent later check for length on converted number.
                                    isNum = !isNum
                                }
                                n = convert(n, 10, b, x['s'])

                            } else if (n != 'Infinity' && n != 'NaN') {

                                // 'new BigNumber() not a base {b} number: {n}'
                                ifExceptionsThrow(orig, 1, b);
                                n = 'NaN'
                            }
                        } else {

                            // 'new BigNumber() base not an integer: {b}'
                            // 'new BigNumber() base out of range: {b}'
                            ifExceptionsThrow(b, 2);

                            // Ignore base.
                            valid = isValid.test(n)
                        }
                    } else {
                        valid = isValid.test(n)
                    }

                    if (!valid) {

                        // Infinity/NaN
                        x['c'] = x['e'] = null;

                        // NaN
                        if (n != 'Infinity') {

                            // No exception on NaN.
                            if (n != 'NaN') {

                                // 'new BigNumber() not a number: {n}'
                                ifExceptionsThrow(orig, 3)
                            }
                            x['s'] = null
                        }
                        id = 0;

                        return
                    }
                }

                // Decimal point?
                if ((e = n.indexOf('.')) > -1) {
                    n = n.replace('.', '')
                }

                // Exponential form?
                if ((i = n.search(/e/i)) > 0) {

                    // Determine exponent.
                    if (e < 0) {
                        e = i
                    }
                    e += +n.slice(i + 1);
                    n = n.substring(0, i)

                } else if (e < 0) {

                    // Integer.
                    e = n.length
                }

                // Determine leading zeros.
                for (i = 0; n.charAt(i) == '0'; i++) {}

                b = n.length;

                // Disallow numbers with over 15 significant digits if number type.
                if (isNum && b > 15 && n.slice(i).length > 15) {

                    // 'new BigNumber() number type has more than 15 significant digits: {n}'
                    ifExceptionsThrow(orig, 0)
                }
                id = 0;

                // Overflow?
                if ((e -= i + 1) > MAX_EXP) {

                    // Infinity.
                    x['c'] = x['e'] = null

                    // Zero or underflow?
                } else if (i == b || e < MIN_EXP) {

                    // Zero.
                    x['c'] = [x['e'] = 0]
                } else {

                    // Determine trailing zeros.
                    for (; n.charAt(--b) == '0';) {}

                    x['e'] = e;
                    x['c'] = [];

                    // Convert string to array of digits (without leading and trailing zeros).
                    for (e = 0; i <= b; x['c'][e++] = +n.charAt(i++)) {}
                }
            }


            // CONSTRUCTOR PROPERTIES/METHODS


            BigNumber['ROUND_UP'] = 0;
            BigNumber['ROUND_DOWN'] = 1;
            BigNumber['ROUND_CEIL'] = 2;
            BigNumber['ROUND_FLOOR'] = 3;
            BigNumber['ROUND_HALF_UP'] = 4;
            BigNumber['ROUND_HALF_DOWN'] = 5;
            BigNumber['ROUND_HALF_EVEN'] = 6;
            BigNumber['ROUND_HALF_CEIL'] = 7;
            BigNumber['ROUND_HALF_FLOOR'] = 8;


            /*
             * Configure infrequently-changing library-wide settings.
             *
             * Accept an object or an argument list, with one or many of the following
             * properties or parameters respectively:
             * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]
             *
             * E.g.
             * BigNumber.config(20, 4) is equivalent to
             * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
             * Ignore properties/parameters set to null or undefined.
             *
             * Return an object with the properties current values.
             */
            BigNumber['config'] = function () {
                var v, p,
                    i = 0,
                    r = {},
                    a = arguments,
                    o = a[0],
                    c = 'config',
                    inRange = function (n, lo, hi) {
                        return !((outOfRange = n < lo || n > hi) ||
                            parse(n) != n && n !== 0)
                    },
                    has = o && typeof o == 'object' ? function () {
                        if (o.hasOwnProperty(p)) return (v = o[p]) != null
                    } : function () {
                        if (a.length > i) return (v = a[i++]) != null
                    };

                // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.
                if (has(p = 'DECIMAL_PLACES')) {

                    if (inRange(v, 0, MAX)) {
                        DECIMAL_PLACES = v | 0
                    } else {

                        // 'config() DECIMAL_PLACES not an integer: {v}'
                        // 'config() DECIMAL_PLACES out of range: {v}'
                        ifExceptionsThrow(v, p, c)
                    }
                }
                r[p] = DECIMAL_PLACES;

                // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.
                if (has(p = 'ROUNDING_MODE')) {

                    if (inRange(v, 0, 8)) {
                        ROUNDING_MODE = v | 0
                    } else {

                        // 'config() ROUNDING_MODE not an integer: {v}'
                        // 'config() ROUNDING_MODE out of range: {v}'
                        ifExceptionsThrow(v, p, c)
                    }
                }
                r[p] = ROUNDING_MODE;

                /*
                 * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or
                 * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].
                 */
                if (has(p = 'EXPONENTIAL_AT')) {

                    if (inRange(v, -MAX, MAX)) {
                        TO_EXP_NEG = -(TO_EXP_POS = ~~ (v < 0 ? -v : +v))
                    } else if (!outOfRange && v && inRange(v[0], -MAX, 0) &&
                        inRange(v[1], 0, MAX)) {
                        TO_EXP_NEG = ~~v[0], TO_EXP_POS = ~~v[1]
                    } else {

                        // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'
                        // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'
                        ifExceptionsThrow(v, p, c, 1)
                    }
                }
                r[p] = [TO_EXP_NEG, TO_EXP_POS];

                /*
                 * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                 * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].
                 */
                if (has(p = 'RANGE')) {

                    if (inRange(v, -MAX, MAX) && ~~v) {
                        MIN_EXP = -(MAX_EXP = ~~ (v < 0 ? -v : +v))
                    } else if (!outOfRange && v && inRange(v[0], -MAX, -1) &&
                        inRange(v[1], 1, MAX)) {
                        MIN_EXP = ~~v[0], MAX_EXP = ~~v[1]
                    } else {

                        // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'
                        // 'config() RANGE out of range or not [negative, positive: {v}'
                        ifExceptionsThrow(v, p, c, 1, 1)
                    }
                }
                r[p] = [MIN_EXP, MAX_EXP];

                // [ERRORS] {boolean|number} true, false, 1 or 0.
                if (has(p = 'ERRORS')) {

                    if (v === !! v || v === 1 || v === 0) {
                        parse = (outOfRange = id = 0, ERRORS = !! v) ? parseInt : parseFloat
                    } else {

                        // 'config() ERRORS not a boolean or binary digit: {v}'
                        ifExceptionsThrow(v, p, c, 0, 0, 1)
                    }
                }
                r[p] = ERRORS;

                return r
            };


            // PRIVATE FUNCTIONS


            // Assemble error messages. Throw BigNumber Errors.
            function ifExceptionsThrow(arg, i, j, isArray, isRange, isErrors) {

                if (ERRORS) {
                    var error,
                        method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt',
                            'lte', 'minus', 'mod', 'plus', 'times', 'toFr'
                        ][id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0] + '()',
                        message = outOfRange ? ' out of range' : ' not a' +
                            (isRange ? ' non-zero' : 'n') + ' integer';

                    message = ([
                            method + ' number type has more than 15 significant digits',
                            method + ' not a base ' + j + ' number',
                            method + ' base' + message,
                            method + ' not a number'
                        ][i] ||
                        j + '() ' + i + (isErrors ? ' not a boolean or binary digit' : message + (isArray ? ' or not [' + (outOfRange ? ' negative, positive' : ' integer, integer') + ' ]' : ''))) + ': ' + arg;

                    outOfRange = id = 0;
                    error = new Error(message);
                    error['name'] = 'BigNumber Error';

                    throw error
                }
            }


            /*
             * Convert a numeric string of baseIn to a numeric string of baseOut.
             */
            function convert(nStr, baseOut, baseIn, sign) {
                var e, dvs, dvd, nArr, fracArr, fracBN;

                // Convert string of base bIn to an array of numbers of baseOut.
                // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].
                // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].
                function strToArr(str, bIn) {
                    var j,
                        i = 0,
                        strL = str.length,
                        arrL,
                        arr = [0];

                    for (bIn = bIn || baseIn; i < strL; i++) {

                        for (arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++) {}

                        for (arr[0] += DIGITS.indexOf(str.charAt(i)), j = 0; j < arr.length; j++) {

                            if (arr[j] > baseOut - 1) {

                                if (arr[j + 1] == null) {
                                    arr[j + 1] = 0
                                }
                                arr[j + 1] += arr[j] / baseOut ^ 0;
                                arr[j] %= baseOut
                            }
                        }
                    }

                    return arr.reverse()
                }

                // Convert array to string.
                // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).
                function arrToStr(arr) {
                    var i = 0,
                        arrL = arr.length,
                        str = '';

                    for (; i < arrL; str += DIGITS.charAt(arr[i++])) {}

                    return str
                }

                if (baseIn < 37) {
                    nStr = nStr.toLowerCase()
                }

                /*
                 * If non-integer convert integer part and fraction part separately.
                 * Convert the fraction part as if it is an integer than use division to
                 * reduce it down again to a value less than one.
                 */
                if ((e = nStr.indexOf('.')) > -1) {

                    /*
                     * Calculate the power to which to raise the base to get the number
                     * to divide the fraction part by after it has been converted as an
                     * integer to the required base.
                     */
                    e = nStr.length - e - 1;

                    // Use toFixed to avoid possible exponential notation.
                    dvs = strToArr(new BigNumber(baseIn)['pow'](e)['toF'](), 10);

                    nArr = nStr.split('.');

                    // Convert the base of the fraction part (as integer).
                    dvd = strToArr(nArr[1]);

                    // Convert the base of the integer part.
                    nArr = strToArr(nArr[0]);

                    // Result will be a BigNumber with a value less than 1.
                    fracBN = divide(dvd, dvs, dvd.length - dvs.length, sign, baseOut,
                        // Is least significant digit of integer part an odd number?
                        nArr[nArr.length - 1] & 1);

                    fracArr = fracBN['c'];

                    // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).
                    if (e = fracBN['e']) {

                        // Append zeros according to the exponent of the result.
                        for (; ++e; fracArr.unshift(0)) {}

                        // Append the fraction part to the converted integer part.
                        nStr = arrToStr(nArr) + '.' + arrToStr(fracArr)

                        // fracArr is [1].
                        // Fraction digits rounded up, so increment last digit of integer part.
                    } else if (fracArr[0]) {

                        if (nArr[e = nArr.length - 1] < baseOut - 1) {
                            ++nArr[e];
                            nStr = arrToStr(nArr)
                        } else {
                            nStr = new BigNumber(arrToStr(nArr),
                                baseOut)['plus'](ONE)['toS'](baseOut)
                        }

                        // fracArr is [0]. No fraction digits.
                    } else {
                        nStr = arrToStr(nArr)
                    }
                } else {

                    // Simple integer. Convert base.
                    nStr = arrToStr(strToArr(nStr))
                }

                return nStr
            }


            // Perform division in the specified base. Called by div and convert.
            function divide(dvd, dvs, exp, s, base, isOdd) {
                var dvsL, dvsT, next, cmp, remI,
                    dvsZ = dvs.slice(),
                    dvdI = dvsL = dvs.length,
                    dvdL = dvd.length,
                    rem = dvd.slice(0, dvsL),
                    remL = rem.length,
                    quo = new BigNumber(ONE),
                    qc = quo['c'] = [],
                    qi = 0,
                    dig = DECIMAL_PLACES + (quo['e'] = exp) + 1;

                quo['s'] = s;
                s = dig < 0 ? 0 : dig;

                // Add zeros to make remainder as long as divisor.
                for (; remL++ < dvsL; rem.push(0)) {}

                // Create version of divisor with leading zero.
                dvsZ.unshift(0);

                do {

                    // 'next' is how many times the divisor goes into the current remainder.
                    for (next = 0; next < base; next++) {

                        // Compare divisor and remainder.
                        if (dvsL != (remL = rem.length)) {
                            cmp = dvsL > remL ? 1 : -1
                        } else {
                            for (remI = -1, cmp = 0; ++remI < dvsL;) {

                                if (dvs[remI] != rem[remI]) {
                                    cmp = dvs[remI] > rem[remI] ? 1 : -1;
                                    break
                                }
                            }
                        }

                        // Subtract divisor from remainder (if divisor < remainder).
                        if (cmp < 0) {

                            // Remainder cannot be more than one digit longer than divisor.
                            // Equalise lengths using divisor with extra leading zero?
                            for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {

                                if (rem[--remL] < dvsT[remL]) {

                                    for (remI = remL; remI && !rem[--remI]; rem[remI] = base - 1) {}
                                    --rem[remI];
                                    rem[remL] += base
                                }
                                rem[remL] -= dvsT[remL]
                            }
                            for (; !rem[0]; rem.shift()) {}
                        } else {
                            break
                        }
                    }

                    // Add the 'next' digit to the result array.
                    qc[qi++] = cmp ? next : ++next;

                    // Update the remainder.
                    rem[0] && cmp ? (rem[remL] = dvd[dvdI] || 0) : (rem = [dvd[dvdI]])

                } while ((dvdI++ < dvdL || rem[0] != null) && s--);

                // Leading zero? Do not remove if result is simply zero (qi == 1).
                if (!qc[0] && qi != 1) {

                    // There can't be more than one zero.
                    --quo['e'];
                    qc.shift()
                }

                // Round?
                if (qi > dig) {
                    rnd(quo, DECIMAL_PLACES, base, isOdd, rem[0] != null)
                }

                // Overflow?
                if (quo['e'] > MAX_EXP) {

                    // Infinity.
                    quo['c'] = quo['e'] = null

                    // Underflow?
                } else if (quo['e'] < MIN_EXP) {

                    // Zero.
                    quo['c'] = [quo['e'] = 0]
                }

                return quo
            }


            /*
             * Return a string representing the value of BigNumber n in normal or
             * exponential notation rounded to the specified decimal places or
             * significant digits.
             * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).
             * d is the index (with the value in normal notation) of the digit that may be
             * rounded up.
             */
            function format(n, d, exp) {

                // Initially, i is the number of decimal places required.
                var i = d - (n = new BigNumber(n))['e'],
                    c = n['c'];

                // +-Infinity or NaN?
                if (!c) {
                    return n['toS']()
                }

                // Round?
                if (c.length > ++d) {
                    rnd(n, i, 10)
                }

                // Recalculate d if toFixed as n['e'] may have changed if value rounded up.
                i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1;

                // Append zeros?
                for (; c.length < i; c.push(0)) {}
                i = n['e'];

                /*
                 * toPrecision returns exponential notation if the number of significant
                 * digits specified is less than the number of digits necessary to
                 * represent the integer part of the value in normal notation.
                 */
                return exp == 1 || exp == 2 && (--d < i || i <= TO_EXP_NEG)

                // Exponential notation.
                ? (n['s'] < 0 && c[0] ? '-' : '') + (c.length > 1 ? (c.splice(1, 0, '.'), c.join('')) : c[0]) + (i < 0 ? 'e' : 'e+') + i

                // Normal notation.
                : n['toS']()
            }


            // Round if necessary.
            // Called by divide, format, setMode and sqrt.
            function rnd(x, dp, base, isOdd, r) {
                var xc = x['c'],
                    isNeg = x['s'] < 0,
                    half = base / 2,
                    i = x['e'] + dp + 1,

                    // 'next' is the digit after the digit that may be rounded up.
                    next = xc[i],

                    /*
                     * 'more' is whether there are digits after 'next'.
                     * E.g.
                     * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2
                     * The 'next' digit is zero, and there ARE 'more' digits after it.
                     * 0.5 (e = -1) dp = 0 gives i = 0
                     * The 'next' digit is 5 and there are no 'more' digits after it.
                     */
                    more = r || i < 0 || xc[i + 1] != null;

                r = ROUNDING_MODE < 4 ? (next != null || more) &&
                    (ROUNDING_MODE == 0 ||
                    ROUNDING_MODE == 2 && !isNeg ||
                    ROUNDING_MODE == 3 && isNeg) : next > half || next == half &&
                    (ROUNDING_MODE == 4 || more ||

                    /*
                     * isOdd is used in base conversion and refers to the least significant
                     * digit of the integer part of the value to be converted. The fraction
                     * part is rounded by this method separately from the integer part.
                     */
                    ROUNDING_MODE == 6 && (xc[i - 1] & 1 || !dp && isOdd) ||
                    ROUNDING_MODE == 7 && !isNeg ||
                    ROUNDING_MODE == 8 && isNeg);

                if (i < 1 || !xc[0]) {
                    xc.length = 0;
                    xc.push(0);

                    if (r) {

                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                        xc[0] = 1;
                        x['e'] = -dp
                    } else {

                        // Zero.
                        x['e'] = 0
                    }

                    return x
                }

                // Remove any digits after the required decimal places.
                xc.length = i--;

                // Round up?
                if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--base; ++xc[i] > base;) {
                        xc[i] = 0;

                        if (!i--) {
                            ++x['e'];
                            xc.unshift(1)
                        }
                    }
                }

                // Remove trailing zeros.
                for (i = xc.length; !xc[--i]; xc.pop()) {}

                return x
            }


            // Round after setting the appropriate rounding mode.
            // Handles ceil, floor and round.
            function setMode(x, dp, rm) {
                var r = ROUNDING_MODE;

                ROUNDING_MODE = rm;
                x = new BigNumber(x);
                x['c'] && rnd(x, dp, 10);
                ROUNDING_MODE = r;

                return x
            }


            // PROTOTYPE/INSTANCE METHODS


            /*
             * Return a new BigNumber whose value is the absolute value of this BigNumber.
             */
            P['abs'] = P['absoluteValue'] = function () {
                var x = new BigNumber(this);

                if (x['s'] < 0) {
                    x['s'] = 1
                }

                return x
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber
             * rounded to a whole number in the direction of Infinity.
             */
            P['ceil'] = function () {
                return setMode(this, 0, 2)
            };


            /*
             * Return
             * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
             * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
             * 0 if they have the same value,
             * or null if the value of either is NaN.
             */
            P['comparedTo'] = P['cmp'] = function (y, b) {
                var a,
                    x = this,
                    xc = x['c'],
                    yc = (id = -id, y = new BigNumber(y, b))['c'],
                    i = x['s'],
                    j = y['s'],
                    k = x['e'],
                    l = y['e'];

                // Either NaN?
                if (!i || !j) {
                    return null
                }

                a = xc && !xc[0], b = yc && !yc[0];

                // Either zero?
                if (a || b) {
                    return a ? b ? 0 : -j : i
                }

                // Signs differ?
                if (i != j) {
                    return i
                }

                // Either Infinity?
                if (a = i < 0, b = k == l, !xc || !yc) {
                    return b ? 0 : !xc ^ a ? 1 : -1
                }

                // Compare exponents.
                if (!b) {
                    return k > l ^ a ? 1 : -1
                }

                // Compare digit by digit.
                for (i = -1,
                    j = (k = xc.length) < (l = yc.length) ? k : l;
                    ++i < j;) {

                    if (xc[i] != yc[i]) {
                        return xc[i] > yc[i] ^ a ? 1 : -1
                    }
                }
                // Compare lengths.
                return k == l ? 0 : k > l ^ a ? 1 : -1
            };


            /*
             *  n / 0 = I
             *  n / N = N
             *  n / I = 0
             *  0 / n = 0
             *  0 / 0 = N
             *  0 / N = N
             *  0 / I = 0
             *  N / n = N
             *  N / 0 = N
             *  N / N = N
             *  N / I = N
             *  I / n = I
             *  I / 0 = I
             *  I / N = N
             *  I / I = N
             *
             * Return a new BigNumber whose value is the value of this BigNumber
             * divided by the value of BigNumber(y, b), rounded according to
             * DECIMAL_PLACES and ROUNDING_MODE.
             */
            P['dividedBy'] = P['div'] = function (y, b) {
                var xc = this['c'],
                    xe = this['e'],
                    xs = this['s'],
                    yc = (id = 2, y = new BigNumber(y, b))['c'],
                    ye = y['e'],
                    ys = y['s'],
                    s = xs == ys ? 1 : -1;

                // Either NaN/Infinity/0?
                return !xe && (!xc || !xc[0]) || !ye && (!yc || !yc[0])

                // Either NaN?
                ? new BigNumber(!xs || !ys ||

                    // Both 0 or both Infinity?
                    (xc ? yc && xc[0] == yc[0] : !yc)

                    // Return NaN.
                    ? NaN

                    // x is 0 or y is Infinity?
                    : xc && xc[0] == 0 || !yc

                    // Return +-0.
                    ? s * 0

                    // y is 0. Return +-Infinity.
                    : s / 0)

                : divide(xc, yc, xe - ye, s, 10)
            };


            /*
             * Return true if the value of this BigNumber is equal to the value of
             * BigNumber(n, b), otherwise returns false.
             */
            P['equals'] = P['eq'] = function (n, b) {
                id = 3;
                return this['cmp'](n, b) === 0
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber
             * rounded to a whole number in the direction of -Infinity.
             */
            P['floor'] = function () {
                return setMode(this, 0, 3)
            };


            /*
             * Return true if the value of this BigNumber is greater than the value of
             * BigNumber(n, b), otherwise returns false.
             */
            P['greaterThan'] = P['gt'] = function (n, b) {
                id = 4;
                return this['cmp'](n, b) > 0
            };


            /*
             * Return true if the value of this BigNumber is greater than or equal to
             * the value of BigNumber(n, b), otherwise returns false.
             */
            P['greaterThanOrEqualTo'] = P['gte'] = function (n, b) {
                id = 5;
                return (b = this['cmp'](n, b)) == 1 || b === 0
            };


            /*
             * Return true if the value of this BigNumber is a finite number, otherwise
             * returns false.
             */
            P['isFinite'] = P['isF'] = function () {
                return !!this['c']
            };


            /*
             * Return true if the value of this BigNumber is NaN, otherwise returns
             * false.
             */
            P['isNaN'] = function () {
                return !this['s']
            };


            /*
             * Return true if the value of this BigNumber is negative, otherwise
             * returns false.
             */
            P['isNegative'] = P['isNeg'] = function () {
                return this['s'] < 0
            };


            /*
             * Return true if the value of this BigNumber is 0 or -0, otherwise returns
             * false.
             */
            P['isZero'] = P['isZ'] = function () {
                return !!this['c'] && this['c'][0] == 0
            };


            /*
             * Return true if the value of this BigNumber is less than the value of
             * BigNumber(n, b), otherwise returns false.
             */
            P['lessThan'] = P['lt'] = function (n, b) {
                id = 6;
                return this['cmp'](n, b) < 0
            };


            /*
             * Return true if the value of this BigNumber is less than or equal to the
             * value of BigNumber(n, b), otherwise returns false.
             */
            P['lessThanOrEqualTo'] = P['lte'] = function (n, b) {
                id = 7;
                return (b = this['cmp'](n, b)) == -1 || b === 0
            };


            /*
             *  n - 0 = n
             *  n - N = N
             *  n - I = -I
             *  0 - n = -n
             *  0 - 0 = 0
             *  0 - N = N
             *  0 - I = -I
             *  N - n = N
             *  N - 0 = N
             *  N - N = N
             *  N - I = N
             *  I - n = I
             *  I - 0 = I
             *  I - N = N
             *  I - I = N
             *
             * Return a new BigNumber whose value is the value of this BigNumber minus
             * the value of BigNumber(y, b).
             */
            P['minus'] = function (y, b) {
                var d, i, j, xLTy,
                    x = this,
                    a = x['s'];

                b = (id = 8, y = new BigNumber(y, b))['s'];

                // Either NaN?
                if (!a || !b) {
                    return new BigNumber(NaN)
                }

                // Signs differ?
                if (a != b) {
                    return y['s'] = -b, x['plus'](y)
                }

                var xc = x['c'],
                    xe = x['e'],
                    yc = y['c'],
                    ye = y['e'];

                if (!xe || !ye) {

                    // Either Infinity?
                    if (!xc || !yc) {
                        return xc ? (y['s'] = -b, y) : new BigNumber(yc ? x : NaN)
                    }

                    // Either zero?
                    if (!xc[0] || !yc[0]) {

                        // y is non-zero?
                        return yc[0] ? (y['s'] = -b, y)

                        // x is non-zero?
                        : new BigNumber(xc[0] ? x

                            // Both are zero.
                            // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                            : ROUNDING_MODE == 3 ? -0 : 0)
                    }
                }

                // Determine which is the bigger number.
                // Prepend zeros to equalise exponents.
                if (xc = xc.slice(), a = xe - ye) {
                    d = (xLTy = a < 0) ? (a = -a, xc) : (ye = xe, yc);

                    for (d.reverse(), b = a; b--; d.push(0)) {}
                    d.reverse()
                } else {

                    // Exponents equal. Check digit by digit.
                    j = ((xLTy = xc.length < yc.length) ? xc : yc).length;

                    for (a = b = 0; b < j; b++) {

                        if (xc[b] != yc[b]) {
                            xLTy = xc[b] < yc[b];
                            break
                        }
                    }
                }

                // x < y? Point xc to the array of the bigger number.
                if (xLTy) {
                    d = xc, xc = yc, yc = d;
                    y['s'] = -y['s']
                }

                /*
                 * Append zeros to xc if shorter. No need to add zeros to yc if shorter
                 * as subtraction only needs to start at yc.length.
                 */
                if ((b = -((j = xc.length) - yc.length)) > 0) {

                    for (; b--; xc[j++] = 0) {}
                }

                // Subtract yc from xc.
                for (b = yc.length; b > a;) {

                    if (xc[--b] < yc[b]) {

                        for (i = b; i && !xc[--i]; xc[i] = 9) {}
                        --xc[i];
                        xc[b] += 10
                    }
                    xc[b] -= yc[b]
                }

                // Remove trailing zeros.
                for (; xc[--j] == 0; xc.pop()) {}

                // Remove leading zeros and adjust exponent accordingly.
                for (; xc[0] == 0; xc.shift(), --ye) {}

                /*
                 * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                 * when neither x or y are Infinity.
                 */

                // Underflow?
                if (ye < MIN_EXP || !xc[0]) {

                    /*
                     * Following IEEE 754 (2008) 6.3,
                     * n - n = +0  but  n - n = -0 when rounding towards -Infinity.
                     */
                    if (!xc[0]) {
                        y['s'] = ROUNDING_MODE == 3 ? -1 : 1
                    }

                    // Result is zero.
                    xc = [ye = 0]
                }

                return y['c'] = xc, y['e'] = ye, y
            };


            /*
             *   n % 0 =  N
             *   n % N =  N
             *   0 % n =  0
             *  -0 % n = -0
             *   0 % 0 =  N
             *   0 % N =  N
             *   N % n =  N
             *   N % 0 =  N
             *   N % N =  N
             *
             * Return a new BigNumber whose value is the value of this BigNumber modulo
             * the value of BigNumber(y, b).
             */
            P['modulo'] = P['mod'] = function (y, b) {
                var x = this,
                    xc = x['c'],
                    yc = (id = 9, y = new BigNumber(y, b))['c'],
                    i = x['s'],
                    j = y['s'];

                // Is x or y NaN, or y zero?
                b = !i || !j || yc && !yc[0];

                if (b || xc && !xc[0]) {
                    return new BigNumber(b ? NaN : x)
                }

                x['s'] = y['s'] = 1;
                b = y['cmp'](x) == 1;
                x['s'] = i, y['s'] = j;

                return b ? new BigNumber(x) : (i = DECIMAL_PLACES, j = ROUNDING_MODE,
                    DECIMAL_PLACES = 0, ROUNDING_MODE = 1,
                    x = x['div'](y),
                    DECIMAL_PLACES = i, ROUNDING_MODE = j,
                    this['minus'](x['times'](y)))
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber
             * negated, i.e. multiplied by -1.
             */
            P['negated'] = P['neg'] = function () {
                var x = new BigNumber(this);

                return x['s'] = -x['s'] || null, x
            };


            /*
             *  n + 0 = n
             *  n + N = N
             *  n + I = I
             *  0 + n = n
             *  0 + 0 = 0
             *  0 + N = N
             *  0 + I = I
             *  N + n = N
             *  N + 0 = N
             *  N + N = N
             *  N + I = N
             *  I + n = I
             *  I + 0 = I
             *  I + N = N
             *  I + I = I
             *
             * Return a new BigNumber whose value is the value of this BigNumber plus
             * the value of BigNumber(y, b).
             */
            P['plus'] = function (y, b) {
                var d,
                    x = this,
                    a = x['s'];

                b = (id = 10, y = new BigNumber(y, b))['s'];

                // Either NaN?
                if (!a || !b) {
                    return new BigNumber(NaN)
                }

                // Signs differ?
                if (a != b) {
                    return y['s'] = -b, x['minus'](y)
                }

                var xe = x['e'],
                    xc = x['c'],
                    ye = y['e'],
                    yc = y['c'];

                if (!xe || !ye) {

                    // Either Infinity?
                    if (!xc || !yc) {

                        // Return +-Infinity.
                        return new BigNumber(a / 0)
                    }

                    // Either zero?
                    if (!xc[0] || !yc[0]) {

                        // y is non-zero?
                        return yc[0] ? y

                        // x is non-zero?
                        : new BigNumber(xc[0] ? x

                            // Both are zero. Return zero.
                            : a * 0)
                    }
                }

                // Prepend zeros to equalise exponents.
                // Note: Faster to use reverse then do unshifts.
                if (xc = xc.slice(), a = xe - ye) {
                    d = a > 0 ? (ye = xe, yc) : (a = -a, xc);

                    for (d.reverse(); a--; d.push(0)) {}
                    d.reverse()
                }

                // Point xc to the longer array.
                if (xc.length - yc.length < 0) {
                    d = yc, yc = xc, xc = d
                }

                /*
                 * Only start adding at yc.length - 1 as the
                 * further digits of xc can be left as they are.
                 */
                for (a = yc.length, b = 0; a; b = (xc[--a] = xc[a] + yc[a] + b) / 10 ^ 0, xc[a] %= 10) {}

                // No need to check for zero, as +x + +y != 0 && -x + -y != 0

                if (b) {
                    xc.unshift(b);

                    // Overflow? (MAX_EXP + 1 possible)
                    if (++ye > MAX_EXP) {

                        // Infinity.
                        xc = ye = null
                    }
                }

                // Remove trailing zeros.
                for (a = xc.length; xc[--a] == 0; xc.pop()) {}

                return y['c'] = xc, y['e'] = ye, y
            };


            /*
             * Return a BigNumber whose value is the value of this BigNumber raised to
             * the power e. If e is negative round according to DECIMAL_PLACES and
             * ROUNDING_MODE.
             *
             * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.
             */
            P['toPower'] = P['pow'] = function (e) {

                // e to integer, avoiding NaN or Infinity becoming 0.
                var i = e * 0 == 0 ? e | 0 : e,
                    x = new BigNumber(this),
                    y = new BigNumber(ONE);

                // Use Math.pow?
                // Pass +-Infinity for out of range exponents.
                if ((((outOfRange = e < -MAX_POWER || e > MAX_POWER) &&
                            (i = e * 1 / 0)) ||

                        /*
                         * Any exponent that fails the parse becomes NaN.
                         *
                         * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,
                         * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.
                         */
                        parse(e) != e && e !== 0 && !(i = NaN)) &&

                    // 'pow() exponent not an integer: {e}'
                    // 'pow() exponent out of range: {e}'
                    !ifExceptionsThrow(e, 'exponent', 'pow') ||

                    // Pass zero to Math.pow, as any value to the power zero is 1.
                    !i) {

                    // i is +-Infinity, NaN or 0.
                    return new BigNumber(Math.pow(x['toS'](), i))
                }

                for (i = i < 0 ? -i : i;;) {

                    if (i & 1) {
                        y = y['times'](x)
                    }
                    i >>= 1;

                    if (!i) {
                        break
                    }
                    x = x['times'](x)
                }

                return e < 0 ? ONE['div'](y) : y
            };


            /*
             * Return a new BigNumber whose value is the value of this BigNumber
             * rounded to a maximum of dp decimal places using rounding mode rm, or to
             * 0 and ROUNDING_MODE respectively if omitted.
             *
             * [dp] {number} Integer, 0 to MAX inclusive.
             * [rm] {number} Integer, 0 to 8 inclusive.
             */
            P['round'] = function (dp, rm) {

                dp = dp == null || (((outOfRange = dp < 0 || dp > MAX) ||
                        parse(dp) != dp) &&

                    // 'round() decimal places out of range: {dp}'
                    // 'round() decimal places not an integer: {dp}'
                    !ifExceptionsThrow(dp, 'decimal places', 'round')) ? 0 : dp | 0;

                rm = rm == null || (((outOfRange = rm < 0 || rm > 8) ||

                        // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.
                        parse(rm) != rm && rm !== 0) &&

                    // 'round() mode not an integer: {rm}'
                    // 'round() mode out of range: {rm}'
                    !ifExceptionsThrow(rm, 'mode', 'round')) ? ROUNDING_MODE : rm | 0;

                return setMode(this, dp, rm)
            };


            /*
             *  sqrt(-n) =  N
             *  sqrt( N) =  N
             *  sqrt(-I) =  N
             *  sqrt( I) =  I
             *  sqrt( 0) =  0
             *  sqrt(-0) = -0
             *
             * Return a new BigNumber whose value is the square root of the value of
             * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.
             */
            P['squareRoot'] = P['sqrt'] = function () {
                var i, n, r, re, t,
                    x = this,
                    c = x['c'],
                    s = x['s'],
                    e = x['e'],
                    dp = DECIMAL_PLACES,
                    rm = ROUNDING_MODE,
                    half = new BigNumber('0.5');

                // Negative/NaN/Infinity/zero?
                if (s !== 1 || !c || !c[0]) {

                    return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0)
                }

                // Initial estimate.
                s = Math.sqrt(x['toS']());
                ROUNDING_MODE = 1;

                /*
          Math.sqrt underflow/overflow?
          Pass x to Math.sqrt as integer, then adjust the exponent of the result.
         */
                if (s == 0 || s == 1 / 0) {
                    n = c.join('');

                    if (!(n.length + e & 1)) {
                        n += '0'
                    }
                    r = new BigNumber(Math.sqrt(n) + '');

                    // r may still not be finite.
                    if (!r['c']) {
                        r['c'] = [1]
                    }
                    r['e'] = (((e + 1) / 2) | 0) - (e < 0 || e & 1)
                } else {
                    r = new BigNumber(n = s.toString())
                }
                re = r['e'];
                s = re + (DECIMAL_PLACES += 4);

                if (s < 3) {
                    s = 0
                }
                e = s;

                // Newton-Raphson iteration.
                for (;;) {
                    t = r;
                    r = half['times'](t['plus'](x['div'](t)));

                    if (t['c'].slice(0, s).join('') === r['c'].slice(0, s).join('')) {
                        c = r['c'];

                        /*
                  The exponent of r may here be one less than the final result
                  exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust
                  s so the rounding digits are indexed correctly.
                 */
                        s = s - (n && r['e'] < re);

                        /*
                  The 4th rounding digit may be in error by -1 so if the 4 rounding
                  digits are 9999 or 4999 (i.e. approaching a rounding boundary)
                  continue the iteration.
                 */
                        if (c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 &&
                            (c[s - 3] == 9 || n && c[s - 3] == 4)) {

                            /*
                      If 9999 on first run through, check to see if rounding up
                      gives the exact result as the nines may infinitely repeat.
                     */
                            if (n && c[s - 3] == 9) {
                                t = r['round'](dp, 0);

                                if (t['times'](t)['eq'](x)) {
                                    ROUNDING_MODE = rm;
                                    DECIMAL_PLACES = dp;

                                    return t
                                }
                            }
                            DECIMAL_PLACES += 4;
                            s += 4;
                            n = ''
                        } else {

                            /*
                      If the rounding digits are null, 0000 or 5000, check for an
                      exact result. If not, then there are further digits so
                      increment the 1st rounding digit to ensure correct rounding.
                     */
                            if (!c[e] && !c[e - 1] && !c[e - 2] &&
                                (!c[e - 3] || c[e - 3] == 5)) {

                                // Truncate to the first rounding digit.
                                if (c.length > e - 2) {
                                    c.length = e - 2
                                }

                                if (!r['times'](r)['eq'](x)) {

                                    while (c.length < e - 3) {
                                        c.push(0)
                                    }
                                    c[e - 3]++
                                }
                            }
                            ROUNDING_MODE = rm;
                            rnd(r, DECIMAL_PLACES = dp, 10);

                            return r
                        }
                    }
                }
            };


            /*
             *  n * 0 = 0
             *  n * N = N
             *  n * I = I
             *  0 * n = 0
             *  0 * 0 = 0
             *  0 * N = N
             *  0 * I = N
             *  N * n = N
             *  N * 0 = N
             *  N * N = N
             *  N * I = N
             *  I * n = I
             *  I * 0 = N
             *  I * N = N
             *  I * I = I
             *
             * Return a new BigNumber whose value is the value of this BigNumber times
             * the value of BigNumber(y, b).
             */
            P['times'] = function (y, b) {
                var c,
                    x = this,
                    xc = x['c'],
                    yc = (id = 11, y = new BigNumber(y, b))['c'],
                    i = x['e'],
                    j = y['e'],
                    a = x['s'];

                y['s'] = a == (b = y['s']) ? 1 : -1;

                // Either NaN/Infinity/0?
                if (!i && (!xc || !xc[0]) || !j && (!yc || !yc[0])) {

                    // Either NaN?
                    return new BigNumber(!a || !b ||

                        // x is 0 and y is Infinity  or  y is 0 and x is Infinity?
                        xc && !xc[0] && !yc || yc && !yc[0] && !xc

                        // Return NaN.
                        ? NaN

                        // Either Infinity?
                        : !xc || !yc

                        // Return +-Infinity.
                        ? y['s'] / 0

                        // x or y is 0. Return +-0.
                        : y['s'] * 0)
                }
                y['e'] = i + j;

                if ((a = xc.length) < (b = yc.length)) {
                    c = xc, xc = yc, yc = c, j = a, a = b, b = j
                }

                for (j = a + b, c = []; j--; c.push(0)) {}

                // Multiply!
                for (i = b - 1; i > -1; i--) {

                    for (b = 0, j = a + i; j > i; b = c[j] + yc[i] * xc[j - i - 1] + b,
                        c[j--] = b % 10 | 0,
                        b = b / 10 | 0) {}

                    if (b) {
                        c[j] = (c[j] + b) % 10
                    }
                }

                b && ++y['e'];

                // Remove any leading zero.
                !c[0] && c.shift();

                // Remove trailing zeros.
                for (j = c.length; !c[--j]; c.pop()) {}

                // No zero check needed as only x * 0 == 0 etc.

                // Overflow?
                y['c'] = y['e'] > MAX_EXP

                // Infinity.
                ? (y['e'] = null)

                // Underflow?
                : y['e'] < MIN_EXP

                // Zero.
                ? [y['e'] = 0]

                // Neither.
                : c;

                return y
            };


            /*
             * Return a string representing the value of this BigNumber in exponential
             * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
             * necessary.
             *
             * [dp] {number} Integer, 0 to MAX inclusive.
             */
            P['toExponential'] = P['toE'] = function (dp) {

                return format(this, (dp == null || ((outOfRange = dp < 0 || dp > MAX) ||

                        /*
                         * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is
                         * false, despite -0 == parseFloat('-0') && 0 == -0 being true.
                         */
                        parse(dp) != dp && dp !== 0) &&

                    // 'toE() decimal places not an integer: {dp}'
                    // 'toE() decimal places out of range: {dp}'
                    !ifExceptionsThrow(dp, 'decimal places', 'toE')) && this['c'] ? this['c'].length - 1 : dp | 0, 1)
            };


            /*
             * Return a string representing the value of this BigNumber in normal
             * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
             * necessary.
             *
             * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
             * but e.g. (-0.00001).toFixed(0) is '-0'.
             *
             * [dp] {number} Integer, 0 to MAX inclusive.
             */
            P['toFixed'] = P['toF'] = function (dp) {
                var n, str, d,
                    x = this;

                if (!(dp == null || ((outOfRange = dp < 0 || dp > MAX) ||
                        parse(dp) != dp && dp !== 0) &&

                    // 'toF() decimal places not an integer: {dp}'
                    // 'toF() decimal places out of range: {dp}'
                    !ifExceptionsThrow(dp, 'decimal places', 'toF'))) {
                    d = x['e'] + (dp | 0)
                }

                n = TO_EXP_NEG, dp = TO_EXP_POS;
                TO_EXP_NEG = -(TO_EXP_POS = 1 / 0);

                // Note: str is initially undefined.
                if (d == str) {
                    str = x['toS']()
                } else {
                    str = format(x, d);

                    // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
                    // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
                    if (x['s'] < 0 && x['c']) {

                        // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.
                        if (!x['c'][0]) {
                            str = str.replace(/^-/, '')

                            // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                        } else if (str.indexOf('-') < 0) {
                            str = '-' + str
                        }
                    }
                }
                TO_EXP_NEG = n, TO_EXP_POS = dp;

                return str
            };


            /*
             * Return a string array representing the value of this BigNumber as a
             * simple fraction with an integer numerator and an integer denominator.
             * The denominator will be a positive non-zero value less than or equal to
             * the specified maximum denominator. If a maximum denominator is not
             * specified, the denominator will be the lowest value necessary to
             * represent the number exactly.
             *
             * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.
             */
            P['toFraction'] = P['toFr'] = function (maxD) {
                var q, frac, n0, d0, d2, n, e,
                    n1 = d0 = new BigNumber(ONE),
                    d1 = n0 = new BigNumber('0'),
                    x = this,
                    xc = x['c'],
                    exp = MAX_EXP,
                    dp = DECIMAL_PLACES,
                    rm = ROUNDING_MODE,
                    d = new BigNumber(ONE);

                // NaN, Infinity.
                if (!xc) {
                    return x['toS']()
                }

                e = d['e'] = xc.length - x['e'] - 1;

                // If max denominator is undefined or null...
                if (maxD == null ||

                    // or NaN...
                    (!(id = 12, n = new BigNumber(maxD))['s'] ||

                        // or less than 1, or Infinity...
                        (outOfRange = n['cmp'](n1) < 0 || !n['c']) ||

                        // or not an integer...
                        (ERRORS && n['e'] < n['c'].length - 1)) &&

                    // 'toFr() max denominator not an integer: {maxD}'
                    // 'toFr() max denominator out of range: {maxD}'
                    !ifExceptionsThrow(maxD, 'max denominator', 'toFr') ||

                    // or greater than the maxD needed to specify the value exactly...
                    (maxD = n)['cmp'](d) > 0) {

                    // d is e.g. 10, 100, 1000, 10000... , n1 is 1.
                    maxD = e > 0 ? d : n1
                }

                MAX_EXP = 1 / 0;
                n = new BigNumber(xc.join(''));

                for (DECIMAL_PLACES = 0, ROUNDING_MODE = 1;;) {
                    q = n['div'](d);
                    d2 = d0['plus'](q['times'](d1));

                    if (d2['cmp'](maxD) == 1) {
                        break
                    }

                    d0 = d1, d1 = d2;

                    n1 = n0['plus'](q['times'](d2 = n1));
                    n0 = d2;

                    d = n['minus'](q['times'](d2 = d));
                    n = d2
                }

                d2 = maxD['minus'](d0)['div'](d1);
                n0 = n0['plus'](d2['times'](n1));
                d0 = d0['plus'](d2['times'](d1));

                n0['s'] = n1['s'] = x['s'];

                DECIMAL_PLACES = e * 2;
                ROUNDING_MODE = rm;

                // Determine which fraction is closer to x, n0 / d0 or n1 / d1?
                frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](
                    n0['div'](d0)['minus'](x)['abs']()) < 1 ? [n1['toS'](), d1['toS']()] : [n0['toS'](), d0['toS']()];

                return MAX_EXP = exp, DECIMAL_PLACES = dp, frac
            };


            /*
             * Return a string representing the value of this BigNumber to sd significant
             * digits and rounded using ROUNDING_MODE if necessary.
             * If sd is less than the number of digits necessary to represent the integer
             * part of the value in normal notation, then use exponential notation.
             *
             * sd {number} Integer, 1 to MAX inclusive.
             */
            P['toPrecision'] = P['toP'] = function (sd) {

                /*
                 * ERRORS true: Throw if sd not undefined, null or an integer in range.
                 * ERRORS false: Ignore sd if not a number or not in range.
                 * Truncate non-integers.
                 */
                return sd == null || (((outOfRange = sd < 1 || sd > MAX) ||
                        parse(sd) != sd) &&

                    // 'toP() precision not an integer: {sd}'
                    // 'toP() precision out of range: {sd}'
                    !ifExceptionsThrow(sd, 'precision', 'toP')) ? this['toS']() : format(this, --sd | 0, 2)
            };


            /*
             * Return a string representing the value of this BigNumber in base b, or
             * base 10 if b is omitted. If a base is specified, including base 10,
             * round according to DECIMAL_PLACES and ROUNDING_MODE.
             * If a base is not specified, and this BigNumber has a positive exponent
             * that is equal to or greater than TO_EXP_POS, or a negative exponent equal
             * to or less than TO_EXP_NEG, return exponential notation.
             *
             * [b] {number} Integer, 2 to 64 inclusive.
             */
            P['toString'] = P['toS'] = function (b) {
                var u, str, strL,
                    x = this,
                    xe = x['e'];

                // Infinity or NaN?
                if (xe === null) {
                    str = x['s'] ? 'Infinity' : 'NaN'

                    // Exponential format?
                } else if (b === u && (xe <= TO_EXP_NEG || xe >= TO_EXP_POS)) {
                    return format(x, x['c'].length - 1, 1)
                } else {
                    str = x['c'].join('');

                    // Negative exponent?
                    if (xe < 0) {

                        // Prepend zeros.
                        for (; ++xe; str = '0' + str) {}
                        str = '0.' + str

                        // Positive exponent?
                    } else if (strL = str.length, xe > 0) {

                        if (++xe > strL) {

                            // Append zeros.
                            for (xe -= strL; xe--; str += '0') {}
                        } else if (xe < strL) {
                            str = str.slice(0, xe) + '.' + str.slice(xe)
                        }

                        // Exponent zero.
                    } else {
                        if (u = str.charAt(0), strL > 1) {
                            str = u + '.' + str.slice(1)

                            // Avoid '-0'
                        } else if (u == '0') {
                            return u
                        }
                    }

                    if (b != null) {

                        if (!(outOfRange = !(b >= 2 && b < 65)) &&
                            (b == (b | 0) || !ERRORS)) {
                            str = convert(str, b | 0, 10, x['s']);

                            // Avoid '-0'
                            if (str == '0') {
                                return str
                            }
                        } else {

                            // 'toS() base not an integer: {b}'
                            // 'toS() base out of range: {b}'
                            ifExceptionsThrow(b, 'base', 'toS')
                        }
                    }

                }

                return x['s'] < 0 ? '-' + str : str
            };


            /*
             * Return as toString, but do not accept a base argument.
             */
            P['valueOf'] = function () {
                return this['toS']()
            };


            // Add aliases for BigDecimal methods.
            //P['add'] = P['plus'];
            //P['subtract'] = P['minus'];
            //P['multiply'] = P['times'];
            //P['divide'] = P['div'];
            //P['remainder'] = P['mod'];
            //P['compareTo'] = P['cmp'];
            //P['negate'] = P['neg'];


            // EXPORT


            // Node and other CommonJS-like environments that support module.exports.
            if (typeof module !== 'undefined' && module.exports) {
                module.exports = BigNumber

                //AMD.
            } else if (typeof define == 'function' && define.amd) {
                define(function () {
                    return BigNumber
                })

                //Browser.
            } else {
                global['BigNumber'] = BigNumber
            }

        })(this);



        return this;
    }

    /*global module, require, define */
    if (typeof module === 'object' && !isNull(module) && isTypeObject(module.exports)) {
        module.exports = defineAstroDate(addBigNumberModule.call({}).BigNumber);
    } else if (typeof define === 'function' && isTypeObject(define.amd)) {
        projectPaths = {};
        projectPaths.bignumber = '//cdn.jsdelivr.net/bignumber.js/1.3.0/bignumber.min';
        require.config({
            paths: projectPaths
        });

        // "name" should be removed when finished with local testing
        define('astrodate', function () {
            return defineAstroDate(addBigNumberModule.call({}).BigNumber);
        });
    } else {
        if (!isFunction(globalThis.BigNumber)) {
            throw new TypeError('bignumber.js is not loaded');
        }

        globalThis.AstroDate = defineAstroDate(addBigNumberModule.call({}).BigNumber);
    }

    tempSafariNFE = null;
}(this));
